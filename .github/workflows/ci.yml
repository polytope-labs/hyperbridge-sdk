name: CI

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "18"

            - name: Setup PNPM
              uses: pnpm/action-setup@v2
              with:
                  version: 7

            - name: Install dependencies
              run: pnpm install

            - name: Build SDK
              run: cd packages/sdk && pnpm build

            - name: Setup environment for testing
              run: |
                  # Create environment file
                  cat > packages/indexer/.env << EOL
                  # TESTNET RPCS
                  HYPERBRIDGE_GARGANTUA=${{ secrets.HYPERBRIDGE_GARGANTUA }}
                  BSC_CHAPEL=${{ secrets.BSC_CHAPEL }}
                  GNOSIS_CHIADO=${{ secrets.GNOSIS_CHIADO }}

                  # DATABASE
                  DB_USER="postgres"
                  DB_PASS="postgres"
                  DB_DATABASE="postgres"
                  DB_HOST="localhost"
                  DB_PORT=5432
                  DB_PATH="/tmp/postgres-data"

                  # ENVIRONMENT
                  CURRENT_ENV="local"

                  # SUBQL SETTINGS
                  SUB_COMMAND=-f
                  SUBQL_WORKERS=1
                  SUBQL_BATCH_SIZE=5

                  # KEYS
                  PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}
                  PING_MODULE_ADDRESS=${{ secrets.PING_MODULE_ADDRESS }}
                  EOL

                  # Create database directory
                  mkdir -p /tmp/postgres-data

            - name: Build and start indexer
              run: |
                  cd packages/indexer

                  # Generate YAML configs and build
                  pnpm run codegen:yamls
                  pnpm run codegen:subql
                  pnpm run build

                  # Start Docker services
                  docker compose -f docker/docker-compose.testnet.yml --env-file .env up -d

                  # Check service status
                  docker ps

            - name: Wait for services to be ready
              run: |
                  echo "Waiting for PostgreSQL..."
                  timeout 60s bash -c 'until docker exec $(docker ps -q -f name=postgres) pg_isready -U postgres; do sleep 2; echo "Waiting..."; done'

                  echo "Waiting for GraphQL API..."
                  timeout 120s bash -c 'until curl -s http://localhost:3000/graphql -o /dev/null; do sleep 5; echo "Waiting for GraphQL..."; done'

                  # Give indexers some time to start processing
                  echo "Waiting for indexers to initialize..."
                  sleep 30

            - name: Run SDK tests
              run: |
                  cd packages/sdk
                  pnpm test
              env:
                  INDEXER_GRAPHQL_URL: http://localhost:3000/graphql
                  BSC_CHAPEL: ${{ secrets.BSC_CHAPEL }}
                  GNOSIS_CHIADO: ${{ secrets.GNOSIS_CHIADO }}
                  HYPERBRIDGE_GARGANTUA: ${{ secrets.HYPERBRIDGE_GARGANTUA }}
                  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
                  PING_MODULE_ADDRESS: ${{ secrets.PING_MODULE_ADDRESS }}

            - name: Show container logs on failure
              if: failure()
              run: |
                  echo "==== POSTGRES LOGS ===="
                  docker logs $(docker ps -q -f name=postgres) || true

                  echo "==== GRAPHQL ENGINE LOGS ===="
                  docker logs $(docker ps -q -f name=graphql-engine) || true

                  for container in $(docker ps -q -f name=subquery-node); do
                    echo "==== SUBQUERY NODE LOGS $(docker inspect --format '{{.Name}}' $container) ===="
                    docker logs $container | tail -n 100 || true
                  done

            - name: Cleanup
              if: always()
              run: |
                  cd packages/indexer
                  docker compose -f docker/docker-compose.testnet.yml down -v
