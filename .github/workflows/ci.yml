name: CI

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "22"

            - name: Setup PNPM
              uses: pnpm/action-setup@v2
              with:
                  version: 7

            - name: Install dependencies
              run: pnpm install

            - name: Build SDK
              run: pnpm --filter="@hyperbridge/sdk" build

            - name: Set up Docker environment
              run: |
                  mkdir -p /tmp/postgres-data
                  echo "DB_USER=postgres" >> $GITHUB_ENV
                  echo "DB_PASS=postgres" >> $GITHUB_ENV
                  echo "DB_DATABASE=postgres" >> $GITHUB_ENV
                  echo "DB_HOST=postgres" >> $GITHUB_ENV
                  echo "DB_PORT=5432" >> $GITHUB_ENV
                  echo "DB_PATH=/tmp/postgres-data" >> $GITHUB_ENV
                  echo "SUB_COMMAND=-f" >> $GITHUB_ENV
                  echo "SUBQL_WORKERS=1" >> $GITHUB_ENV
                  echo "SUBQL_BATCH_SIZE=5" >> $GITHUB_ENV

            - name: Start Postgres and wait for it to be ready
              run: |
                  cd packages/indexer
                  docker compose -f docker/docker-compose.testnet.yml up -d postgres

                  # Wait for PostgreSQL to be ready
                  echo "Waiting for PostgreSQL to initialize..."
                  timeout 30 bash -c 'until docker exec docker-postgres-1 pg_isready -U postgres; do echo "PostgreSQL not ready yet..."; sleep 2; done'
                  echo "PostgreSQL is ready"

            - name: Start GraphQL engine and wait for it to be ready
              run: |
                  cd packages/indexer

                  # Modify the docker-compose file to use the container name
                  sed -i 's/DB_HOST: \${DB_HOST}/DB_HOST: postgres/g' docker/docker-compose.testnet.yml

                  # Start GraphQL engine
                  docker compose -f docker/docker-compose.testnet.yml up -d graphql-engine

                  # Wait for GraphQL engine
                  echo "Waiting for GraphQL engine to start..."
                  timeout 60 bash -c 'until curl -s http://localhost:3000/graphql -o /dev/null; do echo "Waiting..."; sleep 2; done'
                  echo "GraphQL engine is up and running"

            - name: Start indexer nodes
              run: |
                  cd packages/indexer

                  # Start each indexer node one by one
                  docker compose -f docker/docker-compose.testnet.yml up -d subquery-node-hyperbridge-gargantua
                  docker compose -f docker/docker-compose.testnet.yml up -d subquery-node-bsc-chapel
                  docker compose -f docker/docker-compose.testnet.yml up -d subquery-node-gnosis-chiado

                  # Give indexers time to initialize
                  echo "Giving indexers time to initialize..."
                  sleep 30

                  # Check indexer health
                  echo "Checking indexer health..."
                  curl -s http://localhost:3000/graphql -o /dev/null && echo "GraphQL API is accessible"

            - name: Check container status
              run: |
                  docker ps -a

                  echo "==== POSTGRES LOGS ===="
                  docker logs docker-postgres-1 | tail -n 30

                  echo "==== GRAPHQL ENGINE LOGS ===="
                  docker logs docker-graphql-engine-1 | tail -n 30

                  echo "==== HYPERBRIDGE GARGANTUA LOGS ===="
                  docker logs docker-subquery-node-hyperbridge-gargantua-1 | tail -n 30

                  echo "==== BSC CHAPEL LOGS ===="
                  docker logs docker-subquery-node-bsc-chapel-1 | tail -n 30

                  echo "==== GNOSIS CHIADO LOGS ===="
                  docker logs docker-subquery-node-gnosis-chiado-1 | tail -n 30

            - name: Run SDK tests
              run: pnpm --filter="@hyperbridge/sdk" test
              env:
                  INDEXER_GRAPHQL_URL: http://localhost:3000/graphql
                  BSC_CHAPEL: ${{ secrets.BSC_CHAPEL }}
                  GNOSIS_CHIADO: ${{ secrets.GNOSIS_CHIADO }}
                  HYPERBRIDGE_GARGANTUA: ${{ secrets.HYPERBRIDGE_GARGANTUA }}
                  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
                  PING_MODULE_ADDRESS: ${{ secrets.PING_MODULE_ADDRESS }}

            - name: Run linter
              run: pnpm lint

            - name: Stop containers
              if: always()
              run: |
                  cd packages/indexer
                  docker compose -f docker/docker-compose.testnet.yml down

              # release:
              #     name: Release
              #     needs: test
              #     if: github.event_name == 'push' && github.ref == 'refs/heads/main'
              #     runs-on: ubuntu-latest
              #     steps:
              #         - uses: actions/checkout@v3
              #           with:
              #               fetch-depth: 0
              #               token: ${{ secrets.GITHUB_TOKEN }}

              #         - name: Setup Node.js
              #           uses: actions/setup-node@v3
              #           with:
              #               node-version: "18"
              #               registry-url: "https://registry.npmjs.org"

              #         - name: Setup PNPM
              #           uses: pnpm/action-setup@v2
              #           with:
              #               version: 7

              #         - name: Install dependencies
              #           run: pnpm install

              #         - name: Setup Git User
              #           run: |
              #               git config --global user.name "GitHub Actions"
              #               git config --global user.email "actions@github.com"

              #         - name: Create Release Pull Request or Publish
              #           id: changesets
              #           uses: changesets/action@v1
              #           with:
              #               publish: pnpm release
              #               commit: "chore: version packages"
              #               title: "chore: version packages"
              #           env:
              #               GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              #               NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
