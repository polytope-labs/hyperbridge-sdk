name: CI

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "22"

            - name: Setup PNPM
              uses: pnpm/action-setup@v2
              with:
                  version: 7

            - name: Install dependencies
              run: pnpm install

            - name: Build SDK
              run: cd packages/sdk && pnpm build

            - name: Setup environment for testing
              run: |
                  # Create environment file content
                  ENV_CONTENT="# TESTNET RPCS
                  HYPERBRIDGE_GARGANTUA=${{ secrets.HYPERBRIDGE_GARGANTUA }}
                  BSC_CHAPEL=${{ secrets.BSC_CHAPEL }}
                  GNOSIS_CHIADO=${{ secrets.GNOSIS_CHIADO }}

                  # DATABASE
                  DB_USER=\"postgres\"
                  DB_PASS=\"postgres\"
                  DB_DATABASE=\"postgres\"
                  DB_HOST=\"localhost\"
                  DB_PORT=5432
                  DB_PATH=\"/tmp/postgres-data\"

                  # ENVIRONMENT
                  CURRENT_ENV=\"local\"

                  # SUBQL SETTINGS
                  SUB_COMMAND=-f
                  SUBQL_WORKERS=1
                  SUBQL_BATCH_SIZE=5

                  # KEYS
                  PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}
                  PING_MODULE_ADDRESS=${{ secrets.PING_MODULE_ADDRESS }}"

                  # Create environment file at root level
                  echo "$ENV_CONTENT" > .env

                  # Create environment file in indexer folder
                  echo "$ENV_CONTENT" > packages/indexer/.env

                  # Create database directory
                  mkdir -p /tmp/postgres-data

            - name: Build and start indexer
              run: |
                  cd packages/indexer

                  # Generate YAML configs and build
                  pnpm run codegen:yamls
                  pnpm run codegen:subql
                  pnpm run build

                  # Verify the YAML files exist and have correct content
                  echo "Checking YAML files..."
                  ls -la configs/
                  cat configs/hyperbridge-gargantua.yaml | head -n 20

                  # Step 1: Start only the Postgres container first
                  docker compose -f docker/docker-compose.testnet.yml --env-file .env up -d postgres

                  # Wait for PostgreSQL to be ready
                  echo "Waiting for PostgreSQL..."
                  timeout 60s bash -c 'until docker exec $(docker ps -q -f name=postgres) pg_isready -U postgres; do sleep 2; echo "Waiting..."; done'

                  # Initialize the database schema
                  docker exec $(docker ps -q -f name=postgres) psql -U postgres -d postgres -c "CREATE SCHEMA IF NOT EXISTS app;"
                  docker exec $(docker ps -q -f name=postgres) psql -U postgres -d postgres -c "CREATE EXTENSION IF NOT EXISTS btree_gist;"

                  # Fix file paths - ensure files are accessible inside Docker
                  echo "Setting up proper file permissions and paths..."
                  mkdir -p $(pwd)/docker-configs
                  cp -R configs/* $(pwd)/docker-configs/
                  cp dist/* $(pwd)/docker-configs/ || true

                  # Modify docker-compose to use absolute paths for volume mounts
                  sed -i "s|../configs:/app|$(pwd)/docker-configs:/app|g" docker/docker-compose.testnet.yml
                  sed -i "s|../dist:/app/dist|$(pwd)/dist:/app/dist|g" docker/docker-compose.testnet.yml

                  # Show the modified docker-compose
                  echo "Modified docker-compose.testnet.yml:"
                  cat docker/docker-compose.testnet.yml

                  # Step 2: Start a single SubQL node first as a test
                  echo "Starting one SubQL node as a test..."
                  docker compose -f docker/docker-compose.testnet.yml --env-file .env up -d subquery-node-hyperbridge-gargantua

                  # Wait and check logs
                  sleep 10
                  docker logs $(docker ps -q -f name=subquery-node-hyperbridge-gargantua)

                  # If successful, start the other nodes
                  echo "Starting remaining SubQL nodes..."
                  docker compose -f docker/docker-compose.testnet.yml --env-file .env up -d

                  # Check service status
                  docker ps

            - name: Wait for services to be ready
              run: |
                  # More robust GraphQL API check
                  echo "Waiting for GraphQL API..."
                  max_attempts=20
                  attempt=0
                  until curl -s http://localhost:3000/graphql -o /dev/null || [ $attempt -ge $max_attempts ]; do
                      attempt=$((attempt+1))
                      echo "Waiting for GraphQL... attempt $attempt of $max_attempts"
                      
                      # Check the logs to see what's happening
                      echo "Current GraphQL logs:"
                      docker logs $(docker ps -q -f name=graphql-engine) 2>&1 | tail -n 10
                      
                      # If GraphQL is failing, restart it
                      if docker logs $(docker ps -q -f name=graphql-engine) 2>&1 | grep -q "Error:"; then
                          echo "GraphQL engine failed, restarting..."
                          docker restart $(docker ps -q -f name=graphql-engine)
                      fi
                      
                      sleep 10
                  done

                  if [ $attempt -ge $max_attempts ]; then
                      echo "GraphQL service failed to start properly after $max_attempts attempts"
                      
                      # Show more detailed logs for debugging
                      echo "==== POSTGRES LOGS ===="
                      docker logs $(docker ps -q -f name=postgres) | tail -n 50
                      
                      echo "==== GRAPHQL ENGINE LOGS ===="
                      docker logs $(docker ps -q -f name=graphql-engine)
                      
                      echo "==== DB SCHEMA INFO ===="
                      docker exec $(docker ps -q -f name=postgres) psql -U postgres -d postgres -c "\dn"
                      docker exec $(docker ps -q -f name=postgres) psql -U postgres -d postgres -c "SELECT * FROM pg_tables WHERE schemaname = 'app' LIMIT 10;"
                      
                      exit 1
                  fi

                  # Give indexers some time to start processing
                  echo "Waiting for indexers to initialize..."
                  sleep 30

            - name: Run SDK tests
              run: |
                  cd packages/sdk
                  pnpm test
              env:
                  INDEXER_GRAPHQL_URL: http://localhost:3000/graphql
                  BSC_CHAPEL: ${{ secrets.BSC_CHAPEL }}
                  GNOSIS_CHIADO: ${{ secrets.GNOSIS_CHIADO }}
                  HYPERBRIDGE_GARGANTUA: ${{ secrets.HYPERBRIDGE_GARGANTUA }}
                  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
                  PING_MODULE_ADDRESS: ${{ secrets.PING_MODULE_ADDRESS }}

            - name: Show container logs on failure
              if: failure()
              run: |
                  echo "==== POSTGRES LOGS ===="
                  docker logs $(docker ps -q -f name=postgres) || true

                  echo "==== GRAPHQL ENGINE LOGS ===="
                  docker logs $(docker ps -q -f name=graphql-engine) || true

                  for container in $(docker ps -q -f name=subquery-node); do
                    echo "==== SUBQUERY NODE LOGS $(docker inspect --format '{{.Name}}' $container) ===="
                    docker logs $container | tail -n 100 || true
                  done

            - name: Cleanup
              if: always()
              run: |
                  cd packages/indexer
                  docker compose -f docker/docker-compose.testnet.yml down -v
