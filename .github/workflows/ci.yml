name: CI

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "22"

            - name: Setup PNPM
              uses: pnpm/action-setup@v2
              with:
                  version: 7

            - name: Install dependencies
              run: pnpm install

            - name: Build SDK
              run: cd packages/sdk && pnpm build

            - name: Setup environment for testing
              run: |
                  # Create environment file content
                  ENV_CONTENT="# TESTNET RPCS
                  HYPERBRIDGE_GARGANTUA=${{ secrets.HYPERBRIDGE_GARGANTUA }}
                  BSC_CHAPEL=${{ secrets.BSC_CHAPEL }}
                  GNOSIS_CHIADO=${{ secrets.GNOSIS_CHIADO }}

                  # DATABASE
                  DB_USER=\"postgres\"
                  DB_PASS=\"postgres\"
                  DB_DATABASE=\"postgres\"
                  DB_HOST=\"localhost\"
                  DB_PORT=5432
                  DB_PATH=\"/tmp/postgres-data\"

                  # ENVIRONMENT
                  CURRENT_ENV=\"local\"

                  # SUBQL SETTINGS
                  SUB_COMMAND=-f
                  SUBQL_WORKERS=1
                  SUBQL_BATCH_SIZE=5

                  # KEYS
                  PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}
                  PING_MODULE_ADDRESS=${{ secrets.PING_MODULE_ADDRESS }}"

                  # Create environment files
                  echo "$ENV_CONTENT" > .env
                  echo "$ENV_CONTENT" > packages/indexer/.env
                  mkdir -p /tmp/postgres-data

            - name: Start Postgres standalone container
              run: |
                  # Use a standalone Postgres container with the most basic config
                  docker run -d --name postgres -p 5432:5432 \
                    -e POSTGRES_USER=postgres \
                    -e POSTGRES_PASSWORD=postgres \
                    -e POSTGRES_DB=postgres \
                    postgres:14-alpine
                  
                  # Wait for PostgreSQL to be ready
                  echo "Waiting for PostgreSQL..."
                  timeout 60s bash -c 'until docker exec postgres pg_isready -U postgres; do sleep 2; echo "Waiting..."; done'
                  
                  # Initialize database schema
                  docker exec postgres psql -U postgres -d postgres -c "CREATE SCHEMA IF NOT EXISTS app;"
                  docker exec postgres psql -U postgres -d postgres -c "CREATE EXTENSION IF NOT EXISTS btree_gist;"

            - name: Build and prepare projects
              run: |
                  cd packages/indexer
                  
                  # Generate YAML configs and build
                  pnpm run codegen:yamls
                  pnpm run codegen:subql
                  pnpm run build
                  
                  # Create projects directories
                  mkdir -p /tmp/hyperbridge-project
                  mkdir -p /tmp/bsc-project
                  mkdir -p /tmp/gnosis-project
                  
                  # Find where schema.graphql is located
                  echo "Looking for schema.graphql..."
                  find . -name "schema.graphql" -ls
                  
                  # Try to copy schema.graphql directly from the source location
                  # If it's in configs/schema.graphql
                  if [ -f configs/schema.graphql ]; then
                    echo "Found schema.graphql in configs directory"
                    cp configs/schema.graphql /tmp/hyperbridge-project/
                    cp configs/schema.graphql /tmp/bsc-project/
                    cp configs/schema.graphql /tmp/gnosis-project/
                  # If it's directly in the root
                  elif [ -f schema.graphql ]; then
                    echo "Found schema.graphql in root directory"
                    cp schema.graphql /tmp/hyperbridge-project/
                    cp schema.graphql /tmp/bsc-project/
                    cp schema.graphql /tmp/gnosis-project/
                  # If it's not found, create a minimal schema.graphql
                  else
                    echo "schema.graphql not found. Creating a minimal one."
                    # Extract schema from the YAML file
                    SCHEMA_FILE=$(grep -m 1 "schema:" -A 2 configs/hyperbridge-gargantua.yaml | grep "file:" | awk '{print $2}')
                    echo "Schema reference in YAML: $SCHEMA_FILE"
                    
                    # If we can't find it, create a basic one
                    echo 'type Query { test: String }' > /tmp/hyperbridge-project/schema.graphql
                    echo 'type Query { test: String }' > /tmp/bsc-project/schema.graphql
                    echo 'type Query { test: String }' > /tmp/gnosis-project/schema.graphql
                  fi
                  
                  # Verify schema.graphql exists in all project folders
                  echo "Checking schema.graphql in project folders:"
                  ls -la /tmp/hyperbridge-project/schema.graphql
                  ls -la /tmp/bsc-project/schema.graphql
                  ls -la /tmp/gnosis-project/schema.graphql
                  
                  # Copy YAML files
                  cp configs/hyperbridge-gargantua.yaml /tmp/hyperbridge-project/project.yaml
                  cp configs/bsc-chapel.yaml /tmp/bsc-project/project.yaml
                  cp configs/gnosis-chiado.yaml /tmp/gnosis-project/project.yaml
                  
                  # Copy build artifacts to all projects
                  cp -r dist/* /tmp/hyperbridge-project/
                  cp -r dist/* /tmp/bsc-project/
                  cp -r dist/* /tmp/gnosis-project/
                  
                  # For substrate chaintypes, ensure they're properly copied
                  mkdir -p /tmp/hyperbridge-project/substrate-chaintypes
                  cp -r dist/substrate-chaintypes/* /tmp/hyperbridge-project/substrate-chaintypes/ || echo "No chaintypes found"
                  
                  # Fix paths in YAML files
                  # Add --debug output to see what's happening
                  echo "Original path references in hyperbridge YAML:"
                  grep -n "file:" /tmp/hyperbridge-project/project.yaml
                  
                  sed -i 's|file: \./schema.graphql|file: /tmp/hyperbridge-project/schema.graphql|g' /tmp/hyperbridge-project/project.yaml
                  sed -i 's|file: \./dist|file: /tmp/hyperbridge-project/dist|g' /tmp/hyperbridge-project/project.yaml
                  
                  sed -i 's|file: \./schema.graphql|file: /tmp/bsc-project/schema.graphql|g' /tmp/bsc-project/project.yaml
                  sed -i 's|file: \./dist|file: /tmp/bsc-project/dist|g' /tmp/bsc-project/project.yaml
                  
                  sed -i 's|file: \./schema.graphql|file: /tmp/gnosis-project/schema.graphql|g' /tmp/gnosis-project/project.yaml
                  sed -i 's|file: \./dist|file: /tmp/gnosis-project/dist|g' /tmp/gnosis-project/project.yaml
                  
                  # More specific path replacement for chaintypes
                  sed -i 's|file: \./dist/substrate-chaintypes|file: /tmp/hyperbridge-project/substrate-chaintypes|g' /tmp/hyperbridge-project/project.yaml
                  
                  echo "Updated path references in hyperbridge YAML:"
                  grep -n "file:" /tmp/hyperbridge-project/project.yaml
                  
                  # Modify start blocks to avoid blockchain sync issues
                  for project in hyperbridge bsc gnosis; do
                    file="/tmp/${project}-project/project.yaml"
                    current_height=$(grep -o 'startBlock: [0-9]*' $file | awk '{print $2}')
                    if [ ! -z "$current_height" ]; then
                      new_height=$((current_height + 100))
                      sed -i "s/startBlock: $current_height/startBlock: $new_height/g" $file
                      echo "Updated $file: startBlock $current_height -> $new_height"
                    fi
                  done
                  
                  # Make sure everything has the right permissions
                  chmod -R 755 /tmp/*-project
                  
                  # Output final directory structure
                  echo "Final directory structure:"
                  find /tmp/*-project -type f | sort

            - name: Start Hyperbridge SubQL Node
              run: |
                  docker run -d --name hyperbridge-node \
                    --network=host \
                    -v /tmp/hyperbridge-project:/project \
                    -e DB_USER=postgres \
                    -e DB_PASS=postgres \
                    -e DB_DATABASE=postgres \
                    -e DB_HOST=localhost \
                    -e DB_PORT=5432 \
                    subquerynetwork/subql-node-substrate:v5.9.1 \
                    -f=/project/project.yaml \
                    --db-schema=app \
                    --workers=1 \
                    --batch-size=5 \
                    --multi-chain \
                    --unsafe \
                    --log-level=debug
                    
                  # Check logs briefly
                  sleep 5
                  docker logs hyperbridge-node | head -n 20

            - name: Start BSC SubQL Node
              run: |
                  docker run -d --name bsc-node \
                    --network=host \
                    -v /tmp/bsc-project:/project \
                    -e DB_USER=postgres \
                    -e DB_PASS=postgres \
                    -e DB_DATABASE=postgres \
                    -e DB_HOST=localhost \
                    -e DB_PORT=5432 \
                    subquerynetwork/subql-node-ethereum:v5.5.0 \
                    -f=/project/project.yaml \
                    --db-schema=app \
                    --workers=1 \
                    --batch-size=5 \
                    --multi-chain \
                    --unsafe \
                    --log-level=debug \
                    --historical=timestamp \
                    --unfinalized-blocks
                    
                  # Check logs briefly
                  sleep 5
                  docker logs bsc-node | head -n 20

            - name: Start Gnosis SubQL Node
              run: |
                  docker run -d --name gnosis-node \
                    --network=host \
                    -v /tmp/gnosis-project:/project \
                    -e DB_USER=postgres \
                    -e DB_PASS=postgres \
                    -e DB_DATABASE=postgres \
                    -e DB_HOST=localhost \
                    -e DB_PORT=5432 \
                    subquerynetwork/subql-node-ethereum:v5.5.0 \
                    -f=/project/project.yaml \
                    --db-schema=app \
                    --workers=1 \
                    --batch-size=5 \
                    --multi-chain \
                    --unsafe \
                    --log-level=debug \
                    --historical=timestamp \
                    --unfinalized-blocks
                    
                  # Check logs briefly
                  sleep 5
                  docker logs gnosis-node | head -n 20

            - name: Start GraphQL engine
              run: |
                  # Initialize metadata in the database for GraphQL
                  docker exec postgres psql -U postgres -d postgres -c "
                  SET search_path TO app;
                  CREATE TABLE IF NOT EXISTS _metadata (
                      key TEXT PRIMARY KEY,
                      value JSONB NOT NULL,
                      \"createdAt\" TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                      \"updatedAt\" TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                  );
                  INSERT INTO _metadata (key, value) VALUES 
                  ('schemaVersion', '\"0.0.1\"'), 
                  ('lastProcessedHeight', '0'),
                  ('genesisHash', '\"0x0\"')
                  ON CONFLICT DO NOTHING;
                  "
                  
                  # Run subquery query service directly
                  docker run -d --name graphql-engine \
                    --network=host \
                    -e DB_USER=postgres \
                    -e DB_PASS=postgres \
                    -e DB_DATABASE=postgres \
                    -e DB_HOST=localhost \
                    -e DB_PORT=5432 \
                    -p 3000:3000 \
                    subquerynetwork/subql-query:v2.21.0 \
                    --name=app \
                    --playground
                  
                  # Check if container is running
                  docker ps | grep graphql-engine
                  
                  # Wait a moment for it to initialize
                  sleep 10
                  docker logs graphql-engine

            - name: Wait for GraphQL API
              run: |
                  # Check if GraphQL is accessible
                  echo "Checking GraphQL API..."
                  max_attempts=10
                  attempt=0
                  until curl -s http://localhost:3000/graphql -o /dev/null || [ $attempt -ge $max_attempts ]; do
                      attempt=$((attempt+1))
                      echo "Waiting for GraphQL... attempt $attempt of $max_attempts"
                      sleep 10
                  done
                  
                  if [ $attempt -ge $max_attempts ]; then
                      echo "GraphQL service failed to start properly"
                      docker logs graphql-engine
                      exit 1
                  fi
                  
                  # Check all containers are running
                  echo "All containers:"
                  docker ps
                  
                  # Wait a bit more for indexers to establish
                  echo "Giving nodes time to start indexing..."
                  sleep 30
                  
                  # Check for errors in node logs
                  echo "Checking for errors in node logs..."
                  for node in hyperbridge-node bsc-node gnosis-node; do
                    echo "=== $node errors (if any) ==="
                    docker logs $node 2>&1 | grep -i error | tail -n 10 || echo "No errors found"
                  done
                  
                  echo "GraphQL API is accessible!"

            - name: Run SDK tests
              run: |
                  cd packages/sdk
                  pnpm test
