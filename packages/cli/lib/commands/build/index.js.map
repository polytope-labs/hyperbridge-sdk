{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/commands/build/index.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;;AAEnC,4DAA4B;AAC5B,2BAAyC;AACzC,wDAAwB;AACxB,sCAA2C;AAC3C,wEAA8E;AAC9E,uCAA4F;AAE5F,MAAqB,KAAM,SAAQ,cAAO;IACxC,MAAM,CAAC,WAAW,GAAG,kCAAkC,CAAC;IAExD,MAAM,CAAC,KAAK,GAAG;QACb,QAAQ,EAAE,YAAK,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,4CAA4C,EAAC,CAAC;QAC9F,MAAM,EAAE,YAAK,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,kCAAkC,EAAC,CAAC;QAClF,IAAI,EAAE,YAAK,CAAC,MAAM,CAAC,EAAC,OAAO,EAAE,CAAC,YAAY,EAAE,MAAM,EAAE,aAAa,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,YAAY,EAAC,CAAC;QAClG,MAAM,EAAE,YAAK,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,aAAa,EAAC,CAAC;KAC/D,CAAC;IAEF,KAAK,CAAC,GAAG;QACP,IAAI,CAAC;YACH,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACxC,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAA,6BAAqB,EAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;YACxF,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,KAAK,aAAa,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC;YAEnE,IAAA,gBAAM,EAAC,IAAA,eAAU,EAAC,QAAQ,CAAC,EAAE,sDAAsD,CAAC,CAAC;YACrF,MAAM,SAAS,GAAG,IAAA,cAAS,EAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAExF,MAAM,UAAU,GAAG,IAAA,qBAAa,EAAC,QAAQ,CAAC,CAAC;YAE3C,IAAI,UAAU,EAAE,CAAC;gBACf,MAAM,IAAA,iCAAyB,EAC7B,UAAU,EACV,KAAK,CAAC,MAAM;oBACV,CAAC,CAAC,GAAG,EAAE;wBACH,WAAW;oBACb,CAAC;oBACH,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CACxB,CAAC;YACJ,CAAC;YAED,MAAM,YAAY,GAAG,IAAA,kCAAe,EAAC,SAAS,CAAC,CAAC;YAChD,MAAM,SAAS,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC;YAElE,MAAM,IAAA,6BAAU,EAAC,YAAY,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YAClE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;gBAClB,IAAI,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;gBAC1C,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACpB,CAAC;QACH,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC;IACH,CAAC;;AA3CH,wBA4CC","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport assert from 'assert';\nimport {existsSync, lstatSync} from 'fs';\nimport path from 'path';\nimport {Command, Flags} from '@oclif/core';\nimport {getBuildEntries, runWebpack} from '../../controller/build-controller';\nimport {resolveToAbsolutePath, buildManifestFromLocation, getTsManifest} from '../../utils';\n\nexport default class Build extends Command {\n  static description = 'Build this SubQuery project code';\n\n  static flags = {\n    location: Flags.string({char: 'f', description: 'local folder or manifest file to run build'}),\n    output: Flags.string({char: 'o', description: 'output folder of build e.g. dist'}),\n    mode: Flags.string({options: ['production', 'prod', 'development', 'dev'], default: 'production'}),\n    silent: Flags.boolean({char: 's', description: 'silent mode'}),\n  };\n\n  async run(): Promise<void> {\n    try {\n      const {flags} = await this.parse(Build);\n      const location = flags.location ? resolveToAbsolutePath(flags.location) : process.cwd();\n      const isDev = flags.mode === 'development' || flags.mode === 'dev';\n\n      assert(existsSync(location), 'Argument `location` is not a valid directory or file');\n      const directory = lstatSync(location).isDirectory() ? location : path.dirname(location);\n\n      const tsManifest = getTsManifest(location);\n\n      if (tsManifest) {\n        await buildManifestFromLocation(\n          tsManifest,\n          flags.silent\n            ? () => {\n                /* No-op */\n              }\n            : this.log.bind(this)\n        );\n      }\n\n      const buildEntries = getBuildEntries(directory);\n      const outputDir = path.resolve(directory, flags.output ?? 'dist');\n\n      await runWebpack(buildEntries, directory, outputDir, isDev, true);\n      if (!flags.silent) {\n        this.log('Building and packing code ...');\n        this.log('Done!');\n      }\n    } catch (e: any) {\n      this.error(e);\n    }\n  }\n}\n"]}