{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/commands/codegen/index.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;AAEnC,sCAA2C;AAC3C,0CAAuE;AACvE,4EAA4D;AAC5D,uCAA4F;AAE5F,MAAqB,OAAQ,SAAQ,cAAO;IAC1C,MAAM,CAAC,WAAW,GAAG,iCAAiC,CAAC;IAEvD,MAAM,CAAC,KAAK,GAAG;QACb,QAAQ,EAAE,YAAK,CAAC,MAAM,CAAC;YACrB,IAAI,EAAE,GAAG;YACT,WAAW,EAAE,2EAA2E;SACzF,CAAC;QACF,IAAI,EAAE,YAAK,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,6DAA6D,EAAC,CAAC;KAC5G,CAAC;IAEF,KAAK,CAAC,GAAG;QACP,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC1C,IAAI,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAC5C,IAAI,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAC5C,IAAI,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAE5C,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAC,GAAG,KAAK,CAAC;QAE/B,MAAM,WAAW,GAAG,IAAA,6BAAqB,EAAC,IAAI,IAAI,QAAQ,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QAE7E;;;;UAIE;QACF,MAAM,UAAU,GAAG,IAAA,qBAAa,EAAC,WAAW,CAAC,CAAC;QAE9C,IAAI,UAAU,EAAE,CAAC;YACf,MAAM,IAAA,iCAAyB,EAAC,UAAU,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACnE,CAAC;QAED,MAAM,EAAC,SAAS,EAAE,IAAI,EAAC,GAAG,IAAA,kCAAyB,EAAC,WAAW,CAAC,CAAC;QAEjE,IAAI,eAAe,GAAkB,IAAI,CAAC;QAE1C,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;YACjC,MAAM,UAAU,GAAG,IAAA,sBAAa,EAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAEjD,IAAI,eAAe,KAAK,IAAI,EAAE,CAAC;gBAC7B,eAAe,GAAG,UAAU,CAAC;YAC/B,CAAC;iBAAM,IAAI,UAAU,KAAK,eAAe,EAAE,CAAC;gBAC1C,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;YACvD,CAAC;QACH,CAAC;QAED,IAAI,CAAC;YACH,MAAM,IAAA,4BAAO,EAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACjC,CAAC;QAAC,OAAO,GAAQ,EAAE,CAAC;YAClB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;YACtC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;IACH,CAAC;;AApDH,0BAqDC","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {Command, Flags} from '@oclif/core';\nimport {getProjectRootAndManifest, getSchemaPath} from '@subql/common';\nimport {codegen} from '../../controller/codegen-controller';\nimport {resolveToAbsolutePath, buildManifestFromLocation, getTsManifest} from '../../utils';\n\nexport default class Codegen extends Command {\n  static description = 'Generate schemas for graph node';\n\n  static flags = {\n    location: Flags.string({\n      char: 'l',\n      description: '[deprecated] local folder to run codegen in. please use file flag instead',\n    }),\n    file: Flags.string({char: 'f', description: 'specify manifest file path (will overwrite -l if both used)'}),\n  };\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Codegen);\n    this.log('===============================');\n    this.log('---------Subql Codegen---------');\n    this.log('===============================');\n\n    const {file, location} = flags;\n\n    const projectPath = resolveToAbsolutePath(file ?? location ?? process.cwd());\n\n    /*\n      ts manifest can be either single chain ts manifest\n      or multichain ts manifest\n      or multichain yaml manifest containing single chain ts project paths\n    */\n    const tsManifest = getTsManifest(projectPath);\n\n    if (tsManifest) {\n      await buildManifestFromLocation(tsManifest, this.log.bind(this));\n    }\n\n    const {manifests, root} = getProjectRootAndManifest(projectPath);\n\n    let firstSchemaPath: string | null = null;\n\n    for (const manifest of manifests) {\n      const schemaPath = getSchemaPath(root, manifest);\n\n      if (firstSchemaPath === null) {\n        firstSchemaPath = schemaPath;\n      } else if (schemaPath !== firstSchemaPath) {\n        throw new Error('All schema paths are not the same');\n      }\n    }\n\n    try {\n      await codegen(root, manifests);\n    } catch (err: any) {\n      console.error(err.message, err.cause);\n      process.exit(1);\n    }\n  }\n}\n"]}