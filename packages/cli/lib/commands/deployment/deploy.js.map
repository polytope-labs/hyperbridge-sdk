{"version":3,"file":"deploy.js","sourceRoot":"","sources":["../../../src/commands/deployment/deploy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport assert from 'assert';\nimport {select, input} from '@inquirer/prompts';\nimport {Command, Flags} from '@oclif/core';\nimport chalk from 'chalk';\nimport {ROOT_API_URL_PROD} from '../../constants';\nimport {\n  DefaultDeployFlags,\n  executeProjectDeployment,\n  generateDeploymentChain,\n  imageVersions,\n  ipfsCID_validate,\n  projectsInfo,\n  splitEndpoints,\n} from '../../controller/deploy-controller';\nimport {V3DeploymentIndexerType} from '../../types';\nimport {addV, checkToken, valueOrPrompt} from '../../utils';\n\nexport default class Deploy extends Command {\n  static description = 'Deployment to hosted service';\n\n  static flags = {\n    ...DefaultDeployFlags,\n    ipfsCID: Flags.string({description: 'Enter IPFS CID'}),\n    endpoint: Flags.string({description: 'Enter endpoint', required: true}),\n  };\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Deploy);\n\n    const authToken = await checkToken();\n\n    flags.org = await valueOrPrompt(flags.org, 'Enter organisation', 'Organisation is required');\n    flags.projectName = await valueOrPrompt(flags.projectName, 'Enter project name', 'Project name is required');\n    flags.ipfsCID = await valueOrPrompt(flags.ipfsCID, 'Enter IPFS CID', 'IPFS CID is required');\n\n    const validator = await ipfsCID_validate(flags.ipfsCID, authToken, ROOT_API_URL_PROD);\n    flags.queryVersion = addV(flags.queryVersion);\n    flags.indexerVersion = addV(flags.indexerVersion);\n\n    if (!validator.valid) {\n      throw new Error(chalk.bgRedBright('Invalid IPFS CID'));\n    }\n\n    if (!flags.endpoint) {\n      if (flags.useDefaults) {\n        throw new Error(chalk.red('Please ensure a valid is passed using --endpoint flag'));\n      }\n\n      flags.endpoint = await input({message: 'Enter endpoint', required: true});\n    }\n\n    if (!flags.indexerVersion) {\n      assert(validator.manifestRunner, 'Please set manifestRunner in your project');\n      try {\n        flags.indexerVersion = await promptImageVersion(\n          validator.manifestRunner.node.name,\n          validator.manifestRunner.node.version,\n          flags.useDefaults,\n          authToken,\n          'Enter indexer version'\n        );\n      } catch (e) {\n        throw new Error(chalk.bgRedBright('Indexer version is required'));\n      }\n    }\n    if (!flags.queryVersion) {\n      assert(validator.manifestRunner, 'Please set manifestRunner in your project');\n      try {\n        flags.queryVersion = await promptImageVersion(\n          validator.manifestRunner.query.name,\n          validator.manifestRunner.query.version,\n          flags.useDefaults,\n          authToken,\n          'Enter query version'\n        );\n      } catch (e) {\n        throw new Error(chalk.bgRedBright('Query version is required'));\n      }\n    }\n    const projectInfo = await projectsInfo(authToken, flags.org, flags.projectName, ROOT_API_URL_PROD, flags.type);\n    const chains: V3DeploymentIndexerType[] = [];\n    chains.push(\n      generateDeploymentChain({\n        cid: flags.ipfsCID,\n        dictEndpoint: flags.dict,\n        endpoint: splitEndpoints(flags.endpoint),\n        flags: flags,\n        indexerImageVersion: flags.indexerVersion,\n      })\n    );\n\n    this.log('Deploying SubQuery project to Hosted Service');\n\n    await executeProjectDeployment({\n      log: this.log.bind(this),\n      authToken,\n      chains,\n      flags,\n      ipfsCID: flags.ipfsCID,\n      org: flags.org,\n      projectInfo,\n      projectName: flags.projectName,\n      queryVersion: flags.queryVersion,\n    });\n  }\n}\n\nexport async function promptImageVersion(\n  runner: string,\n  version: string,\n  useDefaults: boolean,\n  authToken: string,\n  message: string\n): Promise<string> {\n  const versions = await imageVersions(runner, version, authToken, ROOT_API_URL_PROD);\n  if (!useDefaults) {\n    return select({\n      message,\n      choices: versions.map((v) => ({value: v})),\n    });\n  } else {\n    return versions[0];\n  }\n}\n"]}