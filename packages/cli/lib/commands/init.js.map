{"version":3,"file":"init.js","sourceRoot":"","sources":["../../src/commands/init.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;;AAEnC,4DAA4B;AAC5B,oDAAoB;AACpB,wDAAwB;AACxB,+CAAyD;AACzD,sCAAiD;AAGjD,0DAA0B;AAC1B,0DAA0B;AAC1B,sDAAsB;AACtB,mEAUuC;AAEvC,oCAA+C;AAC/C,0EAA0C;AAE1C,mDAAmD;AACnD,SAAS,WAAW,CAAI,GAAQ;IAC9B,OAAO,CAAC,KAAyB,EAAsC,EAAE;QACvE,KAAK,KAAK,EAAE,CAAC;QACb,OAAO,OAAO,CAAC,OAAO,CAAC,eAAK,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,QAAQ,EAAC,CAAC,CAAC,CAAC,CAAC;IACrF,CAAC,CAAC;AACJ,CAAC;AAED,MAAqB,IAAK,SAAQ,cAAO;IACvC,MAAM,CAAC,WAAW,GAAG,wCAAwC,CAAC;IAE9D,MAAM,CAAC,KAAK,GAAG;QACb,KAAK,EAAE,YAAK,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,GAAG,EAAC,CAAC;QACjC,QAAQ,EAAE,YAAK,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,uCAAuC,EAAC,CAAC;QACzF,sBAAsB,EAAE,YAAK,CAAC,OAAO,CAAC,EAAC,WAAW,EAAE,8BAA8B,EAAE,OAAO,EAAE,KAAK,EAAC,CAAC;QACpG,GAAG,EAAE,YAAK,CAAC,OAAO,CAAC,EAAC,WAAW,EAAE,8EAA8E,EAAC,CAAC;QACjH,OAAO,EAAE,YAAK,CAAC,MAAM,CAAC,EAAC,WAAW,EAAE,kBAAkB,EAAC,CAAC;KACzD,CAAC;IAEF,MAAM,CAAC,IAAI,GAAG;QACZ,WAAW,EAAE,WAAI,CAAC,MAAM,CAAC;YACvB,WAAW,EAAE,+BAA+B;SAC7C,CAAC;KACH,CAAC;IAEF,KAAK,CAAC,GAAG;QACP,MAAM,EAAC,IAAI,EAAE,KAAK,EAAC,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAE7C,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAA,6BAAqB,EAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;QACxF,MAAM,OAAO,GAAG,EAAqB,CAAC;QACtC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW;YAC7B,CAAC,CAAC,IAAI,CAAC,WAAW;YAClB,CAAC,CAAC,MAAM,IAAA,eAAK,EAAC;gBACV,OAAO,EAAE,cAAc;gBACvB,OAAO,EAAE,eAAe;gBACxB,QAAQ,EAAE,IAAI;aACf,CAAC,CAAC;QACP,IAAI,YAAE,CAAC,UAAU,CAAC,cAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;YAC1D,MAAM,IAAI,KAAK,CAAC,aAAa,OAAO,CAAC,IAAI,mCAAmC,CAAC,CAAC;QAChF,CAAC;QAED,MAAM,gBAAgB,GAAG,MAAM,IAAA,+BAAa,GAAE,CAAC;QAE/C,kBAAkB;QAClB,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;QAExD,MAAM,aAAa,GAAG,MAAM,IAAA,gBAAM,EAAiB;YACjD,OAAO,EAAE,yBAAyB;YAClC,MAAM,EAAE,WAAW,CAAiB,QAA4B,CAAC;YACjE,QAAQ,EAAE,EAAE;SACb,CAAC,CAAC;QAEH,uEAAuE;QACvE,MAAM,cAAc,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,aAAa,CAAC,CAAC;QACxF,IAAA,gBAAM,EAAC,cAAc,EAAE,4BAA4B,CAAC,CAAC;QAErD,oBAAoB;QACpB,MAAM,aAAa,GAAG,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAEjE,MAAM,OAAO,GAAG,MAAM,IAAA,gBAAM,EAAS;YACnC,OAAO,EAAE,kBAAkB;YAC3B,MAAM,EAAE,WAAW,CAAC,aAAa,CAAC;YAClC,QAAQ,EAAE,EAAE;SACb,CAAC,CAAC;QAEH,MAAM,eAAe,GAAG,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC;QAChF,IAAA,gBAAM,EAAC,eAAe,EAAE,qBAAqB,CAAC,CAAC;QAE/C,MAAM,iBAAiB,GAAG,MAAM,IAAA,sCAAoB,EAAC,cAAc,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC;QAEhG,IAAI,eAAoD,CAAC;QACzD,sBAAsB;QACtB,MAAM,YAAY,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;QAC/G,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,GAAG,CAC5C,CAAC,EAAC,WAAW,EAAE,IAAI,EAAC,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,GAAG,CAAC,GAAG,eAAK,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CACvF,CAAC;QACF,gBAAgB,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,GAAG,CAAC,GAAG,eAAK,CAAC,IAAI,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC;QAE1G,MAAM,eAAe,GAAG,MAAM,IAAA,gBAAM,EAAS;YAC3C,OAAO,EAAE,2BAA2B;YACpC,MAAM,EAAE,WAAW,CAAC,gBAAgB,CAAC;YACrC,QAAQ,EAAE,EAAE;SACb,CAAC,CAAC;QAEH,MAAM,YAAY,GAAI,eAA0B,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/D,IAAI,YAAY,KAAK,OAAO,EAAE,CAAC;YAC7B,MAAM,GAAG,GAAG,MAAM,IAAA,eAAK,EAAC;gBACtB,OAAO,EAAE,sBAAsB;gBAC/B,QAAQ,EAAE,IAAI;aACf,CAAC,CAAC;YAEH,eAAe,GAAG;gBAChB,MAAM,EAAE,GAAG;gBACX,IAAI,EAAE,YAAY;gBAClB,IAAI,EAAE,EAAE;gBACR,WAAW,EAAE,EAAE;aAChB,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,eAAe,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,KAAK,YAAY,CAAC,CAAC;QACvF,CAAC;QAED,IAAA,gBAAM,EAAC,eAAe,EAAE,qBAAqB,CAAC,CAAC;QAC/C,MAAM,WAAW,GAAW,MAAM,IAAA,sCAAoB,EAAC,QAAQ,EAAE,OAAO,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;QAChG,MAAM,EAAC,mBAAmB,EAAC,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;QACnF,IAAI,mBAAmB;YAAE,OAAO;QAEhC,IAAI,MAAM,IAAA,iDAA+B,EAAC,WAAW,CAAC,EAAE,CAAC;YACvD,MAAM,OAAO,GAAG,MAAM,IAAA,iBAAO,EAAC;gBAC5B,OAAO,EAAE,oEAAoE;gBAC7E,OAAO,EAAE,KAAK;aACf,CAAC,CAAC;YAEH,IAAI,OAAO,EAAE,CAAC;gBACZ,MAAM,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;YAChD,CAAC;QACH,CAAC;IACH,CAAC;IAED,KAAK,CAAC,YAAY,CAChB,OAAwB,EACxB,WAAmB,EACnB,KAAsD;QAEtD,MAAM,EACJ,MAAM,EAAE,aAAa,EACrB,WAAW,EAAE,kBAAkB,EAC/B,QAAQ,EAAE,eAAe,EACzB,mBAAmB,GACpB,GAAG,MAAM,IAAA,8BAAY,EAAC,WAAW,CAAC,CAAC;QAEpC,IAAI,CAAC,mBAAmB,EAAE,CAAC;YACzB,MAAM,gBAAgB,GAAa,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;YAC1E,MAAM,SAAS,GAAG,MAAM,IAAA,eAAK,EAAC;gBAC5B,OAAO,EAAE,eAAe;gBACxB,OAAO,EAAE,gBAAgB,CAAC,CAAC,CAAC;gBAC5B,QAAQ,EAAE,KAAK;aAChB,CAAC,CAAC;YACH,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;gBAC1C,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACnC,CAAC;YAED,OAAO,CAAC,QAAQ,GAAG,gBAAgB,CAAC;QACtC,CAAC;QACD,MAAM,eAAe,GAAG,kBAAkB,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1E,OAAO,CAAC,MAAM,GAAG,MAAM,IAAA,eAAK,EAAC,EAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,aAAa,EAAC,CAAC,CAAC;QAC1F,OAAO,CAAC,WAAW,GAAG,MAAM,IAAA,eAAK,EAAC;YAChC,OAAO,EAAE,aAAa;YACtB,QAAQ,EAAE,KAAK;YACf,OAAO,EAAE,eAAe;SACzB,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE;YACtB,OAAO,WAAW,KAAK,eAAe,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,WAAW,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,IAAA,aAAG,EAAC,mBAAmB,CAAC,CAAC,KAAK,EAAE,CAAC;QACjD,MAAM,IAAA,yBAAO,EAAC,WAAW,EAAE,OAAO,EAAE,mBAAmB,CAAC,CAAC;QACzD,OAAO,CAAC,IAAI,EAAE,CAAC;QACf,IAAI,KAAK,CAAC,sBAAsB,CAAC,EAAE,CAAC;YAClC,MAAM,OAAO,GAAG,IAAA,aAAG,EAAC,yBAAyB,CAAC,CAAC,KAAK,EAAE,CAAC;YACvD,IAAA,qCAAmB,EAAC,WAAW,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;YAC5C,OAAO,CAAC,IAAI,EAAE,CAAC;QACjB,CAAC;QACD,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,IAAI,YAAY,mBAAmB,CAAC,CAAC,CAAC,2BAA2B,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAE9F,OAAO,EAAC,mBAAmB,EAAC,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,WAAmB;QAC7C,MAAM,IAAA,wCAAsB,EAAC,WAAW,CAAC,CAAC;QAE1C,MAAM,WAAW,GAAG,MAAM,IAAA,eAAK,EAAC;YAC9B,OAAO,EAAE,aAAa;SACvB,CAAC,CAAC;QAEH,MAAM,eAAe,GAAG,MAAM,IAAA,eAAK,EAAC;YAClC,OAAO,EAAE,8CAA8C;SACxD,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,MAAM,IAAA,eAAK,EAAC;YAC7B,OAAO,EAAE,wEAAwE;YACjF,OAAO,EAAE,GAAG;SACb,CAAC,CAAC;QAEH,MAAM,sBAAsB,GAAG,eAAe,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAErE,IAAI,CAAC,GAAG,CAAC,kDAAkD,WAAW,EAAE,CAAC,CAAC;QAC1E,MAAM,kBAAQ,CAAC,GAAG,CAAC;YACjB,IAAI;YACJ,WAAW;YACX,WAAW;YACX,GAAG,WAAW,EAAE;YAChB,WAAW;YACX,GAAG,sBAAsB,EAAE;YAC3B,cAAc;YACd,GAAG,UAAU,EAAE;SAChB,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB,CAAC,cAAgD;QAC/D,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE,CAAC;YACvC,OAAO,CAAC,cAAc,CAAC,CAAC;QAC1B,CAAC;QACD,IAAI,cAAc,YAAY,KAAK,EAAE,CAAC;YACpC,OAAO,cAAc,CAAC;QACxB,CAAC;QACD,OAAO,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACrC,CAAC;;AArMH,uBAsMC","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport assert from 'assert';\nimport fs from 'fs';\nimport path from 'path';\nimport {search, confirm, input} from '@inquirer/prompts';\nimport {Args, Command, Flags} from '@oclif/core';\nimport {NETWORK_FAMILY} from '@subql/common';\nimport {ProjectNetworkConfig} from '@subql/types-core';\nimport chalk from 'chalk';\nimport fuzzy from 'fuzzy';\nimport ora from 'ora';\nimport {\n  installDependencies,\n  cloneProjectTemplate,\n  readDefaults,\n  prepare,\n  prepareProjectScaffold,\n  validateEthereumProjectManifest,\n  fetchNetworks,\n  fetchExampleProjects,\n  ExampleProjectInterface,\n} from '../controller/init-controller';\nimport {ProjectSpecBase} from '../types';\nimport {resolveToAbsolutePath} from '../utils';\nimport Generate from './codegen/generate';\n\n// Helper function for fuzzy search on prompt input\nfunction filterInput<T>(arr: T[]) {\n  return (input: string | undefined): Promise<ReadonlyArray<{value: T}>> => {\n    input ??= '';\n    return Promise.resolve(fuzzy.filter(input, arr).map((r) => ({value: r.original})));\n  };\n}\n\nexport default class Init extends Command {\n  static description = 'Initialize a scaffold subquery project';\n\n  static flags = {\n    force: Flags.boolean({char: 'f'}),\n    location: Flags.string({char: 'l', description: 'local folder to create the project in'}),\n    'install-dependencies': Flags.boolean({description: 'Install dependencies as well', default: false}),\n    npm: Flags.boolean({description: 'Force using NPM instead of yarn, only works with `install-dependencies` flag'}),\n    abiPath: Flags.string({description: 'path to abi file'}),\n  };\n\n  static args = {\n    projectName: Args.string({\n      description: 'Give the starter project name',\n    }),\n  };\n\n  async run(): Promise<void> {\n    const {args, flags} = await this.parse(Init);\n\n    const location = flags.location ? resolveToAbsolutePath(flags.location) : process.cwd();\n    const project = {} as ProjectSpecBase;\n    project.name = args.projectName\n      ? args.projectName\n      : await input({\n          message: 'Project name',\n          default: 'subql-starter',\n          required: true,\n        });\n    if (fs.existsSync(path.join(location, `${project.name}`))) {\n      throw new Error(`Directory ${project.name} exists, try another project name`);\n    }\n\n    const networkTemplates = await fetchNetworks();\n\n    //Family selection\n    const families = networkTemplates.map(({name}) => name);\n\n    const networkFamily = await search<NETWORK_FAMILY>({\n      message: 'Select a network family',\n      source: filterInput<NETWORK_FAMILY>(families as NETWORK_FAMILY[]),\n      pageSize: 20,\n    });\n\n    // if network family is of ethereum, then should prompt them an abiPath\n    const selectedFamily = networkTemplates.find((family) => family.name === networkFamily);\n    assert(selectedFamily, 'No network family selected');\n\n    // Network selection\n    const networkStrArr = selectedFamily.networks.map((n) => n.name);\n\n    const network = await search<string>({\n      message: 'Select a network',\n      source: filterInput(networkStrArr),\n      pageSize: 20,\n    });\n\n    const selectedNetwork = selectedFamily.networks.find((v) => network === v.name);\n    assert(selectedNetwork, 'No network selected');\n\n    const candidateProjects = await fetchExampleProjects(selectedFamily.code, selectedNetwork.code);\n\n    let selectedProject: ExampleProjectInterface | undefined;\n    // Templates selection\n    const paddingWidth = candidateProjects.map(({name}) => name.length).reduce((acc, xs) => Math.max(acc, xs)) + 5;\n    const templateDisplays = candidateProjects.map(\n      ({description, name}) => `${name.padEnd(paddingWidth, ' ')}${chalk.gray(description)}`\n    );\n    templateDisplays.push(`${'Other'.padEnd(paddingWidth, ' ')}${chalk.gray('Enter a custom git endpoint')}`);\n\n    const templateDisplay = await search<string>({\n      message: 'Select a template project',\n      source: filterInput(templateDisplays),\n      pageSize: 20,\n    });\n\n    const templateName = (templateDisplay as string).split(' ')[0];\n    if (templateName === 'Other') {\n      const url = await input({\n        message: 'Enter a git repo URL',\n        required: true,\n      });\n\n      selectedProject = {\n        remote: url,\n        name: templateName,\n        path: '',\n        description: '',\n      };\n    } else {\n      selectedProject = candidateProjects.find((project) => project.name === templateName);\n    }\n\n    assert(selectedProject, 'No project selected');\n    const projectPath: string = await cloneProjectTemplate(location, project.name, selectedProject);\n    const {isMultiChainProject} = await this.setupProject(project, projectPath, flags);\n    if (isMultiChainProject) return;\n\n    if (await validateEthereumProjectManifest(projectPath)) {\n      const loadAbi = await confirm({\n        message: 'Do you want to generate scaffolding from an existing contract abi?',\n        default: false,\n      });\n\n      if (loadAbi) {\n        await this.createProjectScaffold(projectPath);\n      }\n    }\n  }\n\n  async setupProject(\n    project: ProjectSpecBase,\n    projectPath: string,\n    flags: {npm: boolean; 'install-dependencies': boolean}\n  ): Promise<{isMultiChainProject: boolean}> {\n    const {\n      author: defaultAuthor,\n      description: defaultDescription,\n      endpoint: defaultEndpoint,\n      isMultiChainProject,\n    } = await readDefaults(projectPath);\n\n    if (!isMultiChainProject) {\n      const projectEndpoints: string[] = this.extractEndpoints(defaultEndpoint);\n      const userInput = await input({\n        message: 'RPC endpoint:',\n        default: projectEndpoints[0],\n        required: false,\n      });\n      if (!projectEndpoints.includes(userInput)) {\n        projectEndpoints.push(userInput);\n      }\n\n      project.endpoint = projectEndpoints;\n    }\n    const descriptionHint = defaultDescription.substring(0, 40).concat('...');\n    project.author = await input({message: 'Author', required: true, default: defaultAuthor});\n    project.description = await input({\n      message: 'Description',\n      required: false,\n      default: descriptionHint,\n    }).then((description) => {\n      return description === descriptionHint ? defaultDescription : description;\n    });\n\n    const spinner = ora('Preparing project').start();\n    await prepare(projectPath, project, isMultiChainProject);\n    spinner.stop();\n    if (flags['install-dependencies']) {\n      const spinner = ora('Installing dependencies').start();\n      installDependencies(projectPath, flags.npm);\n      spinner.stop();\n    }\n    this.log(`${project.name} is ready${isMultiChainProject ? ' as a multi-chain project' : ''}`);\n\n    return {isMultiChainProject};\n  }\n\n  async createProjectScaffold(projectPath: string): Promise<void> {\n    await prepareProjectScaffold(projectPath);\n\n    const abiFilePath = await input({\n      message: 'Path to ABI',\n    });\n\n    const contractAddress = await input({\n      message: 'Please provide a contract address (optional)',\n    });\n\n    const startBlock = await input({\n      message: 'Please provide startBlock when the contract was deployed or first used',\n      default: '1',\n    });\n\n    const cleanedContractAddress = contractAddress.replace(/[`'\"]/g, '');\n\n    this.log(`Generating scaffold handlers and manifest from ${abiFilePath}`);\n    await Generate.run([\n      '-f',\n      projectPath,\n      '--abiPath',\n      `${abiFilePath}`,\n      '--address',\n      `${cleanedContractAddress}`,\n      '--startBlock',\n      `${startBlock}`,\n    ]);\n  }\n\n  extractEndpoints(endpointConfig: ProjectNetworkConfig['endpoint']): string[] {\n    if (typeof endpointConfig === 'string') {\n      return [endpointConfig];\n    }\n    if (endpointConfig instanceof Array) {\n      return endpointConfig;\n    }\n    return Object.keys(endpointConfig);\n  }\n}\n"]}