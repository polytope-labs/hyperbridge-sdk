{"version":3,"file":"migrate.js","sourceRoot":"","sources":["../../src/commands/migrate.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport assert from 'assert';\nimport fs, {lstatSync} from 'fs';\nimport path from 'path';\nimport {input} from '@inquirer/prompts';\nimport {Command, Flags} from '@oclif/core';\nimport {makeTempDir} from '@subql/common';\nimport git from 'simple-git';\nimport {\n  DEFAULT_SUBGRAPH_MANIFEST,\n  DEFAULT_SUBGRAPH_SCHEMA,\n  DEFAULT_SUBQL_MANIFEST,\n  DEFAULT_SUBQL_SCHEMA,\n} from '../constants';\nimport {preparePackage} from '../controller/init-controller';\nimport {\n  extractGitInfo,\n  extractNetworkFromManifest,\n  improveProjectInfo,\n  migrateAbis,\n  migrateManifest,\n  migrateSchema,\n  prepareProject,\n  readSubgraphManifest,\n  subgraphValidation,\n} from '../controller/migrate';\nimport {migrateMapping} from '../controller/migrate/mapping/migrate-mapping.controller';\n\nexport default class Migrate extends Command {\n  static description = 'Schema subgraph project to subquery project';\n\n  static flags = {\n    gitSubDirectory: Flags.string({char: 'd', description: 'specify git subdirectory path'}),\n    file: Flags.string({char: 'f', description: 'specify subgraph git/directory path'}),\n    output: Flags.string({char: 'o', description: 'Output subquery project path', required: false}),\n  };\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Migrate);\n    const {file, gitSubDirectory, output} = flags;\n\n    const subgraphPath = file ?? (await input({message: 'Subgraph project path, local or git', required: true}));\n    const subqlPath = output ?? (await input({message: 'SubQuery project path, local or git', required: true}));\n\n    const gitMatch = extractGitInfo(subgraphPath);\n    // will return false if directory not exist\n    const direMatch: boolean = lstatSync(subgraphPath, {throwIfNoEntry: false})?.isDirectory() ?? false;\n\n    const parsedSubqlPath = path.parse(subqlPath);\n    // We don't need to check output directory is existing or not\n    const subqlDir = parsedSubqlPath.ext === '' ? subqlPath : parsedSubqlPath.dir;\n    let subgraphDir: string;\n    let tempSubgraphDir: string | undefined;\n    if (gitMatch) {\n      tempSubgraphDir = await makeTempDir();\n      const {branch, link} = gitMatch;\n      // clone the subdirectory project\n      if (gitSubDirectory) {\n        subgraphDir = path.join(tempSubgraphDir, gitSubDirectory);\n        await git(tempSubgraphDir).init().addRemote('origin', link);\n        await git(tempSubgraphDir).raw('sparse-checkout', 'set', `${gitSubDirectory}`);\n        assert(branch, 'Branch is required for git subdirectory');\n        await git(tempSubgraphDir).raw('pull', 'origin', branch);\n      } else {\n        subgraphDir = tempSubgraphDir;\n        await git().clone(link, subgraphDir, branch ? ['-b', branch, '--single-branch'] : ['--single-branch']);\n      }\n      console.log(\n        `* Pull subgraph project from git: ${link}, branch: ${branch ?? 'default branch'}${\n          gitSubDirectory ? `, subdirectory:${gitSubDirectory}` : '.'\n        }`\n      );\n    } else if (direMatch) {\n      if (gitSubDirectory) {\n        this.error(`Git sub directory only works with git path, not local directories.`);\n      }\n      subgraphDir = subgraphPath;\n    } else {\n      this.error(`Subgraph project should be a git ssh/link or file directory`);\n    }\n\n    const subgraphManifestPath = path.join(subgraphDir, DEFAULT_SUBGRAPH_MANIFEST);\n    const subgraphSchemaPath = path.join(subgraphDir, DEFAULT_SUBGRAPH_SCHEMA);\n    const subqlManifestPath = path.join(subqlDir, DEFAULT_SUBQL_MANIFEST);\n    const subqlSchemaPath = path.join(subqlDir, DEFAULT_SUBQL_SCHEMA);\n\n    try {\n      const subgraphManifest = readSubgraphManifest(subgraphManifestPath, subgraphPath);\n      improveProjectInfo(subgraphDir, subgraphManifest);\n      subgraphValidation(subgraphManifest);\n      const chainInfo = extractNetworkFromManifest(subgraphManifest);\n      await prepareProject(chainInfo, subqlDir);\n      await migrateAbis(subgraphManifest, subgraphDir, subqlDir);\n      await migrateManifest(chainInfo, subgraphManifest, subqlManifestPath);\n      // render package.json\n      await preparePackage(subqlDir, {\n        name: subgraphManifest.name ?? '',\n        description: subgraphManifest.description,\n        author: subgraphManifest.author ?? '',\n        endpoint: [],\n      });\n      await migrateSchema(subgraphSchemaPath, subqlSchemaPath);\n      await migrateMapping(subgraphDir, subqlDir);\n      this.log(`* Output migrated SubQuery project to ${subqlDir}`);\n    } catch (e) {\n      // Clean project folder, only remove temp dir project, if user provide local project DO NOT REMOVE\n      if (tempSubgraphDir !== undefined) {\n        fs.rmSync(tempSubgraphDir, {recursive: true, force: true});\n      }\n      fs.rmSync(subqlDir, {recursive: true, force: true});\n      this.error(`Migrate project failed: ${e}`);\n    }\n  }\n}\n"]}