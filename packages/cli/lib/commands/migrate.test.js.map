{"version":3,"file":"migrate.test.js","sourceRoot":"","sources":["../../src/commands/migrate.test.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;;AAEnC,oDAAoB;AACpB,wDAAwB;AACxB,0CAA0C;AAC1C,mCAA8B;AAC9B,4CAAoD;AACpD,gEAAgC;AAEhC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO;AACjC,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;IAC1C,IAAI,UAAkB,CAAC;IAEvB,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,UAAU,GAAG,MAAM,IAAA,oBAAW,GAAE,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,IAAI,EAAE;QAClB,IAAI,CAAC;YACH,IAAI,CAAC,UAAU;gBAAE,OAAO;YACxB,MAAM,IAAA,eAAM,EAAC,UAAU,CAAC,CAAC;QAC3B,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,OAAO,CAAC,IAAI,CAAC,uCAAuC,EAAE,CAAC,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;QACnE,MAAM,eAAe,GAAG,2DAA2D,CAAC;QACpF,MAAM,kBAAkB,GAAG,4BAA4B,CAAC;QACxD,MAAM,iBAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;QACvF,MAAM,aAAa,GAAG,MAAM,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,kCAAsB,CAAC,EAAE,MAAM,CAAC,CAAC;QACxG,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,gCAAgC,CAAC,CAAC;QAClE,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,mCAAmC,CAAC,CAAC;QACrE,MAAM,CAAC,aAAa,CAAC,CAAC,SAAS,CAAC,kCAAkC,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {makeTempDir} from '@subql/common';\nimport {rimraf} from 'rimraf';\nimport {DEFAULT_SUBQL_MANIFEST} from '../constants';\nimport Migrate from './migrate';\n\njest.setTimeout(300_000); // 300s\ndescribe('Integration test - Migrate', () => {\n  let projectDir: string;\n\n  beforeAll(async () => {\n    projectDir = await makeTempDir();\n  });\n\n  afterAll(async () => {\n    try {\n      if (!projectDir) return;\n      await rimraf(projectDir);\n    } catch (e) {\n      console.warn('Failed to clean up tmp dir after test', e);\n    }\n  });\n\n  it('could migrate a subgraph project from remote source', async () => {\n    const graphProjectGit = 'https://github.com/graphprotocol/graph-tooling/tree/main/';\n    const graphProjectSubDir = 'examples/ethereum-gravatar';\n    await Migrate.run(['-f', graphProjectGit, '-d', graphProjectSubDir, '-o', projectDir]);\n    const subqlManifest = await fs.promises.readFile(path.join(projectDir, DEFAULT_SUBQL_MANIFEST), 'utf8');\n    expect(subqlManifest).toContain(`const project: EthereumProject`);\n    expect(subqlManifest).toContain(`name: \"example-ethereum-gravatar\"`);\n    expect(subqlManifest).toContain(`handler: \"handleUpdatedGravatar\"`);\n  });\n});\n"]}