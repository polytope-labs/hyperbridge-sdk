{"version":3,"file":"deploy.js","sourceRoot":"","sources":["../../../src/commands/multi-chain/deploy.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport assert from 'assert';\nimport fs from 'fs';\nimport path from 'path';\nimport {input} from '@inquirer/prompts';\nimport {Command, Flags} from '@oclif/core';\nimport {getMultichainManifestPath, getProjectRootAndManifest} from '@subql/common';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport YAML from 'yaml';\nimport {ROOT_API_URL_PROD} from '../../constants';\nimport {\n  DefaultDeployFlags,\n  executeProjectDeployment,\n  generateDeploymentChain,\n  ipfsCID_validate,\n  projectsInfo,\n  splitMultichainDataFields,\n} from '../../controller/deploy-controller';\nimport {getDirectoryCid, uploadToIpfs} from '../../controller/publish-controller';\nimport {V3DeploymentIndexerType} from '../../types';\nimport {addV, checkToken, resolveToAbsolutePath, valueOrPrompt} from '../../utils';\nimport {promptImageVersion} from '../deployment/deploy';\n\nexport default class MultiChainDeploy extends Command {\n  static description = 'Multi-chain deployment to hosted service';\n\n  static flags = {\n    ...DefaultDeployFlags,\n    location: Flags.string({char: 'f', description: 'from project folder or specify manifest file', required: true}),\n    ipfs: Flags.string({description: 'IPFS gateway endpoint', required: false}),\n  };\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(MultiChainDeploy);\n\n    const authToken = await checkToken();\n\n    const location = flags.location ? resolveToAbsolutePath(flags.location) : process.cwd();\n\n    // Make sure build first, generated project yaml could be added to the project (instead of ts)\n    const project = getProjectRootAndManifest(location);\n\n    const fullPaths = project.manifests.map((manifest) => path.join(project.root, manifest));\n\n    let multichainManifestPath = getMultichainManifestPath(location);\n    if (!multichainManifestPath) {\n      throw new Error(\n        chalk.bgRedBright(\n          'Selected project is not multi-chain. Please set correct file.\\n\\n https://academy.subquery.network/build/multi-chain.html'\n        )\n      );\n    }\n\n    multichainManifestPath = path.join(project.root, multichainManifestPath);\n    const multichainManifestObject = YAML.parse(fs.readFileSync(multichainManifestPath, 'utf8'));\n\n    const spinner = ora('Uploading project to IPFS').start();\n    const fileToCidMap = await uploadToIpfs(fullPaths, authToken.trim(), multichainManifestPath, flags.ipfs).catch(\n      (e) => {\n        spinner.fail(e.message);\n        this.error(e);\n      }\n    );\n    spinner.succeed('Uploaded project to IPFS');\n\n    flags.org = await valueOrPrompt(flags.org, 'Enter organisation', 'Organisation is required');\n    flags.projectName = await valueOrPrompt(flags.projectName, 'Enter project name', 'Project name is required');\n\n    // Multichain query descriptor, The IPFS provided for deployment here must be a directory\n    const ipfsCID = getDirectoryCid(fileToCidMap);\n    assert(ipfsCID, 'Multichain deployment CID not found');\n\n    const projectInfo = await projectsInfo(authToken, flags.org, flags.projectName, ROOT_API_URL_PROD, flags.type);\n    const chains: V3DeploymentIndexerType[] = [];\n\n    const endpoints = splitMultichainDataFields(flags.endpoint);\n    const dictionaries = splitMultichainDataFields(flags.dict);\n    const indexerVersions = splitMultichainDataFields(flags.indexerVersion);\n\n    if (!flags.queryVersion) {\n      try {\n        flags.queryVersion = await promptImageVersion(\n          multichainManifestObject.query.name,\n          multichainManifestObject.query.version,\n          flags.useDefaults,\n          authToken,\n          'Enter query version'\n        );\n      } catch (e) {\n        throw new Error(chalk.bgRedBright('Query version is required'));\n      }\n    }\n    flags.queryVersion = addV(flags.queryVersion);\n\n    for await (const [multichainProjectPath, multichainProjectCid] of fileToCidMap) {\n      if (!multichainProjectPath || multichainProjectPath === path.basename(multichainManifestPath)) continue;\n\n      const validator = await ipfsCID_validate(multichainProjectCid, authToken, ROOT_API_URL_PROD);\n\n      if (!validator.valid) {\n        throw new Error(chalk.bgRedBright('Invalid IPFS CID'));\n      }\n\n      assert(validator.chainId, 'Please set chainId in your project');\n      if (!indexerVersions[validator.chainId]) {\n        assert(validator.manifestRunner, 'Please set manifestRunner in your project');\n        try {\n          indexerVersions[validator.chainId] = await promptImageVersion(\n            validator.manifestRunner.node.name,\n            validator.manifestRunner.node.version,\n            flags.useDefaults,\n            authToken,\n            `Enter indexer version for ${multichainProjectPath}`\n          );\n        } catch (e) {\n          throw new Error(chalk.bgRedBright('Indexer version is required'), {cause: e});\n        }\n      }\n\n      indexerVersions[validator.chainId] = addV(indexerVersions[validator.chainId]);\n\n      if (!endpoints[validator.chainId]) {\n        if (flags.useDefaults) {\n          throw new Error(\n            chalk.red(\n              'Please ensure a endpoint valid is passed using --endpoint flag with syntax chainId:rpc_endpoint,chainId2:rpc_endpoint2...'\n            )\n          );\n        }\n\n        endpoints[validator.chainId] = await input({\n          message: `Enter endpoint for ${multichainProjectPath}`,\n          required: true,\n        });\n      }\n\n      chains.push(\n        generateDeploymentChain({\n          cid: multichainProjectCid,\n          dictEndpoint: dictionaries[validator.chainId],\n          endpoint: [endpoints[validator.chainId]],\n          flags: flags,\n          indexerImageVersion: indexerVersions[validator.chainId],\n        })\n      );\n    }\n\n    this.log('Deploying SubQuery multi-chain project to Hosted Service, IPFS: ', ipfsCID);\n\n    await executeProjectDeployment({\n      log: this.log.bind(this),\n      authToken,\n      chains,\n      flags,\n      ipfsCID: ipfsCID,\n      org: flags.org,\n      projectInfo,\n      projectName: flags.projectName,\n      queryVersion: flags.queryVersion,\n    });\n  }\n}\n"]}