{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/commands/project/index.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;;AAEnC,+CAAyC;AACzC,sCAA2C;AAC3C,8EAA8C;AAC9C,8EAA8C;AAI9C,MAAqB,OAAQ,SAAQ,cAAO;IAC1C,MAAM,CAAC,WAAW,GAAG,uBAAuB,CAAC;IAC7C,MAAM,CAAC,KAAK,GAAG;QACb,OAAO,EAAE,YAAK,CAAC,MAAM,CAAC;YACpB,OAAO,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC;SAC9B,CAAC;QACF,GAAG,wBAAc,CAAC,KAAK;QACvB,GAAG,wBAAc,CAAC,KAAK;KACxB,CAAC;IACF,MAAM,CAAC,aAAa,GAAG;QACrB,MAAM,EAAE,wBAAc;QACtB,MAAM,EAAE,wBAAc;KACvB,CAAC;IACF,KAAK,CAAC,GAAG;QACP,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC1C,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC;QAC7B,IAAI,WAA2B,CAAC;QAEhC,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,WAAW,GAAG,MAAM,IAAA,gBAAM,EAAC;gBACzB,OAAO,EAAE,yBAAyB;gBAClC,OAAO,EAAE,CAAC,EAAC,KAAK,EAAE,QAAQ,EAAC,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAC,CAAC;aAChD,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,WAAW,GAAG,MAAwB,CAAC;QACzC,CAAC;QACD,IAAI,CAAC,GAAG,CAAC,4BAA4B,WAAW,EAAE,CAAC,CAAC;QAEpD,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;YACnD,iFAAiF;YACjF,MAAM,aAAa,GAAa,OAAO,CAAC,IAAI;iBACzC,MAAM,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;iBACrF,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,EAAc,CAAC,CAAC;YAEpE,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACnC,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,IAAI,CAAC,GAAG,CAAC,8BAA8B,WAAW,WAAW,CAAC,EAAE,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;;AAvCH,0BAwCC","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {select} from '@inquirer/prompts';\nimport {Command, Flags} from '@oclif/core';\nimport Create_project from './create-project';\nimport Delete_project from './delete-project';\n\ntype projectOptions = 'create' | 'delete';\n\nexport default class Project extends Command {\n  static description = 'Create/Delete project';\n  static flags = {\n    options: Flags.string({\n      options: ['create', 'delete'],\n    }),\n    ...Delete_project.flags,\n    ...Create_project.flags,\n  };\n  static optionMapping = {\n    create: Create_project,\n    delete: Delete_project,\n  };\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Project);\n    const option = flags.options;\n    let userOptions: projectOptions;\n\n    if (!option) {\n      userOptions = await select({\n        message: 'Select a project option',\n        choices: [{value: 'create'}, {value: 'delete'}],\n      });\n    } else {\n      userOptions = option as projectOptions;\n    }\n    this.log(`Selected project option: ${userOptions}`);\n\n    try {\n      const handler = Project.optionMapping[userOptions];\n      // removes arguments -> deployment and everything before it from the process.argv\n      const stripped_argv: string[] = process.argv\n        .filter((v, idx) => idx > process.argv.indexOf('project') && !v.includes('--options'))\n        .reduce((acc, val) => acc.concat(val.split('=')), [] as string[]);\n\n      await handler.run(stripped_argv);\n    } catch (e) {\n      this.log(`Failed to execute command: ${userOptions} error: ${e}`);\n    }\n  }\n}\n"]}