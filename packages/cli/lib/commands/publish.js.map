{"version":3,"file":"publish.js","sourceRoot":"","sources":["../../src/commands/publish.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport assert from 'assert';\nimport path from 'path';\nimport {Command, Flags} from '@oclif/core';\nimport {getMultichainManifestPath, getProjectRootAndManifest} from '@subql/common';\nimport {createIPFSFile, uploadToIpfs} from '../controller/publish-controller';\nimport {checkToken, resolveToAbsolutePath} from '../utils';\nimport Build from './build';\n\nexport default class Publish extends Command {\n  static description = 'Upload this SubQuery project to IPFS';\n\n  static flags = {\n    location: Flags.string({char: 'f', description: 'from project folder or specify manifest file'}),\n    ipfs: Flags.string({description: 'IPFS gateway endpoint', required: false}),\n    output: Flags.boolean({char: 'o', description: 'Output IPFS CID', required: false}),\n  };\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Publish);\n    const location = flags.location ? resolveToAbsolutePath(flags.location) : process.cwd();\n\n    try {\n      await Build.run(['--location', location, '-s']);\n    } catch (e: any) {\n      this.log(e);\n      this.error('Failed to build project');\n    }\n\n    // Make sure build first, generated project yaml could be added to the project (instead of ts)\n    const project = getProjectRootAndManifest(location);\n\n    const authToken = await checkToken();\n\n    const fullPaths = project.manifests.map((manifest) => path.join(project.root, manifest));\n\n    let multichainManifestPath = getMultichainManifestPath(location);\n    if (multichainManifestPath) {\n      multichainManifestPath = path.join(project.root, multichainManifestPath);\n    }\n\n    const fileToCidMap = await uploadToIpfs(fullPaths, authToken.trim(), multichainManifestPath, flags.ipfs).catch(\n      (e) => {\n        // log further cause from error\n        if (e.cause) {\n          console.error(e.cause);\n        }\n        return this.error(e);\n      }\n    );\n\n    await Promise.all(\n      project.manifests.map((manifest) => {\n        const cid = fileToCidMap.get(manifest);\n        assert(cid, `CID for ${manifest} not found`);\n        return createIPFSFile(project.root, manifest, cid);\n      })\n    );\n\n    const directoryCid = Array.from(fileToCidMap).find(([file]) => file === '');\n\n    if (!flags.output) {\n      if (directoryCid) {\n        this.log(`SubQuery Multichain Project uploaded to IPFS: ${directoryCid[1]}`);\n      }\n\n      fileToCidMap.forEach((cid, file) => {\n        if (file !== '') {\n          this.log(`${directoryCid ? '- This includes' : 'SubQuery Project'} ${file} uploaded to IPFS: ${cid}`);\n        }\n      });\n    } else {\n      if (directoryCid) {\n        this.log(directoryCid[1]);\n      } else {\n        fileToCidMap.forEach((cid, file) => {\n          if (file !== '') {\n            this.log(cid);\n          }\n        });\n      }\n    }\n  }\n}\n"]}