{"version":3,"file":"add-chain-controller.js","sourceRoot":"","sources":["../../src/controller/add-chain-controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport {DEFAULT_MULTICHAIN_MANIFEST, getProjectRootAndManifest, getSchemaPath, loadFromJsonOrYaml} from '@subql/common';\nimport {MultichainProjectManifest, ProjectManifestV1_0_0} from '@subql/types-core';\nimport {Scalar, Document, parseDocument, YAMLSeq, YAMLMap} from 'yaml';\n\nconst nodeToDockerImage: Record<string, string> = {\n  '@subql/node': 'onfinality/subql-node',\n  '@subql/node-ethereum': 'onfinality/subql-node-ethereum',\n  '@subql/node-cosmos': 'onfinality/subql-node-cosmos',\n  '@subql/node-algorand': 'onfinality/subql-node-algorand',\n  '@subql/node-near': 'onfinality/subql-node-near',\n  '@subql/node-stellar': 'subquerynetwork/subql-node-stellar',\n  '@subql/node-concordium': 'subquerynetwork/subql-node-concordium',\n  '@subql/node-starknet': 'subquerynetwork/subql-node-starknet',\n};\n\ntype DockerComposeDependsOn = {\n  condition: string;\n};\n\ntype DockerComposeEnvironment = {\n  [key: string]: string;\n};\n\ntype DockerComposeHealthcheck = {\n  test: Array<string | 'CMD'>;\n  interval: string;\n  timeout: string;\n  retries: number;\n};\n\ntype DockerComposeService = {\n  image?: string;\n  depends_on?: Record<string, DockerComposeDependsOn>;\n  restart?: string;\n  environment?: DockerComposeEnvironment;\n  volumes?: string[];\n  command?: string[];\n  healthcheck?: DockerComposeHealthcheck;\n};\n\nexport async function addChain(multichain: string, chainManifestPath: string): Promise<void> {\n  const multichainManifestPath = determineMultichainManifestPath(multichain);\n  const multichainManifest = loadMultichainManifest(multichainManifestPath);\n  chainManifestPath = handleChainManifestOrId(chainManifestPath);\n  validateAndAddChainManifest(path.parse(multichainManifestPath).dir, chainManifestPath, multichainManifest);\n  fs.writeFileSync(multichainManifestPath, multichainManifest.toString());\n  await updateDockerCompose(path.parse(multichainManifestPath).dir, chainManifestPath);\n}\n\nexport function determineMultichainManifestPath(multichain: string): string {\n  if (!multichain) {\n    throw new Error(`Multichain project path -f not provided`);\n  }\n\n  let multichainPath: string;\n  if (fs.lstatSync(multichain).isDirectory()) {\n    multichainPath = path.resolve(multichain, DEFAULT_MULTICHAIN_MANIFEST);\n  } else {\n    if (!fs.existsSync(multichain)) {\n      throw new Error(`Could not resolve multichain project path: ${multichain}`);\n    }\n    multichainPath = multichain;\n  }\n\n  return multichainPath;\n}\n\nexport function loadMultichainManifest(multichainManifestPath: string): Document {\n  let multichainManifest: Document;\n\n  if (!isMultiChainProject(multichainManifestPath)) {\n    throw new Error(`${multichainManifestPath} is an invalid multichain project manifest`);\n  }\n\n  if (fs.existsSync(multichainManifestPath)) {\n    const content = fs.readFileSync(multichainManifestPath, 'utf8');\n    multichainManifest = parseDocument(content);\n  } else {\n    throw new Error(`Multichain project ${multichainManifestPath} does not exist`);\n  }\n\n  return multichainManifest;\n}\n\nexport function handleChainManifestOrId(chainManifestPath: string): string {\n  if (!chainManifestPath) {\n    throw new Error('You must provide chain manifest path');\n  }\n\n  // Check if the provided chain manifest path exists\n  if (!fs.existsSync(chainManifestPath)) {\n    throw new Error(`Chain manifest file does not exist at the specified location: ${chainManifestPath}`);\n  }\n\n  return path.resolve(chainManifestPath);\n}\n\nexport function validateAndAddChainManifest(\n  projectDir: string,\n  chainManifestPath: string,\n  multichainManifest: Document\n): void {\n  // Validate schema paths\n  const chainManifestProject = getProjectRootAndManifest(path.resolve(projectDir, chainManifestPath));\n  const chainManifestSchemaPath = getSchemaPath(chainManifestProject.root, chainManifestProject.manifests[0]);\n\n  console.log(`Chain manifest: ${chainManifestProject.manifests[0]}`);\n\n  for (const manifestPath of (multichainManifest.get('projects') as YAMLSeq).items.map(\n    (item) => (item as Scalar).value as string\n  )) {\n    const project = getProjectRootAndManifest(path.resolve(projectDir, manifestPath));\n    const schemaPath = getSchemaPath(project.root, project.manifests[0]);\n\n    if (schemaPath !== chainManifestSchemaPath) {\n      console.error(\n        `Error: Schema path in the provided chain manifest is different from the schema path in the existing chain manifest for project: ${project.root}`\n      );\n      throw new Error('Schema path mismatch error');\n    }\n  }\n\n  for (const project of (multichainManifest.get('projects') as YAMLSeq<string>).toJSON()) {\n    if (path.resolve(projectDir, project as string) === chainManifestPath) {\n      console.log(`project ${project} already exists in multichain manifest, skipping addition`);\n      return;\n    }\n  }\n\n  // Add the chain manifest path to multichain manifest\n  const relativePath = path.relative(projectDir, chainManifestPath);\n\n  (multichainManifest.get('projects') as YAMLSeq).add(relativePath);\n  console.log(`Successfully added chain manifest path: ${relativePath}`);\n}\n\nexport function loadDockerComposeFile(dockerComposePath: string): Document | undefined {\n  if (fs.existsSync(dockerComposePath)) {\n    const content = fs.readFileSync(dockerComposePath, 'utf8');\n    return parseDocument(content);\n  }\n}\n\nfunction getSubqlNodeService(dockerCompose: Document): DockerComposeService | undefined {\n  const services = dockerCompose.get('services');\n  if (services && services instanceof YAMLMap) {\n    const service = services.items.find((item) => {\n      const image = item.value.get('image') as string;\n      return image?.startsWith('onfinality/subql-node');\n    });\n\n    if (service && service.value instanceof YAMLMap) {\n      const commands = service.value.get('command') as YAMLSeq<string>;\n      if (!(commands.toJSON() as string[]).includes('--multi-chain')) {\n        commands.add('--multi-chain');\n      }\n      return service.value.toJSON() as DockerComposeService;\n    }\n  }\n\n  return undefined;\n}\n\nasync function getDefaultServiceConfiguration(\n  chainManifestPath: string,\n  serviceName: string\n): Promise<DockerComposeService> {\n  const manifest = await loadFromJsonOrYaml(chainManifestPath);\n  let nodeName: string;\n  try {\n    nodeName = (manifest as ProjectManifestV1_0_0).runner.node.name;\n  } catch (e) {\n    throw new Error(`unable to retrieve runner node from manifest: ${e}`);\n  }\n\n  const dockerImage = nodeToDockerImage[nodeName];\n  if (!dockerImage) {\n    throw new Error(`unknown node runner name ${nodeName}`);\n  }\n\n  return {\n    image: `${dockerImage}:latest`,\n    depends_on: {\n      postgres: {\n        condition: 'service_healthy',\n      },\n    },\n    restart: 'always',\n    environment: {\n      DB_USER: 'postgres',\n      DB_PASS: 'postgres',\n      DB_DATABASE: 'postgres',\n      DB_HOST: 'postgres',\n      DB_PORT: '5432',\n    },\n    volumes: ['./:/app'],\n    command: [`-f=app/${path.basename(chainManifestPath)}`, '--multi-chain'],\n    healthcheck: {\n      test: ['CMD', 'curl', '-f', `http://${serviceName}:3000/ready`],\n      interval: '3s',\n      timeout: '5s',\n      retries: 10,\n    },\n  };\n}\n\nexport async function updateDockerCompose(projectDir: string, chainManifestPath: string): Promise<void> {\n  const serviceName = `subquery-node-${path.basename(chainManifestPath, '.yaml')}`;\n  const dockerComposePath = path.join(projectDir, 'docker-compose.yml');\n  const dockerCompose = loadDockerComposeFile(dockerComposePath);\n  if (!dockerCompose) {\n    throw new Error(`Docker Compose file does not exist at the specified location: ${dockerComposePath}`);\n  }\n\n  console.log(`Updating Docker Compose for chain manifest: ${chainManifestPath}`);\n\n  //check if service already exists\n  const services = dockerCompose.get('services');\n  if (services && services instanceof YAMLMap) {\n    const existingService = services.items.find((item) => {\n      const image = item.value.toJSON().image;\n      if (!image || !image.startsWith('onfinality/subql-node')) {\n        return false;\n      }\n      const commands: string[] = item.value.toJSON().command;\n      return commands?.includes(`-f=app/${path.basename(chainManifestPath)}`);\n    });\n\n    if (existingService) {\n      console.log(\n        `Service for ${path.basename(chainManifestPath)} already exists in Docker Compose, skipping addition`\n      );\n      return;\n    }\n  }\n\n  let subqlNodeService = getSubqlNodeService(dockerCompose);\n  if (subqlNodeService) {\n    // If the service already exists, update its configuration\n    subqlNodeService.command = subqlNodeService.command?.filter((cmd) => !cmd.startsWith('-f=')) ?? [];\n    subqlNodeService.command.push(`-f=app/${path.basename(chainManifestPath)}`);\n\n    if (subqlNodeService.healthcheck) {\n      subqlNodeService.healthcheck.test = ['CMD', 'curl', '-f', `http://${serviceName}:3000/ready`];\n    }\n  } else {\n    // Otherwise, create a new service configuration\n    subqlNodeService = await getDefaultServiceConfiguration(chainManifestPath, serviceName);\n  }\n  console.log(`Created new service configuration: ${serviceName}`);\n\n  (services as YAMLMap).add({key: serviceName, value: subqlNodeService});\n\n  // Save the updated Docker Compose file\n  fs.writeFileSync(dockerComposePath, dockerCompose.toString());\n  console.log(`Docker Compose file updated successfully at: ${dockerComposePath}`);\n}\n\nfunction isMultiChainProject(content: string): boolean {\n  return Array.isArray((loadFromJsonOrYaml(content) as MultichainProjectManifest).projects);\n}\n"]}