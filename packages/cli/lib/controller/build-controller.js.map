{"version":3,"file":"build-controller.js","sourceRoot":"","sources":["../../src/controller/build-controller.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;AAkEnC,gCA+BC;AAED,0CAqCC;;AAtID,4DAA4B;AAC5B,2BAAgC;AAChC,wDAAwB;AACxB,+BAA8B;AAC9B,0FAAiD;AACjD,iFAAkE;AAClE,8DAA+C;AAC/C,iDAAoC;AAEpC,MAAM,aAAa,GAAG,CACpB,YAAoC,EACpC,UAAkB,EAClB,SAAiB,EACjB,WAAqB,EACE,EAAE,CAAC,CAAC;IAC3B,MAAM,EAAE,MAAM;IACd,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,YAAY;IAChD,OAAO,EAAE,UAAU;IACnB,KAAK,EAAE,YAAY;IACnB,OAAO,EAAE,mBAAmB;IAC5B,YAAY,EAAE;QACZ,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE;YACT,IAAI,+BAAY,CAAC;gBACf,aAAa,EAAE;oBACb,SAAS,EAAE,IAAI;oBACf,MAAM,EAAE;wBACN,QAAQ,EAAE,IAAI;qBACf;iBACF;aACF,CAAC;SACH;KACF;IACD,MAAM,EAAE;QACN,KAAK,EAAE;YACL;gBACE,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,cAAc;gBACvB,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC;gBACpC,OAAO,EAAE;oBACP,eAAe,EAAE;wBACf,WAAW,EAAE,KAAK;qBACnB;iBACF;aACF;YACD;gBACE,IAAI,EAAE,UAAU;gBAChB,GAAG,EAAE,aAAa;aACnB;SACF;KACF;IAED,OAAO,EAAE;QACP,UAAU,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC;QAC3C,OAAO,EAAE,CAAC,IAAI,mDAAmB,EAAE,CAAC;KACrC;IAED,MAAM,EAAE;QACN,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE,WAAW;QACrB,aAAa,EAAE,UAAU;KAC1B;CACF,CAAC,CAAC;AAEI,KAAK,UAAU,UAAU,CAC9B,YAAoC,EACpC,UAAkB,EAClB,SAAiB,EACjB,KAAK,GAAG,KAAK,EACb,KAAK,GAAG,KAAK;IAEb,MAAM,MAAM,GAAG,IAAA,qBAAK,EAClB,aAAa,CAAC,YAAY,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,CAAC,EACzD,EAAC,MAAM,EAAE,EAAC,KAAK,EAAC,EAAC;IACjB,qDAAqD;KACtD,CAAC;IAEF,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACpC,IAAA,iBAAO,EAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YACnC,IAAI,KAAK,EAAE,CAAC;gBACV,MAAM,CAAC,KAAK,CAAC,CAAC;gBACd,OAAO;YACT,CAAC;YACD,IAAA,gBAAM,EAAC,KAAK,EAAE,4BAA4B,CAAC,CAAC;YAE5C,IAAI,KAAK,CAAC,SAAS,EAAE,EAAE,CAAC;gBACtB,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;gBAE5B,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,eAAe,CAAC,CAAC;gBACzE,OAAO;YACT,CAAC;YAED,OAAO,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,eAAe,CAAC,SAAiB;IAC/C,2HAA2H;IAC3H,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;IAC1D,IAAI,YAAY,GAA2B;QACzC,KAAK,EAAE,YAAY;KACpB,CAAC;IAEF,IAAA,eAAQ,EAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;QAC3E,MAAM,QAAQ,GAAG,cAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC5D,YAAY,CAAC,QAAQ,QAAQ,EAAE,CAAC,GAAG,QAAQ,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,IAAA,eAAQ,EAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,wBAAwB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;QAC5E,MAAM,QAAQ,GAAG,cAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC5D,YAAY,CAAC,SAAS,QAAQ,EAAE,CAAC,GAAG,QAAQ,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,mEAAmE;IACnE,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAA,iBAAY,EAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;IACxF,IAAI,KAAK,CAAC,OAAO,IAAI,OAAO,KAAK,CAAC,OAAO,KAAK,QAAQ,EAAE,CAAC;QACvD,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,OAAiC,CAAC,CAAC,MAAM,CAC3E,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YACpB,GAAG,CAAC,GAAG,CAAC,GAAG,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAC1C,OAAO,GAAG,CAAC;QACb,CAAC,EACD,EAAC,GAAG,YAAY,EAAC,CAClB,CAAC;IACJ,CAAC;IAED,KAAK,MAAM,CAAC,IAAI,YAAY,EAAE,CAAC;QAC7B,IAAI,OAAO,YAAY,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE,CAAC;YACxC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;YAChD,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC;IACH,CAAC;IAED,OAAO,YAAY,CAAC;AACtB,CAAC","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport assert from 'assert';\nimport {readFileSync} from 'fs';\nimport path from 'path';\nimport {globSync} from 'glob';\nimport TerserPlugin from 'terser-webpack-plugin';\nimport {TsconfigPathsPlugin} from 'tsconfig-paths-webpack-plugin';\nimport webpack, {Configuration} from 'webpack';\nimport {merge} from 'webpack-merge';\n\nconst getBaseConfig = (\n  buildEntries: Configuration['entry'],\n  projectDir: string,\n  outputDir: string,\n  development?: boolean\n): webpack.Configuration => ({\n  target: 'node',\n  mode: development ? 'development' : 'production',\n  context: projectDir,\n  entry: buildEntries,\n  devtool: 'inline-source-map',\n  optimization: {\n    minimize: true,\n    minimizer: [\n      new TerserPlugin({\n        terserOptions: {\n          sourceMap: true,\n          format: {\n            beautify: true,\n          },\n        },\n      }),\n    ],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        exclude: /node_modules/,\n        loader: require.resolve('ts-loader'),\n        options: {\n          compilerOptions: {\n            declaration: false,\n          },\n        },\n      },\n      {\n        test: /\\.ya?ml$/,\n        use: 'yaml-loader',\n      },\n    ],\n  },\n\n  resolve: {\n    extensions: ['.tsx', '.ts', '.js', '.json'],\n    plugins: [new TsconfigPathsPlugin()],\n  },\n\n  output: {\n    path: outputDir,\n    filename: '[name].js',\n    libraryTarget: 'commonjs',\n  },\n});\n\nexport async function runWebpack(\n  buildEntries: Configuration['entry'],\n  projectDir: string,\n  outputDir: string,\n  isDev = false,\n  clean = false\n): Promise<void> {\n  const config = merge(\n    getBaseConfig(buildEntries, projectDir, outputDir, isDev),\n    {output: {clean}}\n    // Can allow projects to override webpack config here\n  );\n\n  await new Promise((resolve, reject) => {\n    webpack(config).run((error, stats) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n      assert(stats, 'Webpack stats is undefined');\n\n      if (stats.hasErrors()) {\n        const info = stats.toJson();\n\n        reject(info.errors?.map((e) => e.message).join('\\n') ?? 'Unknown error');\n        return;\n      }\n\n      resolve(true);\n    });\n  });\n}\n\nexport function getBuildEntries(directory: string): Record<string, string> {\n  // FIXME: this is an assumption that the default entry is src/index.ts, in reality it should read from the project manifest\n  const defaultEntry = path.join(directory, 'src/index.ts');\n  let buildEntries: Record<string, string> = {\n    index: defaultEntry,\n  };\n\n  globSync(path.join(directory, 'src/test/**/*.test.ts')).forEach((testFile) => {\n    const testName = path.basename(testFile).replace('.ts', '');\n    buildEntries[`test/${testName}`] = testFile;\n  });\n\n  globSync(path.join(directory, 'src/tests/**/*.test.ts')).forEach((testFile) => {\n    const testName = path.basename(testFile).replace('.ts', '');\n    buildEntries[`tests/${testName}`] = testFile;\n  });\n\n  // Get the output location from the project package.json main field\n  const pjson = JSON.parse(readFileSync(path.join(directory, 'package.json')).toString());\n  if (pjson.exports && typeof pjson.exports !== 'string') {\n    buildEntries = Object.entries(pjson.exports as Record<string, string>).reduce(\n      (acc, [key, value]) => {\n        acc[key] = path.resolve(directory, value);\n        return acc;\n      },\n      {...buildEntries}\n    );\n  }\n\n  for (const i in buildEntries) {\n    if (typeof buildEntries[i] !== 'string') {\n      console.warn(`Ignoring entry ${i} from build.`);\n      delete buildEntries[i];\n    }\n  }\n\n  return buildEntries;\n}\n"]}