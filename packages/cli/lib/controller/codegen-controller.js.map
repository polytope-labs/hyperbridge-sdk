{"version":3,"file":"codegen-controller.js","sourceRoot":"","sources":["../../src/controller/codegen-controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport assert from 'assert';\nimport path from 'path';\nimport {\n  DEFAULT_MANIFEST,\n  getManifestPath,\n  getProjectNetwork,\n  getSchemaPath,\n  loadFromJsonOrYaml,\n  NETWORK_FAMILY,\n} from '@subql/common';\nimport type {SubstrateCustomDatasource} from '@subql/types';\nimport {BaseDataSource, BaseTemplateDataSource, ProjectManifestV1_0_0, TemplateBase} from '@subql/types-core';\nimport {CosmosRuntimeDatasource} from '@subql/types-cosmos/dist/project';\nimport type {\n  SubqlCustomDatasource as EthereumCustomDs,\n  SubqlDatasource,\n  SubqlRuntimeDatasource as EthereumDs,\n} from '@subql/types-ethereum';\nimport {\n  getAllEntitiesRelations,\n  getAllEnums,\n  getAllJsonObjects,\n  getTypeByScalarName,\n  GraphQLEntityField,\n  GraphQLEntityIndex,\n  GraphQLJsonFieldType,\n  setJsonObjectType,\n} from '@subql/utils';\nimport {uniq, uniqBy, upperFirst} from 'lodash';\nimport {loadDependency} from '../modulars';\nimport {prepareDirPath, renderTemplate} from '../utils';\n\nexport type TemplateKind = BaseTemplateDataSource;\n\nexport type DatasourceKind = SubstrateCustomDatasource | EthereumDs | EthereumCustomDs;\n\nconst MODEL_TEMPLATE_PATH = path.resolve(__dirname, '../template/model.ts.ejs');\nconst MODELS_INDEX_TEMPLATE_PATH = path.resolve(__dirname, '../template/models-index.ts.ejs');\nconst TYPES_INDEX_TEMPLATE_PATH = path.resolve(__dirname, '../template/types-index.ts.ejs');\nconst INTERFACE_TEMPLATE_PATH = path.resolve(__dirname, '../template/interface.ts.ejs');\nconst ENUM_TEMPLATE_PATH = path.resolve(__dirname, '../template/enum.ts.ejs');\nconst DYNAMIC_DATASOURCE_TEMPLATE_PATH = path.resolve(__dirname, '../template/datasource-templates.ts.ejs');\nconst TYPE_ROOT_DIR = 'src/types';\nconst MODEL_ROOT_DIR = 'src/types/models';\nconst RESERVED_KEYS = ['filter', 'filters'];\n\nconst exportTypes = {\n  models: false,\n  interfaces: false,\n  enums: false,\n  datasources: false,\n};\n\n// 3. Re-format the field of the entity\nexport interface ProcessedField {\n  name: string;\n  type: string;\n  required: boolean;\n  isEnum: boolean;\n  indexed: boolean;\n  unique?: boolean;\n  isArray: boolean;\n  isJsonInterface: boolean;\n}\n\nexport async function generateJsonInterfaces(projectPath: string, schema: string): Promise<void> {\n  const typesDir = path.join(projectPath, TYPE_ROOT_DIR);\n  const jsonObjects = getAllJsonObjects(schema);\n  const jsonInterfaces = jsonObjects.map((r) => {\n    const object = setJsonObjectType(r, jsonObjects);\n    const fields = processFields('jsonField', object.name, object.fields);\n    return {\n      interfaceName: object.name,\n      fields,\n    };\n  });\n\n  if (jsonInterfaces.length !== 0) {\n    const interfaceTemplate = {\n      props: {\n        jsonInterfaces,\n      },\n      helper: {\n        upperFirst,\n      },\n    };\n    try {\n      await renderTemplate(INTERFACE_TEMPLATE_PATH, path.join(typesDir, `interfaces.ts`), interfaceTemplate);\n      exportTypes.interfaces = true;\n    } catch (e) {\n      throw new Error(`Codegen failed for json interface.`, {cause: e});\n    }\n  }\n}\n\nexport async function generateEnums(projectPath: string, schema: string): Promise<void> {\n  const typesDir = path.join(projectPath, TYPE_ROOT_DIR);\n  const jsonObjects = getAllEnums(schema);\n  const enums = jsonObjects.map((r) => {\n    return {\n      name: r.name,\n      values: r.getValues().map((v) => v.name),\n    };\n  });\n\n  if (enums.length !== 0) {\n    const enumsTemplate = {\n      props: {\n        enums,\n      },\n    };\n    try {\n      await renderTemplate(ENUM_TEMPLATE_PATH, path.join(typesDir, `enums.ts`), enumsTemplate);\n      exportTypes.enums = true;\n    } catch (e) {\n      throw new Error(`Codegen failed for enums.`, {cause: e});\n    }\n  }\n}\n\nexport function processFields(\n  type: 'entity' | 'jsonField',\n  className: string,\n  fields: (GraphQLEntityField | GraphQLJsonFieldType)[],\n  indexFields: GraphQLEntityIndex[] = []\n): ProcessedField[] {\n  const fieldList: ProcessedField[] = [];\n  for (const field of fields) {\n    const injectField = {\n      name: field.name,\n      required: !field.nullable,\n      isArray: field.isArray,\n      isEnum: false,\n    } as ProcessedField;\n    if (type === 'entity') {\n      const [indexed, unique] = indexFields.reduce<[boolean, boolean | undefined]>(\n        (acc, indexField) => {\n          if (indexField.fields.includes(field.name) && indexField.fields.length <= 1) {\n            acc[0] = true;\n            if (indexField.fields.length === 1 && indexField.unique) {\n              acc[1] = true;\n            } else if (indexField.unique === undefined) {\n              acc[1] = false;\n            }\n          }\n          return acc;\n        },\n        [false, undefined]\n      );\n      injectField.indexed = indexed;\n      injectField.unique = unique;\n    }\n    if ((field as GraphQLEntityField).isEnum) {\n      injectField.type = field.type;\n      injectField.isEnum = true;\n      injectField.isJsonInterface = false;\n    } else {\n      switch (field.type) {\n        default: {\n          const typeClass = getTypeByScalarName(field.type);\n\n          assert(\n            typeClass && typeClass.tsType,\n            `Schema: undefined type \"${field.type.toString()}\" on field \"${field.name}\" in \"type ${className} @${type}\"`\n          );\n          injectField.type = typeClass.tsType;\n          injectField.isJsonInterface = false;\n          break;\n        }\n        case 'Json': {\n          if (field.jsonInterface === undefined) {\n            throw new Error(`On field ${field.name} type is Json but json interface is not defined`);\n          }\n          injectField.type = upperFirst(field.jsonInterface.name);\n          injectField.isJsonInterface = true;\n        }\n      }\n    }\n    fieldList.push(injectField);\n  }\n  return fieldList;\n}\n\n//1. Prepare models directory and load schema\nexport async function codegen(projectPath: string, fileNames: string[] = [DEFAULT_MANIFEST]): Promise<void> {\n  const modelDir = path.join(projectPath, MODEL_ROOT_DIR);\n  const interfacesPath = path.join(projectPath, TYPE_ROOT_DIR, `interfaces.ts`);\n  await prepareDirPath(modelDir, true);\n  await prepareDirPath(interfacesPath, false);\n  const plainManifests = fileNames.map((fileName) => {\n    const project = loadFromJsonOrYaml(getManifestPath(projectPath, fileName)) as ProjectManifestV1_0_0 & {\n      networkFamily: NETWORK_FAMILY;\n    };\n    project.networkFamily = getProjectNetwork(project);\n    return project;\n  });\n\n  const expectKeys = ['datasources', 'templates'];\n\n  const customDatasources = plainManifests.flatMap((plainManifest) => {\n    return Object.keys(plainManifest)\n      .filter((key) => !expectKeys.includes(key))\n      .map((dsKey) => {\n        const value = (plainManifest as any)[dsKey];\n        if (typeof value === 'object' && value) {\n          return !!Object.keys(value).find((d) => d === 'assets') && value;\n        }\n      })\n      .filter(Boolean);\n  });\n\n  const schema = getSchemaPath(projectPath, fileNames[0]);\n  await generateSchemaModels(projectPath, schema);\n\n  let datasources = plainManifests.reduce((prev, current) => {\n    return prev.concat(current.dataSources);\n  }, [] as BaseDataSource[]);\n\n  const templates = plainManifests.reduce((prev, current) => {\n    if (current.templates && current.templates.length !== 0) {\n      return prev.concat(current.templates);\n    }\n    return prev;\n  }, [] as TemplateKind[]);\n\n  if (templates.length !== 0) {\n    await generateDatasourceTemplates(projectPath, templates);\n    datasources = datasources.concat(templates as DatasourceKind[]);\n  }\n\n  if (customDatasources.length !== 0) {\n    datasources = datasources.concat(customDatasources);\n  }\n\n  const cosmosManifests = plainManifests.filter((m) => m.networkFamily === NETWORK_FAMILY.cosmos);\n  if (cosmosManifests.length > 0) {\n    const cosmosModule = loadDependency(NETWORK_FAMILY.cosmos);\n    await cosmosModule.projectCodegen(\n      plainManifests,\n      projectPath,\n      prepareDirPath,\n      renderTemplate,\n      upperFirst,\n      datasources as CosmosRuntimeDatasource[]\n    );\n  }\n  // TODO what about custom datasource processors, e.g. FrontierEvmProcessor, EthermintProcessor\n  const ethManifests = plainManifests.filter((m) => m.networkFamily === NETWORK_FAMILY.ethereum);\n\n  // Todo, starknet codegen not supported yet\n  const starknetManifests = plainManifests.filter((m) => m.networkFamily === NETWORK_FAMILY.starknet);\n\n  // as we determine it is eth network, ds type should SubqlDatasource\n  if (ethManifests.length > 0 || (!starknetManifests && !!datasources.find((d) => (d as SubqlDatasource)?.assets))) {\n    const ethModule = loadDependency(NETWORK_FAMILY.ethereum);\n\n    await ethModule.generateAbis(datasources as EthereumDs[], projectPath, prepareDirPath, upperFirst, renderTemplate);\n  }\n\n  if (exportTypes.interfaces || exportTypes.models || exportTypes.enums || exportTypes.datasources) {\n    try {\n      await renderTemplate(TYPES_INDEX_TEMPLATE_PATH, path.join(projectPath, TYPE_ROOT_DIR, `index.ts`), {\n        props: {\n          exportTypes,\n        },\n      });\n    } catch (e) {\n      throw new Error(`Codegen failed for indexes.`, {cause: e});\n    }\n    console.log(`* Types index generated !`);\n  }\n}\n\nexport async function generateSchemaModels(projectPath: string, schemaPath: string): Promise<void> {\n  const modelDir = path.join(projectPath, MODEL_ROOT_DIR);\n  const interfacesPath = path.join(projectPath, TYPE_ROOT_DIR, `interfaces.ts`);\n  await prepareDirPath(modelDir, true);\n  await prepareDirPath(interfacesPath, false);\n\n  await generateJsonInterfaces(projectPath, schemaPath);\n  await generateModels(projectPath, schemaPath);\n  await generateEnums(projectPath, schemaPath);\n}\n\nexport function validateEntityName(name: string): string {\n  for (const reservedKey of RESERVED_KEYS) {\n    if (name.toLowerCase().endsWith(reservedKey.toLowerCase())) {\n      throw new Error(`EntityName: ${name} cannot end with reservedKey: ${reservedKey}`);\n    }\n  }\n  return name;\n}\n// 2. Loop all entities and render it\nexport async function generateModels(projectPath: string, schema: string): Promise<void> {\n  const extractEntities = getAllEntitiesRelations(schema);\n  for (const entity of extractEntities.models) {\n    const baseFolderPath = '.../../base';\n    const className = upperFirst(entity.name);\n\n    const entityName = validateEntityName(entity.name);\n\n    const fields = processFields('entity', className, entity.fields, entity.indexes);\n    const idType = fields.find((f) => f.name === 'id')?.type ?? 'string';\n    const importJsonInterfaces = uniq(fields.filter((field) => field.isJsonInterface).map((f) => f.type));\n    const importEnums = uniq(fields.filter((field) => field.isEnum).map((f) => f.type));\n    const indexedFields = fields.filter((field) => field.indexed && !field.isJsonInterface);\n    const modelTemplate = {\n      props: {\n        baseFolderPath,\n        className,\n        entityName,\n        fields,\n        importJsonInterfaces,\n        importEnums,\n        indexedFields,\n        idType,\n      },\n      helper: {\n        upperFirst,\n      },\n    };\n    try {\n      await renderTemplate(\n        MODEL_TEMPLATE_PATH,\n        path.join(projectPath, MODEL_ROOT_DIR, `${className}.ts`),\n        modelTemplate\n      );\n    } catch (e) {\n      console.error(e);\n      throw new Error(`Codegen failed for entity ${className}.`, {cause: e});\n    }\n    console.log(`* Schema ${className} generated !`);\n  }\n  const classNames = extractEntities.models.map((entity) => upperFirst(entity.name));\n  if (classNames.length !== 0) {\n    try {\n      await renderTemplate(MODELS_INDEX_TEMPLATE_PATH, path.join(projectPath, MODEL_ROOT_DIR, `index.ts`), {\n        props: {\n          classNames,\n        },\n        helper: {\n          upperFirst,\n        },\n      });\n      exportTypes.models = true;\n    } catch (e) {\n      throw new Error(`Failed to codgen for model indexes.`, {cause: e});\n    }\n    console.log(`* Models index generated !`);\n  }\n}\n\nexport async function generateDatasourceTemplates(projectPath: string, templates: TemplateKind[]): Promise<void> {\n  const props = templates.map((t) => ({\n    name: (t as TemplateBase).name,\n    args: 'Record<string, unknown>',\n  }));\n\n  const propsWithoutDuplicates = uniqBy(props, (prop) => `${prop.name}-${prop.args}`);\n\n  try {\n    await renderTemplate(DYNAMIC_DATASOURCE_TEMPLATE_PATH, path.join(projectPath, TYPE_ROOT_DIR, `datasources.ts`), {\n      props: propsWithoutDuplicates,\n    });\n    exportTypes.datasources = true;\n  } catch (e) {\n    console.error(e);\n    throw new Error(`Unable to generate datasource template constructors`);\n  }\n  console.log(`* Datasource template constructors generated !`);\n}\n"]}