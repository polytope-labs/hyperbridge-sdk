{"version":3,"file":"codegen-controller.test.js","sourceRoot":"","sources":["../../src/controller/codegen-controller.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {rimraf} from 'rimraf';\nimport {codegen} from './codegen-controller';\n\njest.setTimeout(30000);\n\nconst projectPath = path.join(__dirname, '../../test/schemaTest');\n\ndescribe('Codegen can generate schema', () => {\n  afterEach(async () => {\n    await rimraf(path.join(__dirname, '../../test/schemaTest/src'));\n  });\n\n  it('codegen with correct schema should pass', async () => {\n    await expect(codegen(projectPath)).resolves.not.toThrow();\n  });\n\n  it('codegen with incorrect schema field should fail', async () => {\n    await expect(codegen(projectPath, ['project-bad-schema.yaml'])).rejects.toThrow(/is not a valid type/);\n  });\n\n  it('codegen with entities that uses reserved names should throw', async () => {\n    await expect(codegen(projectPath, ['project-bad-entity.yaml'])).rejects.toThrow(\n      'EntityName: exampleEntityFilter cannot end with reservedKey: filter'\n    );\n  });\n\n  it('Codegen should be able to generate ABIs from template datasources', async () => {\n    await codegen(projectPath, ['project-templates-abi.yaml']);\n    await expect(\n      fs.promises.readFile(`${projectPath}/src/types/abi-interfaces/Erc721.ts`, 'utf8')\n    ).resolves.toBeTruthy();\n  });\n\n  it('Should not fail, if ds does not have any assets', async () => {\n    await expect(codegen(projectPath, ['project-no-assets.yaml'])).resolves.not.toThrow();\n  });\n\n  it('Codegen should be able to generate ABIs from customName datasources', async () => {\n    await codegen(projectPath);\n    await expect(\n      fs.promises.readFile(`${projectPath}/src/types/abi-interfaces/Erc721.ts`, 'utf8')\n    ).resolves.toBeTruthy();\n  });\n\n  it('Should clean out existing types directory', async () => {\n    await codegen(projectPath);\n    await codegen(projectPath, ['project-no-abi.yaml']);\n\n    // should not contain abi directory\n    await expect(fs.promises.readFile(`${projectPath}/src/types/abi-interfaces/erc721.ts`, 'utf8')).rejects.toThrow();\n  });\n\n  it('should generate contracts on different glob paths', async () => {\n    await codegen(projectPath, ['typechain-test.yaml']);\n\n    await expect(\n      fs.promises.readFile(`${projectPath}/src/types/abi-interfaces/Erc721.ts`, 'utf8')\n    ).resolves.toBeTruthy();\n    await expect(\n      fs.promises.readFile(`${projectPath}/src/types/abi-interfaces/Artifact.ts`, 'utf8')\n    ).resolves.toBeTruthy();\n\n    await expect(fs.promises.readFile(`${projectPath}/src/types/contracts/Erc721.ts`, 'utf8')).resolves.toBeTruthy();\n    await expect(\n      fs.promises.readFile(`${projectPath}/src/types/abi-interfaces/Artifact.ts`, 'utf8')\n    ).resolves.toBeTruthy();\n  });\n\n  it('Should not generate ABI for non evm ds', async () => {\n    await codegen(projectPath, ['non-evm-project.yaml']);\n    expect(fs.existsSync(`${projectPath}/src/types/abi-interfaces/`)).toBeFalsy();\n  });\n\n  it('Should not generate proto-interfaces if no chaintypes are provided', async () => {\n    await codegen(projectPath, ['project-cosmos.yaml']);\n    expect(fs.existsSync(`${projectPath}/src/types/proto-interfaces/`)).toBeFalsy();\n  });\n\n  it('Should dedupe enums', async () => {\n    await codegen(projectPath, ['project-duplicate-enum.yaml']);\n\n    const fooFile = await fs.promises.readFile(`${projectPath}/src/types/models/Foo.ts`, 'utf8');\n\n    expect(fooFile).toContain(\n      `import {\n    Bar,\n} from '../enums';`\n    );\n  });\n\n  // github issue #2211\n  it('codegen file should import model files with correct case-sensitive names', async () => {\n    await codegen(projectPath, ['project-case-sensitive-import-entity.yaml']);\n\n    const codegenFile = await fs.promises.readFile(`${projectPath}/src/types/models/index.ts`, 'utf8');\n\n    expect(codegenFile).toContain(`export {ExampleField} from \"./ExampleField\"`);\n  });\n\n  it('correctly generates relations with different dbTypes', async () => {\n    const projectPath = path.join(__dirname, '../../test/schemaTest');\n    await codegen(projectPath, ['project-id-type.yaml']);\n\n    const blockEntity = await fs.promises.readFile(`${projectPath}/src/types/models/Block.ts`, 'utf8');\n\n    expect(blockEntity).toContain('        metaId: bigint,');\n    expect(blockEntity).toContain('public metaId: bigint;');\n    expect(blockEntity).toContain(\n      'static async getByMetaId(metaId: bigint, options: GetOptions<CompatBlockProps>): Promise<Block[]> {'\n    );\n  });\n});\n"]}