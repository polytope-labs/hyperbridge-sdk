{"version":3,"file":"codegen-cosmos.test.js","sourceRoot":"","sources":["../../src/controller/codegen-cosmos.test.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;;AAEnC,oDAAoB;AACpB,wDAAwB;AACxB,0CAAiD;AACjD,wDAAoD;AAGpD,mCAAkC;AAClC,mCAA8B;AAC9B,oCAAwD;AAExD,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAAC;AACnE,MAAM,eAAe,GAAQ;IAC3B,sBAAsB,EAAE;QACtB,IAAI,EAAE,uCAAuC;QAC7C,QAAQ,EAAE,CAAC,sBAAsB,CAAC;KACnC;IACD,6BAA6B,EAAE;QAC7B,IAAI,EAAE,sDAAsD;QAC5D,QAAQ,EAAE,CAAC,mBAAmB,CAAC;KAChC;CACF,CAAC;AAEF,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAEvB,QAAQ,CAAC,6CAA6C,EAAE,GAAG,EAAE;IAC3D,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,IAAA,eAAM,EAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,2BAA2B,CAAC,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,IAAA,2BAAkB,EAAC,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,cAAc,CAAC,CAI1E,CAAC;IAEF,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,qBAAqB,GACzB,EAAE;YACF;;;;;;;;;;;;;CAaL,CAAC;QAEE,QAAQ,CAAC,OAAO,CAAC,UAAU,GAAG,eAAe,CAAC;QAC9C,MAAM,IAAA,8BAAc,EAAC,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,sBAAc,EAAE,sBAAc,EAAE,mBAAU,EAAE,EAAE,CAAC,CAAC;QAC/F,MAAM,aAAa,GAAG,MAAM,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,kCAAkC,CAAC,CAAC,CAAC;QAC9G,MAAM,CAAC,YAAE,CAAC,UAAU,CAAC,GAAG,YAAY,kCAAkC,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QACtF,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;QAC3D,MAAM,YAAY,GAAG;YACnB,sBAAsB,EAAE;gBACtB,IAAI,EAAE,8CAA8C;gBACpD,QAAQ,EAAE,CAAC,sBAAsB,CAAC;aACnC;SACF,CAAC;QACF,QAAQ,CAAC,OAAO,CAAC,UAAU,GAAG,YAAY,CAAC;QAC3C,MAAM,MAAM,CAAC,GAAG,EAAE,CAChB,IAAA,8BAAc,EAAC,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,sBAAc,EAAE,sBAAc,EAAE,mBAAU,EAAE,EAAE,CAAC,CACzF,CAAC,OAAO,CAAC,OAAO,CACf,4IAA4I,CAC7I,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {loadFromJsonOrYaml} from '@subql/common';\nimport {projectCodegen} from '@subql/common-cosmos';\nimport {ProjectManifestV1_0_0} from '@subql/types-core';\nimport type {CosmosDatasource, CustomDatasourceTemplate, RuntimeDatasourceTemplate} from '@subql/types-cosmos';\nimport {upperFirst} from 'lodash';\nimport {rimraf} from 'rimraf';\nimport {prepareDirPath, renderTemplate} from '../utils';\n\nconst PROJECT_PATH = path.join(__dirname, '../../test/protoTest1');\nconst MOCK_CHAINTYPES: any = {\n  'osmosis.gamm.v1beta1': {\n    file: './proto/osmosis/gamm/v1beta1/tx.proto',\n    messages: ['MsgSwapExactAmountIn'],\n  },\n  'osmosis.poolmanager.v1beta1': {\n    file: './proto/osmosis/poolmanager/v1beta1/swap_route.proto',\n    messages: ['SwapAmountInRoute'],\n  },\n};\n\njest.setTimeout(30000);\n\ndescribe('Able to generate cosmos types from protobuf', () => {\n  afterEach(async () => {\n    await rimraf(path.join(__dirname, '../../test/protoTest1/src'));\n  });\n\n  const manifest = loadFromJsonOrYaml(path.join(PROJECT_PATH, 'project.yaml')) as ProjectManifestV1_0_0<\n    CosmosDatasource,\n    RuntimeDatasourceTemplate | CustomDatasourceTemplate,\n    any\n  >;\n\n  it('Able to generate ts types from protobufs', async () => {\n    const expectedGeneratedCode =\n      '' +\n      `// SPDX-License-Identifier: Apache-2.0\n\n// Auto-generated , DO NOT EDIT\nimport {CosmosMessage} from \"@subql/types-cosmos\";\n\nimport * as OsmosisGammV1beta1Tx from \"./proto-interfaces/osmosis/gamm/v1beta1/tx\";\n\n\nexport namespace osmosis.gamm.v1beta1.tx {\n\n  export type MsgSwapExactAmountInMessage = CosmosMessage<OsmosisGammV1beta1Tx.MsgSwapExactAmountIn>;\n}\n\n`;\n\n    manifest.network.chaintypes = MOCK_CHAINTYPES;\n    await projectCodegen([manifest], PROJECT_PATH, prepareDirPath, renderTemplate, upperFirst, []);\n    const codegenResult = await fs.promises.readFile(path.join(PROJECT_PATH, '/src/types/CosmosMessageTypes.ts'));\n    expect(fs.existsSync(`${PROJECT_PATH}/src/types/CosmosMessageTypes.ts`)).toBeTruthy();\n    expect(codegenResult.toString()).toBe(expectedGeneratedCode);\n  });\n\n  it('On missing protobuf dependency should throw', async () => {\n    const badChainType = {\n      'osmosis.gamm.v1beta1': {\n        file: './proto/cosmos/osmosis/gamm/v1beta1/tx.proto',\n        messages: ['MsgSwapExactAmountIn'],\n      },\n    };\n    manifest.network.chaintypes = badChainType;\n    await expect(() =>\n      projectCodegen([manifest], PROJECT_PATH, prepareDirPath, renderTemplate, upperFirst, [])\n    ).rejects.toThrow(\n      'Failed to generate from protobufs. Error: chainType osmosis.gamm.v1beta1, file ./proto/cosmos/osmosis/gamm/v1beta1/tx.proto does not exist'\n    );\n  });\n});\n"]}