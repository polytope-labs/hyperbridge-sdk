import { OptionFlag } from '@oclif/core/lib/interfaces/parser';
import { DeploymentDataType, ProjectDataType, QueryAdvancedOpts, V3DeploymentIndexerType, ValidateDataType, ProjectDeploymentInterface, GenerateDeploymentChainInterface, DeploymentFlagsInterface, MultichainDataFieldType, DeploymentType } from '../types';
export declare function createDeployment(org: string, projectName: string, authToken: string, ipfsCID: string, queryImageVersion: string, type: DeploymentType, query: QueryAdvancedOpts, chains: V3DeploymentIndexerType[], url: string): Promise<DeploymentDataType>;
export declare function promoteDeployment(org: string, projectName: string, authToken: string, deploymentId: number, url: string): Promise<string>;
export declare function deleteDeployment(org: string, projectName: string, authToken: string, deploymentId: number, url: string): Promise<string>;
export declare function deploymentStatus(org: string, projectName: string, authToken: string, deployID: number, url: string): Promise<string>;
export declare function projectsInfo(authToken: string, org: string, projectName: string, url: string, type: string): Promise<ProjectDataType | undefined>;
export declare function updateDeployment(org: string, projectName: string, deployID: number, authToken: string, ipfsCID: string, queryVersion: string, query: QueryAdvancedOpts, chains: V3DeploymentIndexerType[], url: string): Promise<void>;
export declare function ipfsCID_validate(cid: string | undefined, authToken: string, url: string): Promise<ValidateDataType>;
export declare function imageVersions(name: string, version: string, authToken: string, url: string): Promise<string[]>;
export declare function splitEndpoints(endpointStr: string): string[];
export interface EndpointType {
    network: string;
    endpoint: string;
    chainId: string;
}
export declare function splitMultichainDataFields(fieldStr?: string): MultichainDataFieldType;
export declare const DefaultDeployFlags: {
    org: OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
    projectName: OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
    type: OptionFlag<DeploymentType>;
    indexerVersion: OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
    queryVersion: OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
    dict: OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
    endpoint: OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
    indexerUnsafe: import("@oclif/core/lib/interfaces/parser").BooleanFlag<boolean>;
    indexerBatchSize: OptionFlag<number | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
    indexerSubscription: import("@oclif/core/lib/interfaces/parser").BooleanFlag<boolean>;
    disableHistorical: import("@oclif/core/lib/interfaces/parser").BooleanFlag<boolean>;
    indexerUnfinalized: import("@oclif/core/lib/interfaces/parser").BooleanFlag<boolean>;
    indexerStoreCacheThreshold: OptionFlag<number | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
    disableIndexerStoreCacheAsync: import("@oclif/core/lib/interfaces/parser").BooleanFlag<boolean>;
    indexerWorkers: OptionFlag<number | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
    queryUnsafe: import("@oclif/core/lib/interfaces/parser").BooleanFlag<boolean>;
    querySubscription: import("@oclif/core/lib/interfaces/parser").BooleanFlag<boolean>;
    queryTimeout: OptionFlag<number | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
    queryMaxConnection: OptionFlag<number | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
    queryAggregate: import("@oclif/core/lib/interfaces/parser").BooleanFlag<boolean>;
    queryLimit: OptionFlag<number | undefined, import("@oclif/core/lib/interfaces/parser").CustomOptions>;
    useDefaults: import("@oclif/core/lib/interfaces/parser").BooleanFlag<boolean>;
};
export declare function generateDeploymentChain(row: GenerateDeploymentChainInterface): V3DeploymentIndexerType;
export declare function generateAdvancedQueryOptions(flags: DeploymentFlagsInterface): QueryAdvancedOpts;
export declare function executeProjectDeployment(data: ProjectDeploymentInterface): Promise<DeploymentDataType | void>;
