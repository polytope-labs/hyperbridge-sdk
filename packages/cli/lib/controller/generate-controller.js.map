{"version":3,"file":"generate-controller.js","sourceRoot":"","sources":["../../src/controller/generate-controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport type {ConstructorFragment, EventFragment, Fragment, FunctionFragment} from '@ethersproject/abi';\nimport {checkbox} from '@inquirer/prompts';\nimport {NETWORK_FAMILY} from '@subql/common';\nimport type {\n  EthereumDatasourceKind,\n  EthereumHandlerKind,\n  EthereumLogFilter,\n  EthereumTransactionFilter,\n  SubqlRuntimeDatasource as EthereumDs,\n  SubqlRuntimeHandler,\n} from '@subql/types-ethereum';\nimport chalk from 'chalk';\nimport {difference, pickBy, upperFirst} from 'lodash';\nimport {Document, parseDocument, YAMLSeq} from 'yaml';\nimport {SelectedMethod, UserInput} from '../commands/codegen/generate';\nimport {ADDRESS_REG, FUNCTION_REG, TOPICS_REG} from '../constants';\nimport {loadDependency} from '../modulars';\nimport {\n  extractFromTs,\n  renderTemplate,\n  replaceArrayValueInTsManifest,\n  resolveToAbsolutePath,\n  splitArrayString,\n} from '../utils';\n\ninterface HandlerPropType {\n  name: string;\n  argName: string;\n  argType: string;\n}\n\ninterface AbiPropType {\n  name: string;\n  handlers: HandlerPropType[];\n}\n\nconst SCAFFOLD_HANDLER_TEMPLATE_PATH = path.resolve(__dirname, '../template/scaffold-handlers.ts.ejs');\nexport const ROOT_MAPPING_DIR = 'src/mappings';\nexport const DEFAULT_HANDLER_BUILD_PATH = './dist/index.js';\nexport const DEFAULT_ABI_DIR = '/abis';\n\nexport function removeKeyword(inputString: string): string {\n  return inputString.replace(/^(event|function) /, '');\n}\n\nexport async function prepareAbiDirectory(abiPath: string, rootPath: string): Promise<void> {\n  const abiDirPath = path.join(rootPath, DEFAULT_ABI_DIR);\n\n  if (!fs.existsSync(abiDirPath)) {\n    await fs.promises.mkdir(abiDirPath, {recursive: true});\n  }\n\n  if (fs.existsSync(path.join(abiDirPath, abiPath))) {\n    return;\n  }\n\n  // Ensure abiPath is an absolute path\n  const ensuredAbiPath = resolveToAbsolutePath(abiPath);\n\n  try {\n    const abiFileContent = await fs.promises.readFile(ensuredAbiPath, 'utf8');\n    await fs.promises.writeFile(path.join(abiDirPath, path.basename(ensuredAbiPath)), abiFileContent);\n  } catch (e: any) {\n    if (e.code === 'ENOENT') {\n      throw new Error(`Unable to find abi at: ${abiPath}`);\n    }\n  }\n}\n\nexport function constructMethod<T extends ConstructorFragment | Fragment>(\n  cleanedFragment: Record<string, T>\n): SelectedMethod[] {\n  return Object.keys(cleanedFragment).map((f) => {\n    return {\n      name: cleanedFragment[f].name,\n      method: f,\n    };\n  });\n}\n\nexport async function promptSelectables<T extends ConstructorFragment | Fragment>(\n  method: 'event' | 'function',\n  availableMethods: Record<string, T>\n): Promise<Record<string, T>> {\n  const selectedMethods: Record<string, T> = {};\n  const choseArray = await checkbox<string>({\n    message: `Select ${method}`,\n    choices: Object.keys(availableMethods).map((key) => ({value: key})),\n  });\n  choseArray.forEach((choice: string) => {\n    selectedMethods[choice] = availableMethods[choice];\n  });\n\n  return selectedMethods;\n}\n\nexport function filterObjectsByStateMutability(\n  obj: Record<string, FunctionFragment>\n): Record<string, FunctionFragment> {\n  return pickBy(obj, (e) => e.stateMutability !== 'view');\n}\n\nexport function getFragmentFormats<T extends ConstructorFragment | Fragment>(fragment: T): {full: string; min: string} {\n  return {\n    full: removeKeyword(fragment.format('full')),\n    min: removeKeyword(fragment.format('minimal')),\n  };\n}\n\nexport function generateHandlerName(name: string, abiName: string, type: 'tx' | 'log'): string {\n  return `handle${upperFirst(name)}${upperFirst(abiName)}${upperFirst(type)}`;\n}\n\nfunction generateFormattedHandlers(\n  userInput: UserInput,\n  abiName: string,\n  kindModifier: (kind: string) => EthereumHandlerKind | string\n): SubqlRuntimeHandler[] {\n  const formattedHandlers: SubqlRuntimeHandler[] = [];\n\n  userInput.functions.forEach((fn) => {\n    const handler: SubqlRuntimeHandler = {\n      handler: generateHandlerName(fn.name, abiName, 'tx'),\n      kind: kindModifier('EthereumHandlerKind.Call') as any, // union type\n      filter: {\n        function: fn.method,\n      },\n    };\n    formattedHandlers.push(handler);\n  });\n\n  userInput.events.forEach((event) => {\n    const handler: SubqlRuntimeHandler = {\n      handler: generateHandlerName(event.name, abiName, 'log'),\n      kind: kindModifier('EthereumHandlerKind.Event') as any, // Should be union type\n      filter: {\n        topics: [event.method],\n      },\n    };\n    formattedHandlers.push(handler);\n  });\n\n  return formattedHandlers;\n}\n\nexport function constructDatasourcesTs(userInput: UserInput): string {\n  const ethModule = loadDependency(NETWORK_FAMILY.ethereum);\n  const abiName = ethModule.parseContractPath(userInput.abiPath).name;\n  const formattedHandlers = generateFormattedHandlers(userInput, abiName, (kind) => kind);\n  const handlersString = tsStringify(formattedHandlers);\n\n  return `{\n    kind: EthereumDatasourceKind.Runtime,\n    startBlock: ${userInput.startBlock},\n    options: {\n      abi: '${abiName}',\n      ${userInput.address && `address: '${userInput.address}',`}\n    },\n    assets: new Map([['${abiName}', {file: '${userInput.abiPath}'}]]),\n    mapping: {\n      file: '${DEFAULT_HANDLER_BUILD_PATH}',\n      handlers: ${handlersString}\n    }\n  }`;\n}\n\nexport function constructDatasourcesYaml(userInput: UserInput): EthereumDs {\n  const ethModule = loadDependency(NETWORK_FAMILY.ethereum);\n  const abiName = ethModule.parseContractPath(userInput.abiPath).name;\n  const formattedHandlers = generateFormattedHandlers(userInput, abiName, (kind) => {\n    if (kind === 'EthereumHandlerKind.Call') return 'ethereum/TransactionHandler' as EthereumHandlerKind.Call;\n    return 'ethereum/LogHandler' as EthereumHandlerKind.Event;\n  });\n  const assets = new Map([[abiName, {file: userInput.abiPath}]]);\n\n  return {\n    kind: 'ethereum/Runtime' as EthereumDatasourceKind.Runtime,\n    startBlock: userInput.startBlock,\n    options: {\n      abi: abiName,\n      ...(userInput.address && {address: userInput.address}),\n    },\n    assets: assets,\n    mapping: {\n      file: DEFAULT_HANDLER_BUILD_PATH,\n      handlers: formattedHandlers,\n    },\n  };\n}\n\n// Selected fragments\nexport async function prepareInputFragments<T extends ConstructorFragment | Fragment>(\n  type: 'event' | 'function',\n  rawInput: string | undefined,\n  availableFragments: Record<string, T>,\n  abiName: string\n): Promise<Record<string, T>> {\n  if (!rawInput) {\n    return promptSelectables<T>(type, availableFragments);\n  }\n\n  if (rawInput === '*') {\n    return availableFragments;\n  }\n\n  const selectedFragments: Record<string, T> = {};\n  rawInput.split(',').forEach((input) => {\n    const casedInput = input.trim().toLowerCase();\n    const matchFragment = Object.entries(availableFragments).find((entry) => {\n      const [key, value] = entry;\n      if (casedInput === availableFragments[key].name.toLowerCase()) {\n        selectedFragments[key] = availableFragments[key];\n        return value;\n      }\n    });\n\n    if (!matchFragment) {\n      throw new Error(chalk.red(`'${input}' is not a valid ${type} on ${abiName}`));\n    }\n  });\n\n  return selectedFragments;\n}\nfunction filterExistingFragments<T extends Fragment | ConstructorFragment>(\n  fragments: Record<string, T>,\n  existingMethods: string[]\n): Record<string, T> {\n  const cleanFragments: Record<string, T> = {};\n  for (const key in fragments) {\n    const fragmentFormats = Object.values(getFragmentFormats<T>(fragments[key])).concat(key);\n    const diff = difference(fragmentFormats, existingMethods);\n    if (diff.length === 3) {\n      diff.forEach((fragKey) => {\n        if (fragments[fragKey]) {\n          cleanFragments[fragKey] = fragments[fragKey];\n        }\n      });\n    }\n  }\n\n  return cleanFragments;\n}\n\nexport type ManifestExtractor<T> = (\n  dataSources: T,\n  casedInputAddress: string | undefined\n) => {\n  existingEvents: string[];\n  existingFunctions: string[];\n};\n\nexport function filterExistingMethods<T>(\n  eventFragments: Record<string, EventFragment>,\n  functionFragments: Record<string, FunctionFragment>,\n  dataSources: T,\n  address: string | undefined,\n  extractor: ManifestExtractor<T>\n): [Record<string, EventFragment>, Record<string, FunctionFragment>] {\n  const {existingEvents, existingFunctions} = extractor(dataSources, address && address.toLowerCase());\n\n  return [\n    filterExistingFragments<EventFragment>(eventFragments, existingEvents),\n    filterExistingFragments<FunctionFragment>(functionFragments, existingFunctions),\n  ];\n}\n\nexport const yamlExtractor: ManifestExtractor<EthereumDs[]> = (dataSources, casedInputAddress) => {\n  const existingEvents: string[] = [];\n  const existingFunctions: string[] = [];\n\n  dataSources\n    .filter((d: EthereumDs) => {\n      const dsAddress = d.options?.address?.toLowerCase();\n      return casedInputAddress ? casedInputAddress === dsAddress : !dsAddress;\n    })\n    .forEach((ds: EthereumDs) => {\n      ds.mapping.handlers.forEach((handler) => {\n        if (!handler.filter) return;\n\n        const topics = (handler.filter as EthereumLogFilter).topics?.[0];\n        const func = (handler.filter as EthereumTransactionFilter).function;\n\n        if (topics) {\n          existingEvents.push(topics);\n        }\n        if (func) {\n          existingFunctions.push(func);\n        }\n      });\n    });\n\n  return {existingEvents, existingFunctions};\n};\n\nexport const tsExtractor: ManifestExtractor<string> = (dataSources, casedInputAddress) => {\n  const existingEvents: string[] = [];\n  const existingFunctions: string[] = [];\n\n  splitArrayString(dataSources)\n    .filter((d) => {\n      const match = d.match(ADDRESS_REG);\n      return match && match.length >= 2 && match[1].toLowerCase() === casedInputAddress;\n    })\n    .forEach((d) => {\n      const extractedValue = extractFromTs(d, {handlers: undefined}) as {handlers: string};\n\n      const regResult = extractFromTs(extractedValue.handlers, {\n        topics: TOPICS_REG,\n        function: FUNCTION_REG,\n      });\n      if (regResult.topics !== null) {\n        existingEvents.push(regResult.topics[0]);\n      }\n      if (regResult.function !== null) {\n        existingFunctions.push(regResult.function as string);\n      }\n    });\n\n  return {existingEvents, existingFunctions};\n};\n\nexport async function getManifestData(manifestPath: string): Promise<Document> {\n  const existingManifest = await fs.promises.readFile(path.join(manifestPath), 'utf8');\n  return parseDocument(existingManifest);\n}\n\nexport function prependDatasources(dsStr: string, toPendStr: string): string {\n  if (dsStr.trim().startsWith('[') && dsStr.trim().endsWith(']')) {\n    // Insert the object string right after the opening '['\n    return dsStr.trim().replace('[', `[${toPendStr},`);\n  } else {\n    throw new Error('Input string is not a valid JSON array string');\n  }\n}\nexport async function generateManifestTs(\n  manifestPath: string,\n  userInput: UserInput,\n  existingManifestData: string\n): Promise<void> {\n  const inputDs = constructDatasourcesTs(userInput);\n\n  const extractedDs = extractFromTs(existingManifestData, {dataSources: undefined}) as {dataSources: string};\n  const v = prependDatasources(extractedDs.dataSources, inputDs);\n  const updateManifest = replaceArrayValueInTsManifest(existingManifestData, 'dataSources', v);\n\n  await fs.promises.writeFile(manifestPath, updateManifest, 'utf8');\n}\nexport async function generateManifestYaml(\n  manifestPath: string,\n  userInput: UserInput,\n  existingManifestData: Document\n): Promise<void> {\n  const inputDs = constructDatasourcesYaml(userInput);\n  const dsNode = existingManifestData.get('dataSources') as YAMLSeq;\n  if (!dsNode || !dsNode.items.length) {\n    // To ensure output is in yaml format\n    const cleanDs = new YAMLSeq();\n    cleanDs.add(inputDs);\n    existingManifestData.set('dataSources', cleanDs);\n  } else {\n    dsNode.add(inputDs);\n  }\n  await fs.promises.writeFile(path.join(manifestPath), existingManifestData.toString(), 'utf8');\n}\n\nexport function constructHandlerProps(methods: [SelectedMethod[], SelectedMethod[]], abiName: string): AbiPropType {\n  const handlers: HandlerPropType[] = [];\n  const [events, functions] = methods;\n\n  functions.forEach((fn) => {\n    handlers.push({\n      name: generateHandlerName(fn.name, abiName, 'tx'),\n      argName: 'tx',\n      argType: `${upperFirst(fn.name)}Transaction`,\n    });\n  });\n\n  events.forEach((event) => {\n    handlers.push({\n      name: generateHandlerName(event.name, abiName, 'log'),\n      argName: 'log',\n      argType: `${upperFirst(event.name)}Log`,\n    });\n  });\n\n  return {\n    name: abiName,\n    handlers: handlers,\n  };\n}\n\nexport async function generateHandlers(\n  selectedMethods: [SelectedMethod[], SelectedMethod[]],\n  projectPath: string,\n  abiName: string\n): Promise<void> {\n  const abiProps = constructHandlerProps(selectedMethods, abiName);\n\n  const fileName = `${abiName}Handlers`;\n  try {\n    await renderTemplate(SCAFFOLD_HANDLER_TEMPLATE_PATH, path.join(projectPath, ROOT_MAPPING_DIR, `${fileName}.ts`), {\n      props: {\n        abis: [abiProps],\n      },\n      helper: {upperFirst},\n    });\n    fs.appendFileSync(path.join(projectPath, 'src/index.ts'), `\\nexport * from \"./mappings/${fileName}\"`);\n  } catch (e: any) {\n    throw new Error(`Unable to generate handler scaffolds. ${e.message}`);\n  }\n}\n\nexport function tsStringify(\n  obj: SubqlRuntimeHandler | SubqlRuntimeHandler[] | string,\n  indent = 2,\n  currentIndent = 0\n): string {\n  if (typeof obj !== 'object' || obj === null) {\n    if (typeof obj === 'string' && obj.includes('EthereumHandlerKind')) {\n      return obj; // Return the string as-is without quotes\n    }\n    return JSON.stringify(obj);\n  }\n\n  if (Array.isArray(obj)) {\n    const items = obj.map((item) => tsStringify(item, indent, currentIndent + indent));\n    return `[\\n${items.map((item) => ' '.repeat(currentIndent + indent) + item).join(',\\n')}\\n${' '.repeat(\n      currentIndent\n    )}]`;\n  }\n\n  const entries = Object.entries(obj);\n  const result = entries.map(([key, value]) => {\n    const valueStr = tsStringify(value, indent, currentIndent + indent);\n    return `${' '.repeat(currentIndent + indent)}${key}: ${valueStr}`;\n  });\n\n  return `{\\n${result.join(',\\n')}\\n${' '.repeat(currentIndent)}}`;\n}\n"]}