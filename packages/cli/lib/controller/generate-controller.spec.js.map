{"version":3,"file":"generate-controller.spec.js","sourceRoot":"","sources":["../../src/controller/generate-controller.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport {EventFragment, FunctionFragment} from '@ethersproject/abi';\nimport {DEFAULT_TS_MANIFEST, NETWORK_FAMILY} from '@subql/common';\nimport {getAbiInterface} from '@subql/common-ethereum';\nimport {\n  EthereumDatasourceKind,\n  EthereumHandlerKind,\n  EthereumLogFilter,\n  EthereumTransactionFilter,\n  SubqlRuntimeDatasource as EthereumDs,\n} from '@subql/types-ethereum';\nimport {SelectedMethod, UserInput} from '../commands/codegen/generate';\nimport {ENDPOINT_REG, FUNCTION_REG, TOPICS_REG} from '../constants';\nimport {loadDependency} from '../modulars';\nimport {\n  extractArrayValueFromTsManifest,\n  extractFromTs,\n  findMatchingIndices,\n  replaceArrayValueInTsManifest,\n  resolveToAbsolutePath,\n  splitArrayString,\n} from '../utils';\nimport {\n  constructDatasourcesTs,\n  constructDatasourcesYaml,\n  constructHandlerProps,\n  constructMethod,\n  filterExistingMethods,\n  filterObjectsByStateMutability,\n  generateHandlerName,\n  prepareInputFragments,\n  removeKeyword,\n  tsExtractor,\n  tsStringify,\n  yamlExtractor,\n} from './generate-controller';\n\nconst mockConstructedFunctions: SelectedMethod[] = [\n  {\n    name: 'transferFrom',\n    method: 'transferFrom(address,address,uint256)',\n  },\n];\n\nconst mockConstructedEvents: SelectedMethod[] = [\n  {\n    name: 'Approval',\n    method: 'Approval(address,address,uint256)',\n  },\n];\n\nconst mockDsFn = (): EthereumDs[] => [\n  {\n    kind: EthereumDatasourceKind.Runtime,\n    startBlock: 1,\n    options: {\n      abi: 'Erc721',\n      address: '',\n    },\n    assets: {\n      erc721: {file: 'erc721.json'},\n    } as unknown as Map<string, {file: string}>,\n    mapping: {\n      file: '',\n      handlers: [\n        {\n          handler: 'handleTransaction',\n          kind: EthereumHandlerKind.Call,\n          filter: {\n            function: 'approve(address,uint256)',\n          },\n        },\n        {\n          handler: 'handleLog',\n          kind: EthereumHandlerKind.Event,\n          filter: {\n            topics: ['Transfer(address,address,uint256)'],\n          },\n        },\n      ],\n    },\n  },\n];\n\nconst mockDsStr =\n  '' +\n  '[\\n' +\n  '{\\n' +\n  \"                kind: 'EthereumDatasourceKind.Runtime',\\n\" +\n  '                startBlock: 4719568,\\n' +\n  '    \\n' +\n  '                options: {\\n' +\n  '                    // Must be a key of assets\\n' +\n  \"                    abi:'erc20',\\n\" +\n  '                    // # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\\n' +\n  \"                    address:'0x60781C2586D68229fde47564546784ab3fACA982'\\n\" +\n  '                },\\n' +\n  \"                assets: \\\"new Map([['erc20', { file: './abis/erc20.abi.json' }]])\\\",\\n\" +\n  '                mapping: {\\n' +\n  '                    file: \"./dist/index.js\",\\n' +\n  '                    handlers: [\\n' +\n  '                        {\\n' +\n  \"                            kind: 'EthereumHandlerKind.Call',\\n\" +\n  '                            handler: \"handleTransaction\",\\n' +\n  '                            filter: {\\n' +\n  '                                function: \"approve(address,uint256)\",\\n' +\n  '                            },\\n' +\n  '                        },\\n' +\n  '                        {\\n' +\n  \"                            kind: 'EthereumHandlerKind.Event',\\n\" +\n  '                            handler: \"handleLog\",\\n' +\n  '                            filter: {\\n' +\n  '                                topics: [\"Transfer(address,address,uint256)\"],\\n' +\n  '                            },\\n' +\n  '                        },\\n' +\n  '                    ],\\n' +\n  '                },\\n' +\n  '            },\\n' +\n  '        ]';\n\ndescribe('CLI codegen:generate', () => {\n  const projectPath = path.join(__dirname, '../../test/schemaTest');\n  const abiInterface = getAbiInterface(projectPath, './erc721.json');\n  const ethModule = loadDependency(NETWORK_FAMILY.ethereum);\n  const abiName = ethModule.parseContractPath('./erc721.json').name;\n  const eventFragments = abiInterface.events;\n  const functionFragments = filterObjectsByStateMutability(abiInterface.functions);\n\n  it('Construct correct datasources', () => {\n    const mockUserInput: UserInput = {\n      startBlock: 1,\n      functions: mockConstructedFunctions,\n      events: mockConstructedEvents,\n      abiPath: './abis/erc721.json',\n      address: 'aaa',\n    };\n    const constructedDs = constructDatasourcesYaml(mockUserInput);\n    const expectedAsset = new Map();\n    expectedAsset.set('Erc721', {file: './abis/erc721.json'});\n    expect(constructedDs).toStrictEqual({\n      kind: EthereumDatasourceKind.Runtime,\n      startBlock: 1,\n      options: {\n        abi: 'Erc721',\n        address: 'aaa',\n      },\n      assets: expectedAsset,\n      mapping: {\n        file: './dist/index.js',\n        handlers: [\n          {\n            handler: 'handleTransferFromErc721Tx',\n            kind: EthereumHandlerKind.Call,\n            filter: {\n              function: 'transferFrom(address,address,uint256)',\n            },\n          },\n          {\n            handler: 'handleApprovalErc721Log',\n            kind: EthereumHandlerKind.Event,\n            filter: {\n              topics: ['Approval(address,address,uint256)'],\n            },\n          },\n        ],\n      },\n    });\n  });\n\n  it('prepareInputFragments, should return all fragments, if user passes --events=\"*\"', async () => {\n    const result = await prepareInputFragments('event', '*', eventFragments, abiName);\n    expect(result).toStrictEqual(abiInterface.events);\n  });\n\n  it('prepareInputFragments, no method passed, should prompt through inquirer', async () => {\n    // when using ejs, jest spyOn does not work on inquirer\n    const inquirer = require('@inquirer/prompts');\n\n    const promptSpy = jest.spyOn(inquirer, 'checkbox').mockResolvedValue(['Approval(address,address,uint256)']);\n\n    const emptyStringPassed = await prepareInputFragments('event', '', eventFragments, abiName);\n    expect(promptSpy).toHaveBeenCalledTimes(1);\n    const undefinedPassed = await prepareInputFragments('event', undefined, eventFragments, abiName);\n\n    expect(emptyStringPassed).toStrictEqual(undefinedPassed);\n  });\n\n  it('prepareInputFragments, --functions=\"transferFrom\", should return matching fragment method (cased insensitive)', async () => {\n    const result = await prepareInputFragments<FunctionFragment>(\n      'function',\n      'transferFrom',\n      functionFragments,\n      abiName\n    );\n    const insensitiveInputResult = await prepareInputFragments<FunctionFragment>(\n      'function',\n      'transFerfrom',\n      functionFragments,\n      abiName\n    );\n\n    expect(result).toStrictEqual(insensitiveInputResult);\n    expect(result).toStrictEqual({\n      'transferFrom(address,address,uint256)': abiInterface.functions['transferFrom(address,address,uint256)'],\n    });\n  });\n  it('should throw when passing invalid methods', async () => {\n    await expect(\n      prepareInputFragments<FunctionFragment>(\n        'function',\n        'transFerfrom(address,address,uint256)',\n        functionFragments,\n        abiName\n      )\n    ).rejects.toThrow(\"'transFerfrom(address' is not a valid function on Erc721\");\n    await expect(\n      prepareInputFragments<FunctionFragment>(\n        'function',\n        'transferFrom(address from, address to, uint256 tokenid)',\n        functionFragments,\n        abiName\n      )\n    ).rejects.toThrow(\"'transferFrom(address from' is not a valid function on Erc721\");\n\n    await expect(prepareInputFragments('function', 'asdfghj', functionFragments, abiName)).rejects.toThrow(\n      \"'asdfghj' is not a valid function on Erc721\"\n    );\n  });\n  it('Ensure generateHandlerName', () => {\n    expect(generateHandlerName('transfer', 'erc721', 'log')).toBe('handleTransferErc721Log');\n  });\n  it('Ensure ConstructHandlerProps', () => {\n    const functionMethods = [{name: 'transfer', method: 'transfer(address,uint256)'}];\n    const eventsMethods = [{name: 'Approval', method: 'Approval(address,address,uint256)'}];\n\n    const result = constructHandlerProps([eventsMethods, functionMethods], abiName);\n    expect(result).toStrictEqual({\n      name: 'Erc721',\n      handlers: [\n        {\n          name: 'handleTransferErc721Tx',\n          argName: 'tx',\n          argType: 'TransferTransaction',\n        },\n        {name: 'handleApprovalErc721Log', argName: 'log', argType: 'ApprovalLog'},\n      ],\n    });\n  });\n  it('FilterObjectsByStatMutability', () => {\n    const mockData = {\n      'transfer(address,uint256)': {\n        type: 'function',\n        name: 'transfer',\n        constant: false,\n        inputs: [[], []] as any,\n        outputs: [[]] as any,\n        payable: false,\n        stateMutability: 'nonpayable',\n        gas: null as any,\n        _isFragment: true,\n      },\n      'allowance(address,address)': {\n        type: 'function',\n        name: 'allowance',\n        constant: true,\n        inputs: [[], []] as any,\n        outputs: [[]] as any,\n        payable: false,\n        stateMutability: 'view',\n        gas: null as any,\n        _isFragment: true,\n      },\n    };\n    const filteredResult = filterObjectsByStateMutability(mockData as any as Record<string, FunctionFragment>);\n\n    expect(filteredResult).toEqual({\n      'transfer(address,uint256)': {\n        type: 'function',\n        name: 'transfer',\n        constant: false,\n        inputs: [[], []] as any,\n        outputs: [[]] as any,\n        payable: false,\n        stateMutability: 'nonpayable',\n        gas: null as any,\n        _isFragment: true,\n      },\n    } as any);\n  });\n  it('filter out existing methods, input address === undefined && ds address === \"\", should filter', () => {\n    const ds = mockDsFn();\n    ds[0].options!.address = '';\n    const [cleanEvents, cleanFunctions] = filterExistingMethods(\n      eventFragments,\n      functionFragments,\n      ds,\n      undefined,\n      yamlExtractor\n    );\n    // function approve should be filtered out\n    // event transfer should be filtered out\n    expect(cleanEvents).toStrictEqual({\n      'Approval(address,address,uint256)': eventFragments['Approval(address,address,uint256)'],\n      'ApprovalForAll(address,address,bool)': eventFragments['ApprovalForAll(address,address,bool)'],\n    });\n    expect(cleanEvents['Transfer(address,address,uint256)']).toBeFalsy();\n    expect(cleanFunctions['approve(address,uint256)']).toBeFalsy();\n  });\n  it('filter out existing methods, only on matching address', () => {\n    const ds = mockDsFn();\n    ds[0].options!.address = '0x892476D79090Fa77C6B9b79F68d21f62b46bEDd2';\n\n    const [cleanEvents, cleanFunctions] = filterExistingMethods(\n      eventFragments,\n      functionFragments,\n      ds,\n      'zzz',\n      yamlExtractor\n    );\n    const constructedEvents: SelectedMethod[] = constructMethod<EventFragment>(cleanEvents);\n    const constructedFunctions: SelectedMethod[] = constructMethod<FunctionFragment>(cleanFunctions);\n\n    console.log(constructedEvents, '|', constructedFunctions);\n    // expect(constructedEvents.length).toBe(Object.keys(eventFragments).length);\n    // expect(constructedFunctions.length).toBe(Object.keys(functionFragments).length);\n  });\n  it('filter out existing methods, inputAddress === undefined || \"\" should filter all ds that contains no address', () => {\n    const ds = mockDsFn();\n    if (ds[0].options?.address) ds[0].options.address = undefined;\n    const [cleanEvents, cleanFunctions] = filterExistingMethods(\n      eventFragments,\n      functionFragments,\n      ds,\n      undefined,\n      yamlExtractor\n    );\n\n    expect(cleanEvents).toStrictEqual({\n      'Approval(address,address,uint256)': eventFragments['Approval(address,address,uint256)'],\n      'ApprovalForAll(address,address,bool)': eventFragments['ApprovalForAll(address,address,bool)'],\n    });\n    expect(cleanEvents['Transfer(address,address,uint256)']).toBeFalsy();\n    expect(cleanFunctions['approve(address,uint256)']).toBeFalsy();\n  });\n  it('filter out different formatted filters', () => {\n    const ds = mockDsFn();\n    ds[0].options!.address = 'zzz';\n    const logHandler = ds[0].mapping.handlers[1].filter as EthereumLogFilter;\n    const txHandler = ds[0].mapping.handlers[0].filter as EthereumTransactionFilter;\n    txHandler.function = 'approve(address to, uint256 tokenId)';\n    logHandler.topics = ['Transfer(address indexed from, address indexed to, uint256 indexed tokenId)'];\n\n    // should filter out approve and Transfer\n    const [cleanEvents, cleanFunctions] = filterExistingMethods(\n      eventFragments,\n      functionFragments,\n      ds,\n      'zzz',\n      yamlExtractor\n    );\n    const constructedEvents: SelectedMethod[] = constructMethod<EventFragment>(cleanEvents);\n    const constructedFunctions: SelectedMethod[] = constructMethod<FunctionFragment>(cleanFunctions);\n\n    expect(constructedEvents).toStrictEqual([\n      {name: 'Approval', method: 'Approval(address,address,uint256)'},\n      {\n        name: 'ApprovalForAll',\n        method: 'ApprovalForAll(address,address,bool)',\n      },\n    ]);\n\n    expect(constructedFunctions).toStrictEqual([\n      {\n        name: 'safeTransferFrom',\n        method: 'safeTransferFrom(address,address,uint256)',\n      },\n      {\n        name: 'safeTransferFrom',\n        method: 'safeTransferFrom(address,address,uint256,bytes)',\n      },\n      {\n        name: 'setApprovalForAll',\n        method: 'setApprovalForAll(address,bool)',\n      },\n      {\n        name: 'transferFrom',\n        method: 'transferFrom(address,address,uint256)',\n      },\n    ]);\n  });\n  it('removeKeyword, should only remove expect value', () => {\n    let inputString = 'event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)';\n    expect(removeKeyword(inputString)).toBe(\n      'ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved)'\n    );\n\n    inputString = 'function balanceOf(address _owner) external view returns (uint256)';\n    expect(removeKeyword(inputString)).toBe('balanceOf(address _owner) external view returns (uint256)');\n\n    inputString = 'balanceOf(address _owner) external view returns (uint256)';\n    expect(removeKeyword(inputString)).toBe('balanceOf(address _owner) external view returns (uint256)');\n  });\n  it('Able to read from artifacts and abis', () => {\n    const mockPath_1 = path.join(__dirname, '../../test/abiTest1/');\n    const mockPath_2 = path.join(__dirname, '../../test/abiTest2/');\n\n    expect(getAbiInterface(mockPath_1, 'abis.json')).toBeTruthy();\n    expect(getAbiInterface(mockPath_1, 'artifact.json')).toBeTruthy();\n\n    expect(() => getAbiInterface(mockPath_2, 'artifact.json')).toThrow('Provided ABI is not a valid ABI or Artifact');\n  });\n  it('resolve to absolutePath from tilde', () => {\n    const tildePath = '~/Downloads/example.file';\n    expect(resolveToAbsolutePath(tildePath)).toBe(`${os.homedir()}/Downloads/example.file`);\n  });\n  it('resolve to absolutePath from relativePath', () => {\n    const abiPath_relative = './packages/cli/test/abiTest1/abis/abis.json';\n    expect(resolveToAbsolutePath(abiPath_relative)).toBe(path.join(__dirname, '../../test/abiTest1/abis/abis.json'));\n  });\n  it('if absolutePath regex should not do anything', () => {\n    const absolutePath = '/root/Downloads/example.file';\n    expect(resolveToAbsolutePath(absolutePath)).toBe(absolutePath);\n  });\n  it('filter existing methods', () => {\n    const casedInputAddress = '0x60781C2586D68229fde47564546784ab3fACA982'.toLowerCase();\n\n    const [cleanEvents, cleanFunctions] = filterExistingMethods(\n      eventFragments,\n      functionFragments,\n      mockDsStr,\n      casedInputAddress,\n      tsExtractor\n    );\n    // should filter out approve fn and transfer event\n    expect(Object.keys(cleanEvents).includes('Transfer')).toBe(false);\n    expect(Object.keys(cleanFunctions).includes('approval')).toBe(false);\n  });\n  it('splitArrayString', () => {\n    const dsArr =\n      '' +\n      '[\\n' +\n      '{\\n' +\n      \"                kind: 'EthereumDatasourceKind.Runtime',\\n\" +\n      '                startBlock: 4719568,\\n' +\n      '    \\n' +\n      '                options: {\\n' +\n      '                    // Must be a key of assets\\n' +\n      \"                    abi:'erc20',\\n\" +\n      '                    // # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\\n' +\n      \"                    address:'0x60781C2586D68229fde47564546784ab3fACA982'\\n\" +\n      '                },\\n' +\n      \"                assets: \\\"new Map([['erc20', { file: './abis/erc20.abi.json' }]])\\\",\\n\" +\n      '                mapping: {\\n' +\n      '                    file: \"./dist/index.js\",\\n' +\n      '                    handlers: [\\n' +\n      '                        {\\n' +\n      \"                            kind: 'EthereumHandlerKind.Call',\\n\" +\n      '                            handler: \"handleTransaction\",\\n' +\n      '                            filter: {\\n' +\n      '                                function: \"approve(address,uint256)\",\\n' +\n      '                            },\\n' +\n      '                        },\\n' +\n      '                        {\\n' +\n      \"                            kind: 'EthereumHandlerKind.Event',\\n\" +\n      '                            handler: \"handleLog\",\\n' +\n      '                            filter: {\\n' +\n      '                                topics: [\"Transfer(address,address,uint256)\"],\\n' +\n      '                            },\\n' +\n      '                        },\\n' +\n      '                    ],\\n' +\n      '                },\\n' +\n      '            },\\n' +\n      '{\\n' +\n      \"                kind: 'EthereumDatasourceKind.Runtime',\\n\" +\n      '                startBlock: 4719568,\\n' +\n      '    \\n' +\n      '                options: {\\n' +\n      '                    // Must be a key of assets\\n' +\n      \"                    abi:'erc20',\\n\" +\n      '                    // # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\\n' +\n      \"                    address:'0x60781C2586D68229fde47564546784ab3fACA982'\\n\" +\n      '                },\\n' +\n      \"                assets: \\\"new Map([['erc20', { file: './abis/erc20.abi.json' }]])\\\",\\n\" +\n      '                mapping: {\\n' +\n      '                    file: \"./dist/index.js\",\\n' +\n      '                    handlers: [\\n' +\n      '                        {\\n' +\n      \"                            kind: 'EthereumHandlerKind.Call',\\n\" +\n      '                            handler: \"handleTransaction\",\\n' +\n      '                            filter: {\\n' +\n      '                                function: \"approve(address,uint256)\",\\n' +\n      '                            },\\n' +\n      '                        },\\n' +\n      '                        {\\n' +\n      \"                            kind: 'EthereumHandlerKind.Event',\\n\" +\n      '                            handler: \"handleLog\",\\n' +\n      '                            filter: {\\n' +\n      '                                topics: [\"Transfer(address,address,uint256)\"],\\n' +\n      '                            },\\n' +\n      '                        },\\n' +\n      '                    ],\\n' +\n      '                },\\n' +\n      '            },\\n' +\n      '        ]';\n    expect(splitArrayString(dsArr).length).toBe(2);\n  });\n  it('Correct constructedDataSourcesTs', () => {\n    const mockUserInput: UserInput = {\n      startBlock: 1,\n      functions: mockConstructedFunctions,\n      events: mockConstructedEvents,\n      abiPath: './abis/erc721.json',\n      address: 'aaa',\n    };\n    expect(constructDatasourcesTs(mockUserInput)).toStrictEqual(\n      `{\n    kind: EthereumDatasourceKind.Runtime,\n    startBlock: 1,\n    options: {\n      abi: 'Erc721',\n      address: 'aaa',\n    },\n    assets: new Map([['Erc721', {file: './abis/erc721.json'}]]),\n    mapping: {\n      file: './dist/index.js',\n      handlers: [\n  {\n    handler: \"handleTransferFromErc721Tx\",\n    kind: EthereumHandlerKind.Call,\n    filter: {\n      function: \"transferFrom(address,address,uint256)\"\n    }\n  },\n  {\n    handler: \"handleApprovalErc721Log\",\n    kind: EthereumHandlerKind.Event,\n    filter: {\n      topics: [\n        \"Approval(address,address,uint256)\"\n      ]\n    }\n  }\n]\n    }\n  }`\n    );\n  });\n  it('Construct correct ds for yaml', () => {\n    const mockUserInput: UserInput = {\n      startBlock: 1,\n      functions: mockConstructedFunctions,\n      events: mockConstructedEvents,\n      abiPath: './abis/erc721.json',\n      address: 'aaa',\n    };\n    expect(constructDatasourcesYaml(mockUserInput)).toStrictEqual({\n      kind: EthereumDatasourceKind.Runtime,\n      startBlock: 1,\n      options: {\n        abi: 'Erc721',\n        address: 'aaa',\n      },\n      assets: new Map([['Erc721', {file: './abis/erc721.json'}]]),\n      mapping: {\n        file: './dist/index.js',\n        handlers: [\n          {\n            handler: 'handleTransferFromErc721Tx',\n            kind: EthereumHandlerKind.Call,\n            filter: {\n              function: 'transferFrom(address,address,uint256)',\n            },\n          },\n          {\n            handler: 'handleApprovalErc721Log',\n            kind: EthereumHandlerKind.Event,\n            filter: {\n              topics: ['Approval(address,address,uint256)'],\n            },\n          },\n        ],\n      },\n    });\n  });\n  it('tsExtractor should extract existing events and functions from ts-manifest', () => {\n    // TODO: extractor fails when encountering comments\n    expect(tsExtractor(mockDsStr, '0x60781C2586D68229fde47564546784ab3fACA982'.toLowerCase())).toStrictEqual({\n      existingEvents: ['Transfer(address,address,uint256)'],\n      existingFunctions: ['approve(address,uint256)'],\n    });\n    expect(tsExtractor(mockDsStr, 'zzz'.toLowerCase())).toStrictEqual({\n      existingEvents: [],\n      existingFunctions: [],\n    });\n  });\n  it('findArray indices', async () => {\n    // locate dataSources\n    const projectPath = path.join(__dirname, '../../test/ts-manifest', DEFAULT_TS_MANIFEST);\n    const m = await fs.promises.readFile(projectPath, 'utf8');\n    expect(findMatchingIndices(m, '[', ']', m.indexOf(`dataSources: `))).toStrictEqual([[1293, 2720]]);\n\n    // locate handlers in DS\n    expect(findMatchingIndices(mockDsStr, '[', ']', mockDsStr.indexOf('handlers: '))).toStrictEqual([[630, 1278]]);\n  });\n  // TODO failing test due to unable to process comments\n  it.skip('extract from TS manifest', async () => {\n    const projectPath = path.join(__dirname, '../../test/ts-manifest', DEFAULT_TS_MANIFEST);\n    const m = await fs.promises.readFile(projectPath, 'utf8');\n    const v = extractFromTs(m, {\n      dataSources: undefined,\n      handlers: undefined,\n      function: FUNCTION_REG,\n      topics: TOPICS_REG,\n      endpoint: ENDPOINT_REG,\n    });\n    expect(v.dataSources).toMatch(\n      '[\\n' +\n        '    {\\n' +\n        '      kind: EthereumDatasourceKind.Runtime,\\n' +\n        '      startBlock: 4719568,\\n' +\n        '\\n' +\n        '      options: {\\n' +\n        '        // Must be a key of assets\\n' +\n        \"        abi: 'erc20',\\n\" +\n        '        // # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\\n' +\n        \"        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\\n\" +\n        '      },\\n' +\n        \"      assets: new Map([['erc20', {file: './abis/erc20.abi.json'}]]),\\n\" +\n        '      mapping: {\\n' +\n        \"        file: './dist/index.js',\\n\" +\n        '        handlers: [\\n' +\n        '          {\\n' +\n        '            kind: EthereumHandlerKind.Call,\\n' +\n        \"            handler: 'handleTransaction',\\n\" +\n        '            filter: {\\n' +\n        '              /**\\n' +\n        '               * The function can either be the function fragment or signature\\n' +\n        \"               * function: '0x095ea7b3'\\n\" +\n        \"               * function: '0x7ff36ab500000000000000000000000000000000000000000000000000000000'\\n\" +\n        '               */\\n' +\n        \"              function: 'approve(address spender, uint256 rawAmount)',\\n\" +\n        '            },\\n' +\n        '          },\\n' +\n        '          {\\n' +\n        '            kind: EthereumHandlerKind.Event,\\n' +\n        \"            handler: 'handleLog',\\n\" +\n        '            filter: {\\n' +\n        '              /**\\n' +\n        '               * Follows standard log filters https://docs.ethers.io/v5/concepts/events/\\n' +\n        '               * address: \"0x60781C2586D68229fde47564546784ab3fACA982\"\\n' +\n        '               */\\n' +\n        \"              topics: ['Transfer(address indexed from, address indexed to, uint256 amount)'],\\n\" +\n        '            },\\n' +\n        '          },\\n' +\n        '        ],\\n' +\n        '      },\\n' +\n        '    },\\n' +\n        '  ]'\n    );\n\n    expect(v.handlers).toMatch(\n      '[\\n' +\n        '          {\\n' +\n        '            kind: EthereumHandlerKind.Call,\\n' +\n        \"            handler: 'handleTransaction',\\n\" +\n        '            filter: {\\n' +\n        '              /**\\n' +\n        '               * The function can either be the function fragment or signature\\n' +\n        \"               * function: '0x095ea7b3'\\n\" +\n        \"               * function: '0x7ff36ab500000000000000000000000000000000000000000000000000000000'\\n\" +\n        '               */\\n' +\n        \"              function: 'approve(address spender, uint256 rawAmount)',\\n\" +\n        '            },\\n' +\n        '          },\\n' +\n        '          {\\n' +\n        '            kind: EthereumHandlerKind.Event,\\n' +\n        \"            handler: 'handleLog',\\n\" +\n        '            filter: {\\n' +\n        '              /**\\n' +\n        '               * Follows standard log filters https://docs.ethers.io/v5/concepts/events/\\n' +\n        '               * address: \"0x60781C2586D68229fde47564546784ab3fACA982\"\\n' +\n        '               */\\n' +\n        \"              topics: ['Transfer(address indexed from, address indexed to, uint256 amount)'],\\n\" +\n        '            },\\n' +\n        '          },\\n' +\n        '        ]'\n    );\n    // TODO expected to fail, due to unable to skip comments\n    expect(v.function).toMatch('approve(address spender, uint256 rawAmount)');\n    expect(v.topics?.[0]).toMatch('Transfer(address indexed from, address indexed to, uint256 amount)');\n    expect(v.endpoint?.[0]).toMatch('https://eth.api.onfinality.io/public');\n  });\n  // });\n  // All these test should test against mockData as well as\n  it('Should replace value in tsManifetst', async () => {\n    const projectPath = path.join(__dirname, '../../test/ts-manifest', DEFAULT_TS_MANIFEST);\n    const m = await fs.promises.readFile(projectPath, 'utf8');\n    const v = replaceArrayValueInTsManifest(m, 'dataSources', '[{},{}]');\n    const r = extractArrayValueFromTsManifest(v, 'dataSources');\n    expect(r).toStrictEqual('[{},{}]');\n  });\n  it('Correct output on tsStringify', () => {\n    const mockDs = mockDsFn();\n    const v = tsStringify(mockDs[0].mapping.handlers);\n    expect(v).toBe(`[\n  {\n    handler: \"handleTransaction\",\n    kind: \"ethereum/TransactionHandler\",\n    filter: {\n      function: \"approve(address,uint256)\"\n    }\n  },\n  {\n    handler: \"handleLog\",\n    kind: \"ethereum/LogHandler\",\n    filter: {\n      topics: [\n        \"Transfer(address,address,uint256)\"\n      ]\n    }\n  }\n]`);\n  });\n  it('Split array', () => {\n    expect(splitArrayString(\"[{key: 'value1'},{key: 'value2'}]\")).toStrictEqual([\"{key: 'value1'}\", \"{key: 'value2'}\"]);\n    // trim spacing\n    expect(splitArrayString(\"[{key: 'value1'},{key: 'value2'},  {key:      'value3'}]\")).toStrictEqual([\n      \"{key: 'value1'}\",\n      \"{key: 'value2'}\",\n      \"{key: 'value3'}\",\n    ]);\n\n    // nested objects\n    expect(splitArrayString(`[ \"{key: {key: 'value1'}}\", \"{key: {key: 'value1'}}\"]`)).toStrictEqual([\n      \"{key: {key: 'value1'}}\",\n      \"{key: {key: 'value1'}}\",\n    ]);\n    // nested arrarys and objects\n    expect(\n      splitArrayString(\n        `[ \"{key: {key: ['value1']}}\", \"{key: {key: 'value1'}}\",  \"{key: [{key: 'value1'}, {key: 'value1'}]}\"]`\n      )\n    ).toStrictEqual([\n      \"{key: {key: ['value1']}}\",\n      \"{key: {key: 'value1'}}\",\n      \"{key: [{key: 'value1'}, {key: 'value1'}]}\",\n    ]);\n  });\n});\n"]}