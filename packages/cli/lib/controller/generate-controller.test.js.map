{"version":3,"file":"generate-controller.test.js","sourceRoot":"","sources":["../../src/controller/generate-controller.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {EventFragment, FunctionFragment} from '@ethersproject/abi';\nimport {DEFAULT_TS_MANIFEST, loadFromJsonOrYaml, NETWORK_FAMILY} from '@subql/common';\nimport {getAbiInterface} from '@subql/common-ethereum';\nimport {SubqlRuntimeDatasource as EthereumDs} from '@subql/types-ethereum';\nimport {rimraf} from 'rimraf';\nimport {Document, stringify} from 'yaml';\nimport Generate, {SelectedMethod, UserInput} from '../commands/codegen/generate';\nimport {loadDependency} from '../modulars';\nimport {\n  constructMethod,\n  filterExistingMethods,\n  filterObjectsByStateMutability,\n  generateHandlerName,\n  generateHandlers,\n  generateManifestTs,\n  generateManifestYaml,\n  getManifestData,\n  prepareAbiDirectory,\n  prepareInputFragments,\n  yamlExtractor,\n} from './generate-controller';\n\nconst ROOT_MAPPING_DIR = 'src/mappings';\nconst PROJECT_PATH = path.join(__dirname, '../../test/schemaTest');\nconst MANIFEST_PATH = './generate-project.yaml';\n\nconst mockConstructedFunctions: SelectedMethod[] = [\n  {\n    name: 'transferFrom',\n    method: 'transferFrom(address,address,uint256)',\n  },\n];\n\nconst mockConstructedEvents: SelectedMethod[] = [\n  {\n    name: 'Approval',\n    method: 'Approval(address,address,uint256)',\n  },\n];\n\nconst originalManifestData = {\n  specVersion: '1.0.0',\n  name: 'generate-test',\n  version: '0.0.1',\n  runner: {\n    node: {\n      name: '@subql/node-ethereum',\n      version: '*',\n    },\n    query: {\n      name: '@subql/query',\n      version: '*',\n    },\n  },\n  schema: {\n    file: './schema.graphql',\n  },\n  network: {\n    chainId: '1',\n    endpoint: ['https://eth.api.onfinality.io/public'],\n    dictionary: 'https://gx.api.subquery.network/sq/subquery/eth-dictionary',\n  },\n  dataSources: [\n    {\n      kind: 'ethereum/Runtime',\n      startBlock: 4719568,\n      options: {\n        abi: 'erc721',\n        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      },\n      assets: {\n        erc721: {\n          file: './erc721.json',\n        },\n      },\n      mapping: {\n        file: './dist/index.js',\n        handlers: [\n          {\n            handler: 'handleTransaction',\n            kind: 'ethereum/TransactionHandler',\n            filter: {\n              function: 'approve(address spender, uint256 rawAmount)',\n            },\n          },\n          {\n            handler: 'handleLog',\n            kind: 'ethereum/LogHandler',\n            filter: {\n              topics: ['Transfer(address indexed from, address indexed to, uint256 amount)'],\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\n\nconst originalManifestData2 = {\n  specVersion: '1.0.0',\n  name: 'generate-test',\n  version: '0.0.1',\n  runner: {\n    node: {\n      name: '@subql/node-ethereum',\n      version: '*',\n    },\n    query: {\n      name: '@subql/query',\n      version: '*',\n    },\n  },\n  schema: {\n    file: './schema.graphql',\n  },\n  network: {\n    chainId: '1',\n    endpoint: ['https://eth.api.onfinality.io/public'],\n    dictionary: 'https://gx.api.subquery.network/sq/subquery/eth-dictionary',\n  },\n  dataSources: [\n    {\n      kind: 'ethereum/Runtime',\n      startBlock: 4719568,\n      options: {\n        abi: 'erc721',\n        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      },\n      assets: {\n        erc721: {\n          file: './erc721.json',\n        },\n      },\n      mapping: {\n        file: './dist/index.js',\n        handlers: [\n          {\n            handler: 'handleTransaction',\n            kind: 'ethereum/TransactionHandler',\n            filter: {\n              function: 'approve(address,uint256)',\n            },\n          },\n          {\n            handler: 'handleLog',\n            kind: 'ethereum/LogHandler',\n            filter: {\n              topics: ['Transfer(address,address,uint256)'],\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\n\nconst ethModule = loadDependency(NETWORK_FAMILY.ethereum);\nconst abiName = ethModule.parseContractPath('./erc721.json').name;\n\nconst mockUserInput: UserInput = {\n  startBlock: 1,\n  functions: mockConstructedFunctions,\n  events: mockConstructedEvents,\n  abiPath: './abis/erc721.json',\n  address: 'aaa',\n};\n\njest.setTimeout(30000);\n\ndescribe('CLI codegen:generate, Can write to file', () => {\n  afterEach(async () => {\n    await Promise.all([\n      rimraf(path.join(__dirname, '../../test/schemaTest/src')),\n      rimraf(path.join(__dirname, '../../test/schemaTest/abis/abis.json')),\n      rimraf(path.join(__dirname, '../../test/ts-manifest/mock-project.ts')),\n      fs.promises.writeFile(path.join(PROJECT_PATH, MANIFEST_PATH), stringify(originalManifestData), {\n        encoding: 'utf8',\n        flag: 'w',\n      }),\n    ]);\n\n    const doc = new Document(originalManifestData2);\n    const ds = (doc.get('dataSources') as any).items[0];\n    ds.commentBefore = 'datasource comment';\n    ds.get('mapping').get('handlers').comment = 'handler comment';\n    await fs.promises.writeFile(path.join(PROJECT_PATH, './generate-project-2.yaml'), stringify(doc), {\n      encoding: 'utf8',\n      flag: 'w',\n    });\n  });\n  it('generateManifest from ts-manifest', async () => {\n    const pPath = path.join(__dirname, '../../test/ts-manifest');\n    const filePath = path.join(pPath, 'mock-project.ts');\n    const tsManifest = await fs.promises.readFile(path.join(pPath, DEFAULT_TS_MANIFEST), 'utf8');\n    const mockInput: UserInput = {\n      startBlock: 1,\n      functions: mockConstructedFunctions,\n      events: mockConstructedEvents,\n      abiPath: './abis/erc721.json',\n      address: 'aaa',\n    };\n    await generateManifestTs(path.join(pPath, './mock-project.ts'), mockInput, tsManifest);\n    const newManifest = await fs.promises.readFile(filePath, 'utf8');\n    expect(newManifest).toBe(\n      '// @ts-nocheck\\n' +\n        \"import {EthereumProject, EthereumDatasourceKind, EthereumHandlerKind} from '@subql/types-ethereum';\\n\" +\n        '\\n' +\n        '// Can expand the Datasource processor types via the generic param\\n' +\n        'const project: EthereumProject = {\\n' +\n        \"  specVersion: '1.0.0',\\n\" +\n        \"  version: '0.0.1',\\n\" +\n        \"  name: 'ethereum-subql-starter',\\n\" +\n        \"  description: 'This project can be use as a starting point for developing your new Ethereum SubQuery project',\\n\" +\n        '  runner: {\\n' +\n        '    node: {\\n' +\n        \"      name: '@subql/node-ethereum',\\n\" +\n        \"      version: '>=3.0.0',\\n\" +\n        '    },\\n' +\n        '    query: {\\n' +\n        \"      name: '@subql/query',\\n\" +\n        \"      version: '*',\\n\" +\n        '    },\\n' +\n        '  },\\n' +\n        '  schema: {\\n' +\n        \"    file: './schema.graphql',\\n\" +\n        '  },\\n' +\n        '  network: {\\n' +\n        '    /**\\n' +\n        '     * chainId is the EVM Chain ID, for Ethereum this is 1\\n' +\n        '     * https://chainlist.org/chain/1\\n' +\n        '     */\\n' +\n        \"    chainId: '1',\\n\" +\n        '    /**\\n' +\n        '     * This endpoint must be a public non-pruned archive node\\n' +\n        '     * Public nodes may be rate limited, which can affect indexing speed\\n' +\n        '     * When developing your project we suggest getting a private API key\\n' +\n        '     * You can get them from OnFinality for free https://app.onfinality.io\\n' +\n        '     * https://documentation.onfinality.io/support/the-enhanced-api-service\\n' +\n        '     */\\n' +\n        \"    endpoint: ['https://eth.api.onfinality.io/public'],\\n\" +\n        \"    dictionary: 'https://gx.api.subquery.network/sq/subquery/eth-dictionary',\\n\" +\n        '  },\\n' +\n        '  dataSources: [{\\n' +\n        '    kind: EthereumDatasourceKind.Runtime,\\n' +\n        '    startBlock: 1,\\n' +\n        '    options: {\\n' +\n        \"      abi: 'Erc721',\\n\" +\n        \"      address: 'aaa',\\n\" +\n        '    },\\n' +\n        \"    assets: new Map([['Erc721', {file: './abis/erc721.json'}]]),\\n\" +\n        '    mapping: {\\n' +\n        \"      file: './dist/index.js',\\n\" +\n        '      handlers: [\\n' +\n        '  {\\n' +\n        '    handler: \"handleTransferFromErc721Tx\",\\n' +\n        '    kind: EthereumHandlerKind.Call,\\n' +\n        '    filter: {\\n' +\n        '      function: \"transferFrom(address,address,uint256)\"\\n' +\n        '    }\\n' +\n        '  },\\n' +\n        '  {\\n' +\n        '    handler: \"handleApprovalErc721Log\",\\n' +\n        '    kind: EthereumHandlerKind.Event,\\n' +\n        '    filter: {\\n' +\n        '      topics: [\\n' +\n        '        \"Approval(address,address,uint256)\"\\n' +\n        '      ]\\n' +\n        '    }\\n' +\n        '  }\\n' +\n        ']\\n' +\n        '    }\\n' +\n        '  },\\n' +\n        '    {\\n' +\n        '      kind: EthereumDatasourceKind.Runtime,\\n' +\n        '      startBlock: 4719568,\\n' +\n        '\\n' +\n        '      options: {\\n' +\n        '        // Must be a key of assets\\n' +\n        \"        abi: 'erc20',\\n\" +\n        '        // # this is the contract address for wrapped ether https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\\n' +\n        \"        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\\n\" +\n        '      },\\n' +\n        \"      assets: new Map([['erc20', {file: './abis/erc20.abi.json'}]]),\\n\" +\n        '      mapping: {\\n' +\n        \"        file: './dist/index.js',\\n\" +\n        '        handlers: [\\n' +\n        '          {\\n' +\n        '            kind: EthereumHandlerKind.Call,\\n' +\n        \"            handler: 'handleTransaction',\\n\" +\n        '            filter: {\\n' +\n        '              /**\\n' +\n        '               * The function can either be the function fragment or signature\\n' +\n        \"               * function: '0x095ea7b3'\\n\" +\n        \"               * function: '0x7ff36ab500000000000000000000000000000000000000000000000000000000'\\n\" +\n        '               */\\n' +\n        \"              function: 'approve(address spender, uint256 rawAmount)',\\n\" +\n        '            },\\n' +\n        '          },\\n' +\n        '          {\\n' +\n        '            kind: EthereumHandlerKind.Event,\\n' +\n        \"            handler: 'handleLog',\\n\" +\n        '            filter: {\\n' +\n        '              /**\\n' +\n        '               * Follows standard log filters https://docs.ethers.io/v5/concepts/events/\\n' +\n        '               * address: \"0x60781C2586D68229fde47564546784ab3fACA982\"\\n' +\n        '               */\\n' +\n        \"              topics: ['Transfer(address indexed from, address indexed to, uint256 amount)'],\\n\" +\n        '            },\\n' +\n        '          },\\n' +\n        '        ],\\n' +\n        '      },\\n' +\n        '    },\\n' +\n        '  ],\\n' +\n        \"  repository: 'https://github.com/subquery/ethereum-subql-starter',\\n\" +\n        '};\\n' +\n        '\\n' +\n        'export default project;\\n'\n    );\n  });\n  it('Can generate manifest', async () => {\n    const existingManifestData = await getManifestData(path.join(PROJECT_PATH, MANIFEST_PATH));\n    await generateManifestYaml(path.join(PROJECT_PATH, MANIFEST_PATH), mockUserInput, existingManifestData);\n    const updatedManifestDs = (loadFromJsonOrYaml(path.join(PROJECT_PATH, MANIFEST_PATH)) as any).dataSources;\n\n    expect(updatedManifestDs[1]).toStrictEqual({\n      kind: 'ethereum/Runtime',\n      startBlock: mockUserInput.startBlock,\n      options: {\n        abi: 'Erc721',\n        address: mockUserInput.address,\n      },\n      assets: {\n        Erc721: {\n          file: mockUserInput.abiPath,\n        },\n      },\n      mapping: {\n        file: './dist/index.js',\n        handlers: [\n          {\n            filter: {\n              function: mockUserInput.functions[0].method,\n            },\n            handler: `${generateHandlerName(mockUserInput.functions[0].name, abiName, 'tx')}`,\n            kind: 'ethereum/TransactionHandler',\n          },\n          {\n            filter: {\n              topics: [mockUserInput.events[0].method],\n            },\n            handler: `${generateHandlerName(mockUserInput.events[0].name, abiName, 'log')}`,\n            kind: 'ethereum/LogHandler',\n          },\n        ],\n      },\n    });\n  });\n  it('if handler filter already exist with matching address, should not add', async () => {\n    const existingManifestData = await getManifestData(path.join(PROJECT_PATH, './generate-project-2.yaml'));\n    const abiInterface = getAbiInterface(PROJECT_PATH, './erc721.json');\n    const existingDs = (existingManifestData.get('dataSources') as any).toJSON() as EthereumDs[];\n\n    const rawEventFragments = abiInterface.events;\n    const rawFunctionFragments = filterObjectsByStateMutability(abiInterface.functions);\n\n    const selectedEvents = await prepareInputFragments('event', 'approval, transfer', rawEventFragments, abiName);\n    const selectedFunctions = await prepareInputFragments(\n      'function',\n      'approve, transferFrom',\n      rawFunctionFragments,\n      abiName\n    );\n\n    const [eventFrags, functionFrags] = filterExistingMethods(\n      selectedEvents,\n      selectedFunctions,\n      existingDs,\n      '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      yamlExtractor\n    );\n\n    mockUserInput.events = constructMethod<EventFragment>(eventFrags);\n    mockUserInput.functions = constructMethod<FunctionFragment>(functionFrags);\n\n    await generateManifestYaml(\n      path.join(PROJECT_PATH, './generate-project-2.yaml'),\n      mockUserInput,\n      existingManifestData\n    );\n\n    const updatedManifestDs = (loadFromJsonOrYaml(path.join(PROJECT_PATH, './generate-project-2.yaml')) as any)\n      .dataSources;\n\n    const handlers = updatedManifestDs.map((e: any) => {\n      return e.mapping.handlers;\n    });\n    expect(handlers[1]).toStrictEqual([\n      {\n        handler: 'handleTransferFromErc721Tx',\n        kind: 'ethereum/TransactionHandler',\n        filter: {\n          function: 'transferFrom(address,address,uint256)',\n        },\n      },\n      {\n        handler: 'handleApprovalErc721Log',\n        kind: 'ethereum/LogHandler',\n        filter: {\n          topics: ['Approval(address,address,uint256)'],\n        },\n      },\n    ]);\n  });\n  it('should preserve any comments in existing datasources', async () => {\n    await fs.promises.mkdir(path.join(PROJECT_PATH, 'src/'));\n    await fs.promises.mkdir(path.join(PROJECT_PATH, ROOT_MAPPING_DIR));\n    await fs.promises.writeFile(path.join(PROJECT_PATH, 'src/index.ts'), 'export * from \"./mappings/mappingHandlers\"');\n\n    await Generate.run([\n      '-f',\n      path.join(PROJECT_PATH, './generate-project-2.yaml'),\n      '--events',\n      'approval, transfer',\n      '--functions',\n      'transferFrom, approve',\n      '--abiPath',\n      './erc721.json',\n      '--startBlock',\n      '1',\n    ]);\n\n    const manifest = await getManifestData(path.join(PROJECT_PATH, './generate-project-2.yaml'));\n    const ds = manifest.get('dataSources') as any;\n    expect(ds.commentBefore).toBe('datasource comment');\n    expect(ds.items[0].get('mapping').get('handlers').comment).toBe('handler comment');\n  });\n\n  it('should throw, if handler file exists', async () => {\n    await fs.promises.mkdir(path.join(PROJECT_PATH, 'src/'));\n    await fs.promises.mkdir(path.join(PROJECT_PATH, ROOT_MAPPING_DIR));\n    await fs.promises.writeFile(path.join(PROJECT_PATH, 'src/mappings/Erc721Handlers.ts'), 'zzzzzz');\n\n    await expect(\n      Generate.run([\n        '-f',\n        path.join(PROJECT_PATH, './generate-project-2.yaml'),\n        '--events',\n        'approval, transfer',\n        '--functions',\n        'transferFrom, approve',\n        '--abiPath',\n        './erc721.json',\n        '--startBlock',\n        '1',\n      ])\n    ).rejects.toThrow('file: Erc721Handlers.ts already exists');\n  });\n  it('Can generate mapping handlers', async () => {\n    // Prepare directory\n    await fs.promises.mkdir(path.join(PROJECT_PATH, 'src/'));\n    await fs.promises.mkdir(path.join(PROJECT_PATH, ROOT_MAPPING_DIR));\n    await fs.promises.writeFile(path.join(PROJECT_PATH, 'src/index.ts'), 'export * from \"./mappings/mappingHandlers\"');\n\n    // should not overwrite existing data in index.ts\n    await generateHandlers([mockConstructedEvents, mockConstructedFunctions], PROJECT_PATH, abiName);\n    const expectedFnHandler = `${generateHandlerName(mockUserInput.functions[0].name, abiName, 'tx')}`;\n    const expectedEventHandler = `${generateHandlerName(mockUserInput.events[0].name, abiName, 'log')}`;\n\n    const codegenResult = await fs.promises.readFile(\n      path.join(PROJECT_PATH, ROOT_MAPPING_DIR, `${abiName}Handlers.ts`)\n    );\n    const importFile = await fs.promises.readFile(path.join(PROJECT_PATH, '/src', 'index.ts'));\n\n    const expectImportFile =\n      '' +\n      `export * from \"./mappings/mappingHandlers\"\nexport * from \"./mappings/Erc721Handlers\"`;\n\n    const expectedGeneratedCode =\n      '' +\n      `// SPDX-License-Identifier: Apache-2.0\n\n// Auto-generated\n\nimport {TransferFromTransaction,ApprovalLog,} from \"../types/abi-interfaces/Erc721\";\n\n\nexport async function ${expectedFnHandler}(tx: TransferFromTransaction ): Promise<void> {\n// Place your code logic here\n}\n\nexport async function ${expectedEventHandler}(log: ApprovalLog ): Promise<void> {\n// Place your code logic here\n}\n`;\n    expect(importFile.toString()).toBe(expectImportFile);\n    expect(codegenResult.toString()).toBe(expectedGeneratedCode);\n  });\n  it('Throws if invalid abiPath is given', async () => {\n    await expect(prepareAbiDirectory('asd/asd.json', PROJECT_PATH)).rejects.toThrow(\n      'Unable to find abi at: asd/asd.json'\n    );\n  });\n  it('Should be able to parse relative path on abiPath', async () => {\n    const abiPath_relative = './packages/cli/test/abiTest1/abis/abis.json';\n    await prepareAbiDirectory(abiPath_relative, PROJECT_PATH);\n\n    expect(fs.existsSync(path.join(PROJECT_PATH, 'abis/abis.json'))).toBeTruthy();\n  });\n  it('Should be able to parse absolute path on abiPath', async () => {\n    const abiPath_absolute = path.join(__dirname, '../../test/abiTest1/abis/abis.json');\n    await prepareAbiDirectory(abiPath_absolute, PROJECT_PATH);\n\n    expect(fs.existsSync(path.join(PROJECT_PATH, 'abis/abis.json'))).toBeTruthy();\n  });\n});\n"]}