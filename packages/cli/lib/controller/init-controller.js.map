{"version":3,"file":"init-controller.js","sourceRoot":"","sources":["../../src/controller/init-controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport childProcess, {execSync} from 'child_process';\nimport fs from 'fs';\nimport * as path from 'path';\nimport {DEFAULT_MANIFEST, DEFAULT_TS_MANIFEST, loadFromJsonOrYaml, makeTempDir, NETWORK_FAMILY} from '@subql/common';\nimport {ProjectManifestV1_0_0, ProjectNetworkConfig} from '@subql/types-core';\nimport axios from 'axios';\nimport {copySync} from 'fs-extra';\nimport {rimraf} from 'rimraf';\nimport git from 'simple-git';\nimport {parseDocument, YAMLMap, YAMLSeq} from 'yaml';\nimport {BASE_TEMPLATE_URl, CAPTURE_CHAIN_ID_REG, CHAIN_ID_REG, ENDPOINT_REG} from '../constants';\nimport {loadDependency} from '../modulars';\nimport {isProjectSpecV1_0_0, ProjectSpecBase} from '../types';\nimport {\n  defaultEnvDevelopLocalPath,\n  defaultEnvDevelopPath,\n  defaultEnvLocalPath,\n  defaultEnvPath,\n  defaultGitIgnorePath,\n  defaultMultiChainYamlManifestPath,\n  defaultTSManifestPath,\n  defaultYamlManifestPath,\n  errorHandle,\n  extractFromTs,\n  findReplace,\n  prepareDirPath,\n  replaceArrayValueInTsManifest,\n  validateEthereumTsManifest,\n} from '../utils';\n\nexport interface ExampleProjectInterface {\n  name: string;\n  description: string;\n  remote: string;\n  path: string;\n}\n\nexport interface Network {\n  code: string;\n  name: string;\n  chain_id: string;\n  description: string;\n  logo: string;\n}\n\nexport interface Template {\n  code: string;\n  name: string;\n  description: string;\n  logo: string;\n  networks: {\n    code: string;\n    name: string;\n    chain_id: string;\n    description: string;\n    logo: string;\n    examples: ExampleProjectInterface[];\n  }[];\n}\n\nconst axiosInstance = axios.create({baseURL: BASE_TEMPLATE_URl});\n\n// GET /all\n// https://templates.subquery.network/all\nexport async function fetchTemplates(): Promise<Template[]> {\n  try {\n    const res = await axiosInstance.get<{templates: Template[]}>('/all');\n\n    return res.data.templates;\n  } catch (e) {\n    throw errorHandle(e, `Update to reach endpoint '${BASE_TEMPLATE_URl}/all`);\n  }\n}\n\n// GET /networks\n// https://templates.subquery.network/networks\nexport async function fetchNetworks(): Promise<Template[]> {\n  try {\n    const res = await axiosInstance.get<{results: Template[]}>('/networks');\n    return res.data.results;\n  } catch (e) {\n    throw errorHandle(e, `Update to reach endpoint '${BASE_TEMPLATE_URl}/networks`);\n  }\n}\n\n// The family query param must be an exact case-insensitive match otherwise an empty result will be returned\nexport async function fetchExampleProjects(\n  familyCode: string,\n  networkCode: string\n): Promise<ExampleProjectInterface[]> {\n  try {\n    const res = await axiosInstance.get<{results: ExampleProjectInterface[]}>(`/networks/${familyCode}/${networkCode}`);\n    return res.data.results;\n  } catch (e) {\n    throw errorHandle(e, `Update to reach endpoint ${familyCode}/${networkCode}`);\n  }\n}\n\nexport async function cloneProjectGit(\n  localPath: string,\n  projectName: string,\n  projectRemote: string,\n  branch: string\n): Promise<string> {\n  const projectPath = path.join(localPath, projectName);\n  try {\n    await git().clone(projectRemote, projectPath, ['-b', branch, '--single-branch']);\n  } catch (e) {\n    let err = 'Failed to clone starter template from git';\n    try {\n      execSync('git --version');\n    } catch (_) {\n      err += ', please install git and ensure that it is available from command line';\n    }\n    throw new Error(err);\n  }\n  return projectPath;\n}\n\nexport async function cloneProjectTemplate(\n  localPath: string,\n  projectName: string,\n  selectedProject: ExampleProjectInterface\n): Promise<string> {\n  const projectPath = path.join(localPath, projectName);\n  //make temp directory to store project\n  const tempPath = await makeTempDir();\n  //use sparse-checkout to clone project to temp directory\n  await git(tempPath).init().addRemote('origin', selectedProject.remote);\n  await git(tempPath).raw('sparse-checkout', 'set', selectedProject.path);\n  await git(tempPath).raw('pull', 'origin', 'main');\n  // Copy content to project path\n  copySync(path.join(tempPath, selectedProject.path), projectPath);\n  // Clean temp folder\n  fs.rmSync(tempPath, {recursive: true, force: true});\n  return projectPath;\n}\n\nexport async function readDefaults(projectPath: string): Promise<{\n  endpoint: ProjectNetworkConfig['endpoint'];\n  author: string;\n  description: string;\n  isMultiChainProject: boolean;\n}> {\n  const packageData = await fs.promises.readFile(`${projectPath}/package.json`);\n  const currentPackage = JSON.parse(packageData.toString());\n  const author: string = currentPackage.author;\n  const description: string = currentPackage.description;\n  let endpoint: ProjectNetworkConfig['endpoint'];\n  let isMultiChainProject = false;\n  const defaultTsPath = defaultTSManifestPath(projectPath);\n  const defaultYamlPath = defaultYamlManifestPath(projectPath);\n  const defaultMultiChainPath = defaultMultiChainYamlManifestPath(projectPath);\n\n  if (fs.existsSync(defaultTsPath)) {\n    const tsManifest = await fs.promises.readFile(defaultTsPath, 'utf8');\n    const extractedTsValues = extractFromTs(tsManifest.toString(), {\n      endpoint: ENDPOINT_REG,\n    });\n\n    endpoint = extractedTsValues.endpoint ?? [];\n  } else if (fs.existsSync(defaultYamlPath)) {\n    const yamlManifest = await fs.promises.readFile(defaultYamlPath, 'utf8');\n    const extractedYamlValues = parseDocument(yamlManifest).toJS() as ProjectManifestV1_0_0;\n    endpoint = extractedYamlValues.network.endpoint;\n  } else if (fs.existsSync(defaultMultiChainPath)) {\n    endpoint = [];\n    isMultiChainProject = true;\n  } else {\n    throw new Error('Failed to read manifest file while preparing the project');\n  }\n\n  return {endpoint, author, description, isMultiChainProject};\n}\n\nexport async function prepare(\n  projectPath: string,\n  project: ProjectSpecBase,\n  isMultiChainProject = false\n): Promise<void> {\n  try {\n    if (!isMultiChainProject) await prepareEnv(projectPath, project);\n  } catch (e) {\n    throw new Error('Failed to prepare read or write .env file while preparing the project');\n  }\n  try {\n    if (!isMultiChainProject) await prepareManifest(projectPath, project);\n  } catch (e) {\n    throw new Error('Failed to prepare read or write manifest while preparing the project');\n  }\n  try {\n    await preparePackage(projectPath, project);\n  } catch (e) {\n    throw new Error('Failed to prepare read or write package.json while preparing the project');\n  }\n  try {\n    await rimraf(`${projectPath}/.git`);\n  } catch (e) {\n    throw new Error('Failed to remove .git from template project');\n  }\n  try {\n    await prepareGitIgnore(projectPath);\n  } catch (e) {\n    throw new Error('Failed to prepare read or write .gitignore while preparing the project');\n  }\n}\n\nexport async function preparePackage(projectPath: string, project: ProjectSpecBase): Promise<void> {\n  //load and write package.json\n  const packageData = await fs.promises.readFile(`${projectPath}/package.json`);\n  const currentPackage = JSON.parse(packageData.toString());\n  currentPackage.name = project.name;\n  currentPackage.description = project.description ?? currentPackage.description;\n  currentPackage.author = project.author;\n  //add build and develop scripts\n  currentPackage.scripts = {\n    ...currentPackage.scripts,\n    build: 'subql codegen && subql build',\n    'build:develop': 'NODE_ENV=develop subql codegen && NODE_ENV=develop subql build',\n  };\n  //add dotenv package for env file support\n  currentPackage.devDependencies = {\n    ...currentPackage.devDependencies,\n    dotenv: 'latest',\n  };\n  const newPackage = JSON.stringify(currentPackage, null, 2);\n  await fs.promises.writeFile(`${projectPath}/package.json`, newPackage, 'utf8');\n}\n\nexport async function prepareManifest(projectPath: string, project: ProjectSpecBase): Promise<void> {\n  //load and write manifest(project.ts/project.yaml)\n  const tsPath = defaultTSManifestPath(projectPath);\n  const yamlPath = defaultYamlManifestPath(projectPath);\n  let manifestData: string;\n\n  const isTs = fs.existsSync(tsPath);\n\n  if (isTs) {\n    const tsManifest = (await fs.promises.readFile(tsPath, 'utf8')).toString();\n    //adding env config for endpoint.\n    const formattedEndpoint = `process.env.ENDPOINT!?.split(',') as string[] | string`;\n    const endpointUpdatedManifestData = findReplace(tsManifest, ENDPOINT_REG, `endpoint: ${formattedEndpoint}`);\n    const chainIdUpdatedManifestData = findReplace(\n      endpointUpdatedManifestData,\n      CHAIN_ID_REG,\n      `chainId: process.env.CHAIN_ID!`\n    );\n    manifestData = addDotEnvConfigCode(chainIdUpdatedManifestData);\n  } else {\n    //load and write manifest(project.yaml)\n    const yamlManifest = await fs.promises.readFile(yamlPath, 'utf8');\n    const data = parseDocument(yamlManifest);\n    const clonedData = data.clone();\n\n    const network = clonedData.get('network') as YAMLMap;\n    network.set('endpoint', project.endpoint);\n    clonedData.set('name', project.name);\n    if (isProjectSpecV1_0_0(project)) {\n      network.set('chainId', project.chainId);\n    }\n    manifestData = clonedData.toString();\n  }\n  await fs.promises.writeFile(isTs ? tsPath : yamlPath, manifestData, 'utf8');\n}\n\nexport function addDotEnvConfigCode(manifestData: string): string {\n  // add dotenv config after imports in project.ts file\n  let snippetCodeIndex = -1;\n  const manifestSections = manifestData.split('\\n');\n  for (let i = 0; i < manifestSections.length; i++) {\n    if (manifestSections[i].trim() === '') {\n      snippetCodeIndex = i + 1;\n      break;\n    }\n  }\n\n  if (snippetCodeIndex === -1) {\n    snippetCodeIndex = 0;\n  }\n\n  const envConfigCodeSnippet = `\nimport * as dotenv from 'dotenv';\nimport path from 'path';\n\nconst mode = process.env.NODE_ENV || 'production';\n\n// Load the appropriate .env file\nconst dotenvPath = path.resolve(__dirname, \\`.env\\${mode !== 'production' ? \\`.$\\{mode}\\` : ''}\\`);\ndotenv.config({ path: dotenvPath });\n`;\n\n  // Inserting the env configuration code in project.ts\n  const updatedTsProject = `${\n    manifestSections.slice(0, snippetCodeIndex).join('\\n') + envConfigCodeSnippet\n  }\\n${manifestSections.slice(snippetCodeIndex).join('\\n')}`;\n  return updatedTsProject;\n}\n\nexport async function prepareEnv(projectPath: string, project: ProjectSpecBase): Promise<void> {\n  //load and write manifest(project.ts/project.yaml)\n  const envPath = defaultEnvPath(projectPath);\n  const envDevelopPath = defaultEnvDevelopPath(projectPath);\n  const envLocalPath = defaultEnvLocalPath(projectPath);\n  const envDevelopLocalPath = defaultEnvDevelopLocalPath(projectPath);\n\n  let chainId;\n  if (isProjectSpecV1_0_0(project)) {\n    chainId = project.chainId;\n  } else {\n    const tsPath = defaultTSManifestPath(projectPath);\n    const tsManifest = (await fs.promises.readFile(tsPath, 'utf8')).toString();\n\n    const match = tsManifest.match(CAPTURE_CHAIN_ID_REG);\n    if (match) {\n      chainId = match[2];\n    }\n  }\n\n  //adding env configs\n  const envData = `ENDPOINT=${project.endpoint}\\nCHAIN_ID=${chainId}`;\n  await fs.promises.writeFile(envPath, envData, 'utf8');\n  await fs.promises.writeFile(envDevelopPath, envData, 'utf8');\n  await fs.promises.writeFile(envLocalPath, envData, 'utf8');\n  await fs.promises.writeFile(envDevelopLocalPath, envData, 'utf8');\n}\n\nexport async function prepareGitIgnore(projectPath: string): Promise<void> {\n  //load and write .gitignore\n  const gitIgnorePath = defaultGitIgnorePath(projectPath);\n  const isGitIgnore = fs.existsSync(gitIgnorePath);\n\n  if (isGitIgnore) {\n    let gitIgnoreManifest = (await fs.promises.readFile(gitIgnorePath, 'utf8')).toString();\n    //add local .env files in .gitignore\n    gitIgnoreManifest += `\\n# ENV local files\\n.env.local\\n.env.develop.local`;\n    await fs.promises.writeFile(gitIgnorePath, gitIgnoreManifest, 'utf8');\n  }\n}\n\nexport function installDependencies(projectPath: string, useNpm?: boolean): void {\n  let command = 'yarn install';\n\n  if (useNpm || !checkYarnExists()) {\n    command = 'npm install';\n  }\n\n  childProcess.execSync(command, {cwd: projectPath});\n}\n\nfunction checkYarnExists(): boolean {\n  try {\n    childProcess.execSync('yarn --version');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport async function prepareProjectScaffold(projectPath: string): Promise<void> {\n  // remove all existing abis & handler files\n  await prepareDirPath(path.join(projectPath, 'abis/'), false);\n  await prepareDirPath(path.join(projectPath, 'src/mappings/'), true);\n\n  const defaultTsPath = defaultTSManifestPath(projectPath);\n\n  try {\n    //  clean dataSources\n    if (fs.existsSync(defaultTsPath)) {\n      // ts check should be first\n      await prepareProjectScaffoldTS(defaultTsPath);\n    } else {\n      await prepareProjectScaffoldYAML(defaultYamlManifestPath(projectPath));\n    }\n  } catch (e) {\n    throw new Error('Failed to prepare project scaffold');\n  }\n\n  // remove handler file from index.ts\n  fs.truncateSync(path.join(projectPath, 'src/index.ts'), 0);\n}\n\nasync function prepareProjectScaffoldTS(defaultTsPath: string): Promise<void> {\n  const manifest = await fs.promises.readFile(defaultTsPath, 'utf8');\n  const updateManifest = replaceArrayValueInTsManifest(manifest, 'dataSources', '[]');\n  await fs.promises.writeFile(defaultTsPath, updateManifest, 'utf8');\n}\n\nasync function prepareProjectScaffoldYAML(defaultYamlPath: string): Promise<void> {\n  const manifest = parseDocument(await fs.promises.readFile(defaultYamlPath, 'utf8'));\n  manifest.set('dataSources', new YAMLSeq());\n  await fs.promises.writeFile(defaultYamlPath, manifest.toString(), 'utf8');\n}\n\nexport async function validateEthereumProjectManifest(projectPath: string): Promise<boolean> {\n  let manifest: any;\n  const isTs = fs.existsSync(path.join(projectPath, DEFAULT_TS_MANIFEST));\n  if (isTs) {\n    manifest = (await fs.promises.readFile(path.join(projectPath, DEFAULT_TS_MANIFEST), 'utf8')).toString();\n  } else {\n    manifest = loadFromJsonOrYaml(path.join(projectPath, DEFAULT_MANIFEST));\n  }\n  try {\n    return isTs\n      ? validateEthereumTsManifest(manifest)\n      : !!loadDependency(NETWORK_FAMILY.ethereum).parseProjectManifest(manifest);\n  } catch (e) {\n    return false;\n  }\n}\n"]}