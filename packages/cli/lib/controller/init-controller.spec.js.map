{"version":3,"file":"init-controller.spec.js","sourceRoot":"","sources":["../../src/controller/init-controller.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport * as fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport {DEFAULT_TS_MANIFEST} from '@subql/common';\nimport git from 'simple-git';\nimport {ENDPOINT_REG} from '../constants';\nimport {extractFromTs, findReplace, validateEthereumTsManifest} from '../utils';\nimport {\n  cloneProjectGit,\n  fetchExampleProjects,\n  fetchNetworks,\n  fetchTemplates,\n  prepareManifest,\n  preparePackage,\n  validateEthereumProjectManifest,\n} from './init-controller';\n\njest.mock('simple-git', () => {\n  const mGit = {\n    clone: jest.fn(),\n  };\n  return jest.fn(() => mGit);\n});\n\njest.setTimeout(30000);\n\nasync function makeTempDir() {\n  const sep = path.sep;\n  const tmpDir = os.tmpdir();\n  const tempPath = await fs.promises.mkdtemp(`${tmpDir}${sep}`);\n  return tempPath;\n}\nconst projectSpec = {\n  name: 'mocked_starter',\n  repository: '',\n  endpoint: 'wss://rpc.polkadot.io/public-ws',\n  author: 'jay',\n  description: 'this is test for init controller',\n  version: '',\n  license: '',\n};\n\ndescribe('Cli can create project (mocked)', () => {\n  const projectPath = path.join(__dirname, '../../test/schemaTest/');\n  let originalManifest: string;\n  let originalPackage: string;\n  beforeAll(async () => {\n    originalManifest = (await fs.promises.readFile(`${projectPath}/${DEFAULT_TS_MANIFEST}`)).toString();\n    originalPackage = (await fs.promises.readFile(`${projectPath}/package.json`)).toString();\n  });\n\n  afterAll(async () => {\n    // resort original after the test\n    await fs.promises.writeFile(path.join(projectPath, DEFAULT_TS_MANIFEST), originalManifest);\n    await fs.promises.writeFile(path.join(projectPath, 'package.json'), originalPackage);\n  });\n  it('throw error when git clone failed', async () => {\n    const tempPath = await makeTempDir();\n    (git().clone as jest.Mock).mockImplementationOnce((cb) => {\n      cb(new Error());\n    });\n    await expect(cloneProjectGit(tempPath, projectSpec.name, 'invalid_url', 'invalid_branch')).rejects.toThrow(\n      /Failed to clone starter template from git/\n    );\n  });\n  it('validate ethereum project manifest', async () => {\n    const projectPath_eth = path.join(__dirname, '../../test/abiTest1');\n    await expect(validateEthereumProjectManifest(projectPath_eth)).resolves.toBe(true);\n    await expect(validateEthereumProjectManifest(projectPath)).resolves.toBe(false);\n  });\n\n  // These tests are disabled because they can interfere with the service\n  it.skip('fetch templates', async () => {\n    expect((await fetchTemplates()).length).toBeGreaterThan(0);\n  });\n\n  it.skip('fetch networks', async () => {\n    expect((await fetchNetworks()).length).toBeGreaterThan(0);\n  });\n\n  it.skip('fetch example projects', async () => {\n    expect((await fetchExampleProjects('evm', '1')).length).toBeGreaterThan(0);\n  });\n\n  it('readDefaults using regex', async () => {\n    const manifest = (\n      await fs.promises.readFile(path.join(__dirname, `../../test/schemaTest/${DEFAULT_TS_MANIFEST}`))\n    ).toString();\n    expect(\n      extractFromTs(manifest, {\n        endpoint: ENDPOINT_REG,\n      })\n    ).toStrictEqual({\n      endpoint: ['wss://acala-polkadot.api.onfinality.io/public-ws', 'wss://acala-rpc-0.aca-api.network'],\n    });\n  });\n  it('Ensure regex correctness for ENDPOINT_REG', () => {\n    expect(\n      extractFromTs(`endpoint: 'wss://acala-polkadot.api.onfinality.io/public-ws'`, {\n        endpoint: ENDPOINT_REG,\n      })\n    ).toStrictEqual({\n      endpoint: ['wss://acala-polkadot.api.onfinality.io/public-ws'],\n    });\n    expect(\n      extractFromTs('endpoint: `wss://acala-polkadot.api.onfinality.io/public-ws`', {\n        endpoint: ENDPOINT_REG,\n      })\n    ).toStrictEqual({\n      endpoint: ['wss://acala-polkadot.api.onfinality.io/public-ws'],\n    });\n    expect(\n      extractFromTs('endpoint: [`wss://acala-polkadot.api.onfinality.io/public-ws`]', {\n        endpoint: ENDPOINT_REG,\n      })\n    ).toStrictEqual({\n      endpoint: ['wss://acala-polkadot.api.onfinality.io/public-ws'],\n    });\n    expect(\n      extractFromTs(\n        \"endpoint: [`wss://acala-polkadot.api.onfinality.io/public-ws`, 'wss://acala-polkadot.api.onfinality.io/public-ws']\",\n        {\n          endpoint: ENDPOINT_REG,\n        }\n      )\n    ).toStrictEqual({\n      endpoint: [\n        'wss://acala-polkadot.api.onfinality.io/public-ws',\n        'wss://acala-polkadot.api.onfinality.io/public-ws',\n      ],\n    });\n  });\n  it('findReplace using regex', async () => {\n    const manifest = (\n      await fs.promises.readFile(path.join(__dirname, `../../test/schemaTest/${DEFAULT_TS_MANIFEST}`))\n    ).toString();\n    const v = findReplace(manifest, ENDPOINT_REG, \"endpoint: ['wss://acala-polkadot.api.onfinality.io/public-ws']\");\n\n    expect(\n      extractFromTs(v, {\n        endpoint: ENDPOINT_REG,\n      })\n    ).toStrictEqual({endpoint: ['wss://acala-polkadot.api.onfinality.io/public-ws']});\n  });\n  it('findReplace with string endpoints', async () => {\n    const manifest = (\n      await fs.promises.readFile(path.join(__dirname, `../../test/schemaTest/${DEFAULT_TS_MANIFEST}`))\n    ).toString();\n    const v = findReplace(manifest, ENDPOINT_REG, \"endpoint: 'wss://acala-polkadot.api.onfinality.io/public-ws'\");\n\n    expect(\n      extractFromTs(v, {\n        endpoint: ENDPOINT_REG,\n      })\n    ).toStrictEqual({endpoint: ['wss://acala-polkadot.api.onfinality.io/public-ws']});\n  });\n  it('able to extract string endpoints', () => {\n    expect(\n      extractFromTs(\n        `\n      endpoint: 'wss://aaa'\n    `,\n        {endpoint: ENDPOINT_REG}\n      )\n    ).toStrictEqual({endpoint: ['wss://aaa']});\n  });\n  it('Ensure prepareManifest and preparePackage correctness for project.ts', async () => {\n    const project = {\n      name: 'test-1',\n      endpoint: ['https://zzz', 'https://bbb'],\n      author: 'bz888',\n      description: 'tester project',\n    };\n\n    await prepareManifest(projectPath, project);\n    await preparePackage(projectPath, project);\n\n    const packageData = await fs.promises.readFile(`${projectPath}/package.json`);\n    const projectPackage = JSON.parse(packageData.toString());\n\n    expect(projectPackage.name).toBe(project.name);\n    expect(projectPackage.description).toBe(project.description);\n    expect(projectPackage.author).toBe(project.author);\n\n    const updatedManifest = await fs.promises.readFile(`${projectPath}/${DEFAULT_TS_MANIFEST}`);\n    expect(originalManifest).not.toBe(updatedManifest.toString());\n    expect(originalPackage).not.toBe(packageData.toString());\n  });\n  it('Validate validateEthereumTsManifest', () => {\n    const passingManifest = `import {\n  SubstrateDatasourceKind,\n  SubstrateHandlerKind,\n  SubstrateProject,\n} from '@subql/types-ethereum';\n  runner:{ node: '@subql/node-ethereum' }`;\n    const failingManifest = `import {\n  SubstrateDatasourceKind,\n  SubstrateHandlerKind,\n  SubstrateProject,\n} from '@subql/types';\n  runner:{ node: '@subql/node' }`;\n    expect(validateEthereumTsManifest(passingManifest)).toBe(true);\n    expect(validateEthereumTsManifest(failingManifest)).toBe(false);\n  });\n});\n"]}