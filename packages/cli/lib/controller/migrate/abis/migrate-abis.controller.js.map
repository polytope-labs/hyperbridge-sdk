{"version":3,"file":"migrate-abis.controller.js","sourceRoot":"","sources":["../../../../src/controller/migrate/abis/migrate-abis.controller.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;AA6BnC,kCASC;;AApCD,oDAAoB;AACpB,wDAAwB;AACxB,mCAAgC;AAChC,mEAA0D;AAG1D,SAAS,kBAAkB,CAAC,WAAiC;IAC3D,OAAO,IAAA,iBAAQ,EAAC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACvH,CAAC;AAED,KAAK,UAAU,6BAA6B,CAAC,QAAkB,EAAE,UAAkB;IACjF,IAAI,CAAC;QACH,MAAM,OAAO,CAAC,GAAG,CACf,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACpB,MAAM,QAAQ,GAAG,cAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACrC,MAAM,cAAc,GAAG,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YACvD,YAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QAC7C,CAAC,CAAC,CACH,CAAC;QACF,OAAO,CAAC,GAAG,CACT,mGAAmG,UAAU,EAAE,CAChH,CAAC;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;IACnD,CAAC;AACH,CAAC;AAEM,KAAK,UAAU,WAAW,CAC/B,gBAAiC,EACjC,WAAmB,EACnB,QAAgB;IAEhB,MAAM,QAAQ,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;IAClE,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;IACrE,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,qCAAe,CAAC,CAAC;IAC1D,MAAM,6BAA6B,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;AACnE,CAAC","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {uniqWith} from 'lodash';\nimport {DEFAULT_ABI_DIR} from '../../generate-controller';\nimport {SubgraphDataSource, SubgraphProject} from '../types';\n\nfunction extractAllAbiFiles(dataSources: SubgraphDataSource[]): string[] {\n  return uniqWith(dataSources.flatMap((dataSource) => dataSource.mapping.abis.map((abi) => abi.file).filter(Boolean)));\n}\n\nasync function copyAbiFilesToTargetPathAsync(abiFiles: string[], targetPath: string): Promise<void> {\n  try {\n    await Promise.all(\n      abiFiles.map((file) => {\n        const fileName = path.basename(file);\n        const targetFilePath = path.join(targetPath, fileName);\n        fs.promises.copyFile(file, targetFilePath);\n      })\n    );\n    console.log(\n      `ABI files used in project manifest copied successfully, please copy other required ABI files to ${targetPath}`\n    );\n  } catch (error) {\n    console.error('Error copying ABI files:', error);\n  }\n}\n\nexport async function migrateAbis(\n  subgraphManifest: SubgraphProject,\n  subgraphDir: string,\n  subqlDir: string\n): Promise<void> {\n  const abiPaths = extractAllAbiFiles(subgraphManifest.dataSources);\n  const resolvedPaths = abiPaths.map((p) => path.join(subgraphDir, p));\n  const targetAbiDir = path.join(subqlDir, DEFAULT_ABI_DIR);\n  await copyAbiFilesToTargetPathAsync(resolvedPaths, targetAbiDir);\n}\n"]}