{"version":3,"file":"ethereum.spec.js","sourceRoot":"","sources":["../../../../src/controller/migrate/manifest/ethereum.spec.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;AAEnC,0DAA6D;AAC7D,0DAAiD;AACjD,yCAAsE;AAEtE,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,YAAY,GAAG,+BAAY,CAAC;QAClC,MAAM,OAAO,GAAG,YAAY,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,IAAA,4BAAiB,EAAC,EAAE,CAAC,CAAC,CAAC;QAC5E,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,uCAAsB,CAAC,OAAO,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;QAChF,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,aAAa,CAAC,EAAC,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,4CAA4C,EAAC,CAAC,CAAC;QAC/G,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,aAAa,CAAC,2BAA2B,CAAC,CAAC;QACrG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;QACjF,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,EAAC,MAAM,EAAE,CAAC,6BAA6B,CAAC,EAAC,CAAC,CAAC;QACvG,yCAAyC;QACzC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;IACjF,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,sBAAsB,GAAG,+BAAY,CAAC,WAAW,CAAC;QAExD,OAAQ,sBAAsB,CAAC,CAAC,CAAC,CAAC,MAAc,CAAC,OAAO,CAAC;QACzD,OAAQ,sBAAsB,CAAC,CAAC,CAAC,CAAC,MAAc,CAAC,UAAU,CAAC;QAE5D,MAAM,aAAa,GAAG,IAAA,kCAAuB,EAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,CAAC;QACzE,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,aAAa,EAAE,CAAC;QACvD,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAChD,MAAM,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;IACzD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {EthereumDatasourceKind} from '@subql/types-ethereum';\nimport {TestSubgraph} from '../migrate.fixtures';\nimport {convertEthereumDs, convertEthereumTemplate} from './ethereum';\n\ndescribe('migrate eth manifest', () => {\n  it(`convertEthereumDs`, () => {\n    const testSubgraph = TestSubgraph;\n    const subqlDs = testSubgraph.dataSources.map((ds) => convertEthereumDs(ds));\n    expect(subqlDs.length).toBe(1);\n    expect(subqlDs[0].kind).toBe(EthereumDatasourceKind.Runtime);\n    expect(subqlDs[0].migrateDatasourceType).toBe('EthereumDatasourceKind.Runtime');\n    expect(subqlDs[0].options).toStrictEqual({abi: 'Poap', address: '0x22C1f6050E56d2876009903609a2cC3fEf83B415'});\n    expect(subqlDs[0].mapping.handlers[0].migrateHandlerType).toStrictEqual('EthereumHandlerKind.Event');\n    expect(subqlDs[0].mapping.handlers[0].handler).toStrictEqual('handleEventToken');\n    expect(subqlDs[0].mapping.handlers[0].filter).toStrictEqual({topics: ['EventToken(uint256,uint256)']});\n    // converted handler should in same order\n    expect(subqlDs[0].mapping.handlers[1].handler).toStrictEqual('handleTransfer');\n  });\n\n  it(`convertEthereumTemplate`, () => {\n    const testTemplateDataSource = TestSubgraph.dataSources;\n\n    delete (testTemplateDataSource[0].source as any).address;\n    delete (testTemplateDataSource[0].source as any).startBlock;\n\n    const subqlTemplate = convertEthereumTemplate(testTemplateDataSource[0]);\n    expect(subqlTemplate.options?.address).toBeUndefined();\n    expect(subqlTemplate.options?.abi).toBe('Poap');\n    expect(subqlTemplate.assets?.get('Poap')).toBeTruthy();\n  });\n});\n"]}