{"version":3,"file":"migrate-manifest.controller.js","sourceRoot":"","sources":["../../../../src/controller/migrate/manifest/migrate-manifest.controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {CommonSubqueryProject} from '@subql/types-core';\nimport {upperFirst} from 'lodash';\nimport YAML from 'yaml';\nimport {findRunnerByNetworkFamily, prepareDirPath, renderTemplate} from '../../../utils';\nimport {TemplateKind} from '../../codegen-controller';\nimport {graphToSubqlNetworkFamily, networkConverters} from '../constants';\nimport {getChainIdByNetworkName} from '../migrate-controller';\nimport {\n  MigrateDatasourceKind,\n  SubgraphDataSource,\n  SubgraphProject,\n  SubgraphTemplate,\n  ChainInfo,\n  DsConvertFunction,\n  TemplateConvertFunction,\n} from '../types';\n\nconst PROJECT_TEMPLATE_PATH = path.resolve(__dirname, '../../../template/project.ts.ejs');\n\nfunction unsupportedError(name: string) {\n  throw new Error(\n    `Unfortunately migration does not support option \"${name}\" from subgraph, please remove or find alternative solutions`\n  );\n}\n\n// validate supported subgraph features\nexport function subgraphValidation(subgraphProject: SubgraphProject): void {\n  if (subgraphProject.features) unsupportedError(`features`);\n  if (subgraphProject.graft) unsupportedError(`graft`);\n  if (subgraphProject.dataSources.find((ds) => ds.context)) {\n    unsupportedError(`features`);\n  }\n}\n\nexport function readSubgraphManifest(inputPath: string, subgraphPath: string): SubgraphProject {\n  try {\n    const subgraphManifest: SubgraphProject = YAML.parse(fs.readFileSync(inputPath, 'utf8'));\n    return subgraphManifest;\n  } catch (e) {\n    if ((e as any).code === 'ENOENT') {\n      throw new Error(`Unable to find subgraph manifest under: ${subgraphPath}`);\n    }\n    throw e;\n  }\n}\n\nexport function extractNetworkFromManifest(subgraphProject: SubgraphProject): ChainInfo {\n  const subgraphDsKinds = subgraphProject.dataSources.map((d) => d.kind).filter((k) => k !== undefined);\n  const subgraphDsNetworks = subgraphProject.dataSources.map((d) => d.network).filter((n) => n !== undefined);\n  if (!subgraphDsKinds.length || !subgraphDsNetworks.length) {\n    throw new Error(`Subgraph dataSource kind or network not been found`);\n  }\n  if (!subgraphDsNetworks.every((network) => network === subgraphDsNetworks[0])) {\n    throw new Error(`All network values in subgraph Networks should be the same. Got ${subgraphDsNetworks}`);\n  }\n  const firstDsKind = subgraphDsKinds[0];\n  const firstDsNetwork = subgraphDsNetworks[0];\n  const networkFamily = graphToSubqlNetworkFamily[firstDsKind];\n  if (!networkFamily) {\n    throw new Error(`Corresponding SubQuery network is not found with subgraph data source kind ${firstDsKind}`);\n  }\n  return {networkFamily, chainId: getChainIdByNetworkName(networkFamily, firstDsNetwork)};\n}\n\n/**\n * Render subquery project to .ts file\n * @param projectPath\n * @param project\n */\nexport async function renderManifest(projectPath: string, project: CommonSubqueryProject): Promise<void> {\n  try {\n    await renderTemplate(PROJECT_TEMPLATE_PATH, projectPath, {\n      props: {\n        importTypes: {\n          network: 'ethereum',\n          projectClass: 'EthereumProject',\n          projectDatasourceKind: 'EthereumDatasourceKind',\n          projectHandlerKind: 'EthereumHandlerKind',\n        },\n        projectJson: project,\n      },\n      helper: {\n        upperFirst,\n      },\n    });\n  } catch (e) {\n    throw new Error(`Failed to create project manifest, ${e}`);\n  }\n}\n\n/**\n *  Migrate a subgraph project manifest to subquery manifest file\n * @param network network family\n * @param inputPath file path to subgraph.yaml\n * @param outputPath file path to project.ts\n */\nexport async function migrateManifest(chainInfo: ChainInfo, subgraphManifest: SubgraphProject, outputPath: string) {\n  await prepareDirPath(outputPath, false);\n  await renderManifest(outputPath, graphManifestToSubqlManifest(chainInfo, subgraphManifest));\n}\n\n/**\n * Convert the graph project to subquery project\n * @param network\n * @param subgraphManifest\n */\nfunction graphManifestToSubqlManifest(chainInfo: ChainInfo, subgraphManifest: SubgraphProject): CommonSubqueryProject {\n  const networkConverter = networkConverters[chainInfo.networkFamily];\n\n  if (!networkConverter || !networkConverter.templateConverter || !networkConverter.dsConverter) {\n    throw new Error(`${chainInfo.networkFamily} is missing datasource/template convert methods for migration.`);\n  }\n\n  return {\n    network: {chainId: chainInfo.chainId, endpoint: ''},\n    name: subgraphManifest.name,\n    specVersion: '1.0.0',\n    runner: {\n      node: {version: '^', name: findRunnerByNetworkFamily(chainInfo.networkFamily)},\n      query: {version: '^', name: '@subql/query'},\n    },\n    version: subgraphManifest.specVersion,\n    dataSources: subgraphDsToSubqlDs(networkConverter.dsConverter, subgraphManifest.dataSources),\n    description: subgraphManifest.description,\n    schema: subgraphManifest.schema,\n    repository: '',\n    templates: subgraphManifest.templates\n      ? subgraphTemplateToSubqlTemplate(networkConverter.templateConverter, subgraphManifest.templates)\n      : undefined,\n  };\n}\n\nexport function subgraphTemplateToSubqlTemplate(\n  convertFunction: TemplateConvertFunction,\n  subgraphTemplates: SubgraphTemplate[]\n): TemplateKind[] {\n  return subgraphTemplates.map((t) => convertFunction(t));\n}\n\nexport function subgraphDsToSubqlDs(\n  convertFunction: DsConvertFunction,\n  subgraphDs: SubgraphDataSource[]\n): MigrateDatasourceKind[] {\n  return subgraphDs.map((ds) => convertFunction(ds));\n}\n"]}