{"version":3,"file":"migrate-manifest.controller.spec.js","sourceRoot":"","sources":["../../../../src/controller/migrate/manifest/migrate-manifest.controller.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport path from 'path';\nimport {NETWORK_FAMILY} from '@subql/common';\nimport {EthereumDatasourceKind} from '@subql/types-ethereum';\nimport {networkConverters} from '../constants';\nimport {SubgraphProject} from '../types';\nimport {\n  extractNetworkFromManifest,\n  readSubgraphManifest,\n  subgraphDsToSubqlDs,\n  subgraphTemplateToSubqlTemplate,\n} from './migrate-manifest.controller';\n\nconst testProjectPath = '../../../../test/migrate/testProject';\n\ndescribe('migrate manifest controller', () => {\n  let subgraph: SubgraphProject;\n\n  beforeEach(() => {\n    subgraph = readSubgraphManifest(path.join(__dirname, testProjectPath, 'subgraph.yaml'), 'mockSubgraphPath');\n  });\n\n  it(`readSubgraphManifest from a given subgraph.yaml`, () => {\n    expect(subgraph.schema).toStrictEqual({file: './schema.graphql'});\n  });\n\n  it(`subgraphDsToSubqlDs`, () => {\n    const networkConverter = networkConverters[NETWORK_FAMILY.ethereum]!;\n    expect(subgraphDsToSubqlDs(networkConverter.dsConverter, subgraph.dataSources)[0].startBlock).toBe(7844214);\n    expect(subgraphDsToSubqlDs(networkConverter.dsConverter, subgraph.dataSources)[0].kind).toBe(\n      EthereumDatasourceKind.Runtime\n    );\n    expect(subgraphDsToSubqlDs(networkConverter.dsConverter, subgraph.dataSources)[0].endBlock).toBeUndefined();\n  });\n\n  it(`subgraphTemplateToSubqlTemplate`, () => {\n    const networkConverter = networkConverters[NETWORK_FAMILY.ethereum]!;\n\n    const testTemplateDataSource = subgraph.dataSources;\n    delete (testTemplateDataSource[0].source as any).address;\n    delete (testTemplateDataSource[0].source as any).startBlock;\n    expect(subgraphTemplateToSubqlTemplate(networkConverter.templateConverter, testTemplateDataSource)[0].name).toBe(\n      'Poap'\n    );\n  });\n\n  it(`extractNetworkFromManifest, should extract network info, throw if network not same`, () => {\n    const chainInfo = extractNetworkFromManifest(subgraph);\n    expect(chainInfo).toStrictEqual({networkFamily: NETWORK_FAMILY.ethereum, chainId: '1'});\n\n    const mockPloygonDs = {...subgraph.dataSources[0]};\n    mockPloygonDs.network = 'polygon';\n    subgraph.dataSources.push(mockPloygonDs);\n    expect(() => extractNetworkFromManifest(subgraph)).toThrow(\n      `All network values in subgraph Networks should be the same. Got mainnet,polygon`\n    );\n  });\n\n  it(`extractNetworkFromManifest, should throw if can not determine network family from ds`, () => {\n    delete (subgraph.dataSources[0] as any).kind;\n    expect(() => extractNetworkFromManifest(subgraph)).toThrow(`Subgraph dataSource kind or network not been found`);\n  });\n});\n"]}