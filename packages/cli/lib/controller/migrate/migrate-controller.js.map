{"version":3,"file":"migrate-controller.js","sourceRoot":"","sources":["../../../src/controller/migrate/migrate-controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport assert from 'assert';\nimport fs from 'fs';\nimport path from 'path';\nimport {NETWORK_FAMILY} from '@subql/common';\nimport {cloneProjectTemplate, fetchExampleProjects} from '../init-controller';\nimport {graphNetworkNameChainId} from './constants';\nimport {ChainInfo, SubgraphProject} from './types';\n\n/**\n *\n * @param input is github link or ssh, or bitbucket link\n * return undefined if link not match any\n */\nconst githubLinkRegex = /^https:\\/\\/github\\.com\\/(?<domain>[^/]+)\\/(?<repository>[^/]+)(?:\\/tree\\/(?<branch>[^/]+))?/;\nconst bitbucketLinkRegex =\n  /^https:\\/\\/(?:[^/]+@)?bitbucket\\.org\\/(?<domain>[^/]+)\\/(?<repository>[^/]+)(?:\\/src\\/(?<branch>[^/]+))?/;\nconst sshRegex = /^git@(?:bitbucket\\.org|github\\.com):[^/]+\\/(?<repository>[^/]+)\\.git$/;\n\nexport function extractGitInfo(input: string): {link: string; branch?: string} | undefined {\n  const gitLinkMatch = input.match(githubLinkRegex);\n  const bitBucketLinkMatch = input.match(bitbucketLinkRegex);\n  const sshMatch = input.match(sshRegex);\n  if (!gitLinkMatch && !sshMatch && !bitBucketLinkMatch) {\n    return undefined;\n  }\n  const {branch, domain, repository} = gitLinkMatch?.groups || bitBucketLinkMatch?.groups || {};\n  const link = sshMatch\n    ? input\n    : `https:${\n        gitLinkMatch ? `//github.com` : bitBucketLinkMatch ? `//bitbucket.org` : undefined\n      }/${domain}/${repository}`;\n  return {link, branch};\n}\n\n// improve project info from the graph package json\nexport function improveProjectInfo(subgraphDir: string, subgraphManifest: SubgraphProject): void {\n  const packageData = fs.readFileSync(`${subgraphDir}/package.json`);\n  const thegraphPackage = JSON.parse(packageData.toString());\n  subgraphManifest.name = thegraphPackage.name.replace('subgraph', 'subquery');\n  subgraphManifest.author = thegraphPackage.author;\n  subgraphManifest.description = subgraphManifest.description ?? thegraphPackage.description;\n  subgraphManifest.repository = '';\n}\n\n// Pull a network starter, as base project. Then mapping, manifest, schema can be overridden, copy over abi files\nexport async function prepareProject(chainInfo: ChainInfo, subqlDir: string): Promise<void> {\n  const exampleProjects = await fetchExampleProjects(\n    networkFamilyToTemplateNetwork(chainInfo.networkFamily),\n    chainInfo.chainId\n  );\n  const templateProject = exampleProjects.find((p) => p.name.includes('-starter'));\n  if (!templateProject) {\n    throw new Error(\n      `Could not find subquery template for network ${chainInfo.networkFamily} chain ${chainInfo.chainId}`\n    );\n  }\n  await cloneProjectTemplate(path.parse(subqlDir).dir, path.parse(subqlDir).name, templateProject);\n}\n//TODO, this might can be dynamic\nexport function getChainIdByNetworkName(networkFamily: NETWORK_FAMILY, chainName: string): string {\n  const chainId = graphNetworkNameChainId[networkFamily]?.[chainName];\n  if (!chainId) {\n    throw new Error(`Could not find chainId for network ${networkFamily} chain ${chainName}`);\n  }\n  return chainId;\n}\n\nfunction networkFamilyToTemplateNetwork(networkFamily: NETWORK_FAMILY): string {\n  switch (networkFamily) {\n    case NETWORK_FAMILY.ethereum:\n      return 'evm';\n    default:\n      // like polkadot/algorand\n      return networkFamily.toLowerCase();\n  }\n}\n"]}