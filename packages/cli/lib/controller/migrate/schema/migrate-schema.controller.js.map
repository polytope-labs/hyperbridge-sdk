{"version":3,"file":"migrate-schema.controller.js","sourceRoot":"","sources":["../../../../src/controller/migrate/schema/migrate-schema.controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport fs from 'fs';\nimport {\n  Source,\n  parse,\n  print,\n  TypeNode,\n  NamedTypeNode,\n  Kind,\n  StringValueNode,\n  ValueNode,\n  ObjectValueNode,\n  ObjectTypeDefinitionNode,\n  DefinitionNode,\n  DirectiveNode,\n  ListValueNode,\n  FieldDefinitionNode,\n} from 'graphql';\n\n// Extra schema definitions used by the graph\n// const subgraphScalars = gql`\n//   scalar Int8\n//   scalar Timestamp\n// `;\n\n// const subgraphDirectives = gql`\n//   type FulltextInclude {\n//     name: String!\n//   }\n\n//   directive @fulltext(name: String!, language: String!, algorithm: String!, include: [FulltextInclude!]!) on OBJECT\n// `;\n\nexport async function migrateSchema(subgraphSchemaPath: string, subqlSchemaPath: string): Promise<void> {\n  await fs.promises.rm(subqlSchemaPath, {force: true});\n\n  const file = await fs.promises.readFile(subgraphSchemaPath);\n  const output = migrateSchemaFromString(file.toString('utf8'));\n  await fs.promises.writeFile(subqlSchemaPath, output);\n  console.log(\n    `* schema.graphql has been migrated. If there are any issues see our documentation for more details https://academy.subquery.network/build/graphql.html`\n  );\n}\n\n// This is the scalars available to Subquery projects.\nconst subqlScalars = new Set(['String', 'Int', 'Boolean', 'ID', 'Date', 'Bytes', 'Float', 'BigInt', 'BigDecimal']);\n\nexport function migrateSchemaFromString(input: string): string {\n  const src = new Source(input);\n  const doc = parse(src);\n\n  const updated = doc.definitions\n    .filter((definition) => {\n      if (isObjectType(definition)) {\n        const aggregationDirective = definition.directives?.find((d) => d.name.value === 'aggregation');\n        if (aggregationDirective) {\n          console.warn(`The Aggregation directive is not supported. type=\"${definition.name.value}\" has been removed`);\n          return false;\n        }\n      }\n\n      return true;\n    })\n    .map((definition) => {\n      if (isObjectType(definition)) {\n        // Convert fulltext search directives\n        if (definition.name.value === '_Schema_') {\n          definition.directives?.forEach((directive) => {\n            convertFulltextDirective(directive, doc.definitions);\n          });\n          // No mutations to the global schema\n          return definition;\n        }\n\n        // Map field types to known types\n        (definition as any).fields = definition.fields?.map((field) => {\n          modifyTypeNode(field.type, (type) => {\n            // SubQuery only supports ID type for id\n            if (field.name.value === 'id') {\n              (type.name as any).value = 'ID';\n            }\n            if (type.name.value === 'Int8') {\n              (type.name as any).value = 'Int';\n            }\n            if (type.name.value === 'Timestamp') {\n              (type.name as any).value = 'Date';\n            }\n            // Follow type difference in here https://academy.subquery.network/indexer/build/graph-migration.html#differences-in-the-graphql-schema\n            if (type.name.value === 'BigDecimal') {\n              (type.name as any).value = 'Float';\n            }\n            if (type.name.value === 'Bytes') {\n              (type.name as any).value = 'String';\n            }\n            convertRelations(doc.definitions, definition, field, type);\n\n            return type;\n          });\n\n          return field;\n        });\n\n        // Remove unsupported arguments from entity directive\n        const entityDirective = definition.directives?.find((d) => d.name.value === 'entity');\n        if (!entityDirective) throw new Error('Object is missing entity directive');\n\n        (entityDirective.arguments as any) = entityDirective.arguments?.filter((arg) => {\n          if (arg.name.value === 'immutable') {\n            console.warn(`Immutable option is not supported. Removing from entity=\"${definition.name.value}\"`);\n            return false;\n          }\n          if (arg.name.value === 'timeseries') {\n            console.warn(`Timeseries option is not supported. Removing from entity=\"${definition.name.value}\"`);\n            return false;\n          }\n          return true;\n        });\n      }\n\n      return definition;\n    })\n    // Remove the _Schema_ type\n    .filter((def) => !(isObjectType(def) && def.name.value === '_Schema_'));\n\n  return print({...doc, definitions: updated});\n}\n\nfunction convertFulltextDirective(directive: DirectiveNode, definitions: readonly DefinitionNode[]) {\n  if (directive.name.value !== 'fulltext') return;\n  // TODO should add runtime check for StringValueNode\n  const name = (directive.arguments?.find((arg) => arg.name.value === 'name')?.value as StringValueNode)?.value;\n\n  const includeOpt = directive.arguments?.find((arg) => arg.name.value === 'include');\n  if (!includeOpt) throw new Error(\"Expected fulltext directive to have an 'include' argument\");\n  if (includeOpt.value.kind !== Kind.LIST) throw new Error('Expected include argument to be a list');\n  if (includeOpt.value.values.length !== 1) {\n    throw new Error(`SubQuery only supports fulltext search on a single entity. name=${name}`);\n  }\n\n  const includeParams = includeOpt.value.values[0];\n\n  // Get the entity name\n  if (!isObjectValueNode(includeParams)) throw new Error(`Expected object value, received ${includeParams.kind}`);\n  const entityName = includeParams.fields.find((f) => f.name.value === 'entity')?.value;\n  if (!entityName || !isStringValueNode(entityName)) throw new Error('Entity name is invalid');\n\n  // Get the entity fields\n  const fields = includeParams.fields.find((f) => f.name.value === 'fields')?.value;\n  if (!fields) throw new Error('Unable to find fields for fulltext search');\n  if (!isListValueNode(fields)) throw new Error('Expected fields to be a list');\n  const fieldNames = fields.values.map((field) => {\n    if (!isObjectValueNode(field)) throw new Error('Field is invalid');\n\n    const nameField = field.fields.find((f) => f.name.value === 'name');\n    if (!nameField) throw new Error('Fields field is missing name');\n    return nameField.value;\n  });\n  if (!fieldNames.length) throw new Error('Fulltext search requires at least one field');\n\n  // Find the entity to add the directive\n  const entity = findEntity(definitions, entityName.value);\n  if (!entity) throw new Error(`Unable to find entity ${entityName.value} for fulltext search`);\n\n  // Add the fulltext directive to the entity\n  (entity.directives as any) ??= [];\n  (entity.directives as any).push(makeFulltextDirective(fieldNames.map((f) => (f as any).value)));\n}\n\n// Some relations are handled differently to the Graph, add the necessary directive here\nfunction convertRelations(\n  definitions: readonly DefinitionNode[],\n  definition: ObjectTypeDefinitionNode,\n  field: FieldDefinitionNode,\n  type: NamedTypeNode\n) {\n  // This scalars check is a best effort to find types that are relations\n  if (!subqlScalars.has(type.name.value)) {\n    if (!field.directives?.find((d) => d.name.value === 'derivedFrom') && isListType(field.type)) {\n      // Find the referenced entity\n      const entity = findEntity(definitions, type.name.value);\n      if (!entity) {\n        throw new Error(`Cannot find entity referenced by field ${field.name.value} on type ${definition.name.value}`);\n      }\n\n      // Only care if its an entity. i.e. not a JSON type\n      if (entity.directives?.find((d) => d.name.value === 'entity')) {\n        // Try to find a field with the same name as the type\n        let name = '';\n        const matches = entity.fields?.filter((field) => isFieldOfType(field.type, definition.name.value));\n\n        if (matches?.length === 1) {\n          name = matches?.[0]?.name.value;\n        } else {\n          if (!matches?.length) {\n            console.warn(\n              `Unable to find a lookup on ${entity.name.value} for \"${definition.name.value}.${field.name.value}\". You will need to manually set the \"field\" property`\n            );\n          } else {\n            console.warn(\n              `Found multiple matches of ${entity.name.value} for \"${definition.name.value}.${field.name.value}\". You will need to manually set the \"field\" property`\n            );\n          }\n          name = '<replace-me>';\n        }\n\n        // Add the necessary directive\n        (field.directives as any) ??= [];\n        (field.directives as any).push(makeDerivedFromDirective(name));\n      }\n    }\n  }\n}\n\n// Drills down to the inner type and runs the modFn on it, this runs in place\nfunction modifyTypeNode(type: TypeNode, modFn: (innerType: NamedTypeNode) => NamedTypeNode): TypeNode {\n  if (type.kind === Kind.NON_NULL_TYPE || type.kind === Kind.LIST_TYPE) {\n    return modifyTypeNode(type.type, modFn);\n  }\n  return modFn(type);\n}\n\nfunction isListType(type: TypeNode): boolean {\n  if (type.kind === Kind.LIST_TYPE) {\n    return true;\n  }\n\n  if (type.kind === Kind.NON_NULL_TYPE) {\n    return isListType(type.type);\n  }\n\n  return false;\n}\n\n// Finds the underlying type ignoring nullability\nfunction isFieldOfType(type: TypeNode, desired: string): boolean {\n  if (type.kind === Kind.NON_NULL_TYPE) {\n    return isFieldOfType(type.type, desired);\n  }\n  return type.kind !== Kind.LIST_TYPE && type.name.value === desired;\n}\n\nfunction findEntity(definitions: readonly DefinitionNode[], name: string): ObjectTypeDefinitionNode | undefined {\n  // Cast can be removed with newver version of typescript\n  return definitions.find((def) => isObjectType(def) && def.name.value === name) as\n    | ObjectTypeDefinitionNode\n    | undefined;\n}\n\nfunction makeFulltextDirective(fields: string[], language = 'english'): DirectiveNode {\n  return {\n    kind: Kind.DIRECTIVE,\n    name: {\n      kind: Kind.NAME,\n      value: 'fullText',\n    },\n    arguments: [\n      {\n        kind: Kind.ARGUMENT,\n        name: {\n          kind: Kind.NAME,\n          value: 'fields',\n        },\n        value: {\n          kind: Kind.LIST,\n          values: fields.map((field) => ({\n            kind: Kind.STRING,\n            value: field,\n          })),\n        },\n      },\n      {\n        kind: Kind.ARGUMENT,\n        name: {\n          kind: Kind.NAME,\n          value: 'language',\n        },\n        value: {\n          kind: Kind.STRING,\n          value: language,\n        },\n      },\n    ],\n  } satisfies DirectiveNode;\n}\n\nfunction makeDerivedFromDirective(field: string): DirectiveNode {\n  return {\n    kind: Kind.DIRECTIVE,\n    name: {\n      kind: Kind.NAME,\n      value: 'derivedFrom',\n    },\n    arguments: [\n      {\n        kind: Kind.ARGUMENT,\n        name: {\n          kind: Kind.NAME,\n          value: 'field',\n        },\n        value: {\n          kind: Kind.STRING,\n          value: field,\n        },\n      },\n    ],\n  } satisfies DirectiveNode;\n}\n\nfunction isObjectType(node: DefinitionNode): node is ObjectTypeDefinitionNode {\n  return node.kind === Kind.OBJECT_TYPE_DEFINITION;\n}\n\nfunction isObjectValueNode(node: ValueNode): node is ObjectValueNode {\n  return node.kind === Kind.OBJECT;\n}\n\nfunction isListValueNode(node: ValueNode): node is ListValueNode {\n  return node.kind === Kind.LIST;\n}\n\nfunction isStringValueNode(node: ValueNode): node is StringValueNode {\n  return node.kind === Kind.STRING;\n}\n"]}