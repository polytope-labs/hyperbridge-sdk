{"version":3,"file":"publish-controller.js","sourceRoot":"","sources":["../../src/controller/publish-controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport assert from 'assert';\nimport fs from 'fs';\nimport path from 'path';\nimport {\n  ReaderFactory,\n  IPFS_WRITE_ENDPOINT,\n  isFileReference,\n  validateCommonProjectManifest,\n  mapToObject,\n  getProjectNetwork,\n  IPFSHTTPClientLite,\n} from '@subql/common';\nimport {Reader} from '@subql/types-core';\nimport {loadDependency} from '../modulars';\n\nconst PIN_SERVICE = 'onfinality';\n\nexport async function createIPFSFile(root: string, manifest: string, cid: string): Promise<void> {\n  const {name} = path.parse(manifest);\n  const MANIFEST_FILE = path.join(root, `.${name}-cid`);\n  try {\n    await fs.promises.writeFile(MANIFEST_FILE, cid, 'utf8');\n  } catch (e) {\n    throw new Error(`Failed to create CID file: ${e}`);\n  }\n}\n\nexport async function uploadToIpfs(\n  projectPaths: string[],\n  authToken: string,\n  multichainProjectPath?: string,\n  ipfsEndpoint?: string,\n  directory?: string\n): Promise<Map<string, string>> {\n  const projectToReader: Record<string, Reader> = {};\n\n  await Promise.all(\n    projectPaths.map(async (projectPath) => {\n      const reader = await ReaderFactory.create(projectPath);\n      projectToReader[projectPath] = reader;\n    })\n  );\n\n  const contents: {path: string; content: string}[] = [];\n\n  let ipfs: IPFSHTTPClientLite | undefined;\n  if (ipfsEndpoint) {\n    ipfs = new IPFSHTTPClientLite({url: ipfsEndpoint});\n  }\n\n  for (const project in projectToReader) {\n    const reader = projectToReader[project];\n    const schema = await reader.getProjectSchema();\n\n    validateCommonProjectManifest(schema);\n\n    const networkFamily = getProjectNetwork(schema);\n    const module = loadDependency(networkFamily);\n    assert(module, `Failed to load module for network ${networkFamily}`);\n\n    let manifest;\n\n    try {\n      manifest = module.parseProjectManifest(schema).asImpl;\n    } catch (e) {\n      throw new Error(`Failed to parse project manifest for network ${networkFamily}`, {cause: e});\n    }\n\n    if (manifest === null) {\n      throw new Error('Unable to parse project manifest');\n    }\n\n    assert(reader.root, 'Reader root is not set');\n    // the JSON object conversion must occur on manifest.deployment\n    const deployment = await replaceFileReferences(reader.root, manifest.deployment, authToken, ipfs);\n\n    // Use JSON.* to convert Map to Object\n    contents.push({\n      path: path.join(directory ?? '', path.basename(project)),\n      content: deployment.toYaml(),\n    });\n  }\n\n  if (multichainProjectPath) {\n    const content = fs.readFileSync(multichainProjectPath);\n    contents.push({\n      path: path.join(directory ?? '', path.basename(multichainProjectPath)),\n      content: content.toString(),\n    });\n  }\n\n  // Upload schema\n  return uploadFiles(contents, authToken, multichainProjectPath !== undefined, ipfs);\n}\n\n/* Recursively finds all FileReferences in an object and replaces the files with IPFS references */\nasync function replaceFileReferences<T extends Record<string, any>>(\n  projectDir: string,\n  input: T,\n  authToken: string,\n  ipfs?: IPFSHTTPClientLite\n): Promise<T> {\n  if (Array.isArray(input)) {\n    return (await Promise.all(\n      input.map((val) => replaceFileReferences(projectDir, val, authToken, ipfs))\n    )) as unknown as T;\n  } else if (typeof input === 'object' && input !== null) {\n    if (input instanceof Map) {\n      input = mapToObject(input) as T;\n    }\n    if (isFileReference(input)) {\n      const filePath = path.resolve(projectDir, input.file);\n      const content = fs.readFileSync(path.resolve(projectDir, input.file));\n      input.file = await uploadFile({content: content.toString(), path: filePath}, authToken, ipfs).then(\n        (cid) => `ipfs://${cid}`\n      );\n    }\n    const keys = Object.keys(input).filter((key) => key !== '_deployment') as unknown as (keyof T)[];\n    await Promise.all(\n      keys.map(async (key) => {\n        // this is the loop\n        input[key] = await replaceFileReferences(projectDir, input[key], authToken, ipfs);\n      })\n    );\n  }\n\n  return input;\n}\n\nconst fileMap = new Map<string | fs.ReadStream, Promise<string>>();\n\nexport async function uploadFiles(\n  contents: {path: string; content: string}[],\n  authToken: string,\n  isMultichain?: boolean,\n  ipfs?: IPFSHTTPClientLite\n): Promise<Map<string, string>> {\n  const fileCidMap: Map<string, string> = new Map();\n\n  if (ipfs) {\n    try {\n      const results = await ipfs.addAll(contents, {wrapWithDirectory: isMultichain});\n\n      for (const result of results) {\n        fileCidMap.set(result.path, result.cid.toString());\n      }\n    } catch (e) {\n      throw new Error(`Publish project to provided IPFS gateway failed`, {cause: e});\n    }\n  }\n\n  const ipfsWrite = new IPFSHTTPClientLite({\n    url: IPFS_WRITE_ENDPOINT,\n    headers: {Authorization: `Bearer ${authToken}`},\n  });\n\n  try {\n    const results = await ipfsWrite.addAll(contents, {pin: true, cidVersion: 0, wrapWithDirectory: isMultichain});\n    for (const result of results) {\n      fileCidMap.set(result.path, result.cid);\n\n      await ipfsWrite.pinRemoteAdd(result.cid, {service: PIN_SERVICE}).catch((e) => {\n        console.warn(\n          `Failed to pin file ${result.path}. There might be problems with this file being accessible later. ${e}`\n        );\n      });\n    }\n  } catch (e) {\n    throw new Error(`Publish project files to IPFS failed`, {cause: e});\n  }\n\n  return fileCidMap;\n}\n\nexport async function uploadFile(\n  contents: {path: string; content: string},\n  authToken: string,\n  ipfs?: IPFSHTTPClientLite\n): Promise<string> {\n  const pathPromise = fileMap.get(contents.path);\n  if (pathPromise !== undefined) {\n    return pathPromise;\n  }\n\n  let pendingClientCid: Promise<string> = Promise.resolve('');\n  if (ipfs) {\n    pendingClientCid = ipfs\n      .add(contents.content, {pin: true, cidVersion: 0})\n      .then((result) => result.cid.toString())\n      .catch((e) => {\n        throw new Error(`Publish file to provided IPFS failed`, {cause: e});\n      });\n  }\n\n  const ipfsWrite = new IPFSHTTPClientLite({\n    url: IPFS_WRITE_ENDPOINT,\n    headers: {Authorization: `Bearer ${authToken}`},\n  });\n\n  const pendingCid = ipfsWrite\n    .add(contents.content, {pin: true, cidVersion: 0})\n    .then((result) => result.cid)\n    .then(async (cid) => {\n      try {\n        await ipfsWrite.pinRemoteAdd(cid, {service: PIN_SERVICE});\n        return cid.toString();\n      } catch (e) {\n        console.warn(\n          `Failed to pin file ${contents.path}. There might be problems with this file being accessible later. ${e}`\n        );\n        return cid.toString();\n      }\n    })\n    .catch((e) => {\n      throw new Error(`Publish project to default IPFS failed`, {cause: e});\n    });\n\n  fileMap.set(contents.path, pendingCid);\n\n  const [cid, clientCid] = await Promise.all([pendingCid, pendingClientCid]);\n\n  if (clientCid && clientCid !== cid) {\n    throw new Error(`Published and received IPFS cid not identical \\n,\n    Client IPFS: ${clientCid}, IPFS: ${cid}`);\n  }\n\n  return cid;\n}\n\nexport function getDirectoryCid(fileToCidMap: Map<string, string>): string | undefined {\n  const directoryCid = fileToCidMap.get('');\n  return directoryCid;\n}\n"]}