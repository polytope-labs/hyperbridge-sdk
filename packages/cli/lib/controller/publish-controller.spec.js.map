{"version":3,"file":"publish-controller.spec.js","sourceRoot":"","sources":["../../src/controller/publish-controller.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {mapToObject, ReaderFactory, toJsonObject} from '@subql/common';\nimport {parseProjectManifest} from '@subql/common-substrate';\nimport {rimraf} from 'rimraf';\nimport {createMultiChainTestProject, createTestProject} from '../createProject.fixtures';\nimport {getDirectoryCid, uploadToIpfs} from './publish-controller';\n\n// Replace/Update your access token when test locally\nconst testAuth = process.env.SUBQL_ACCESS_TOKEN_TEST!;\n\njest.setTimeout(300_000); // 300s\ndescribe('Cli publish', () => {\n  let projectDir: string;\n  let multiChainProjectDir: string;\n  let fullPaths: string[];\n  beforeAll(async () => {\n    const res = await Promise.all([createTestProject(), createMultiChainTestProject()]);\n    projectDir = res[0];\n    multiChainProjectDir = res[1].multichainManifestPath;\n    fullPaths = res[1].fullPaths;\n  });\n\n  afterAll(async () => {\n    try {\n      if (!projectDir) return;\n      await rimraf(projectDir);\n    } catch (e) {\n      console.warn('Failed to clean up tmp dir after test', e);\n    }\n  });\n\n  it('should upload appropriate project to IPFS', async () => {\n    const cid = await uploadToIpfs([projectDir], testAuth);\n    expect(cid).toBeDefined();\n  });\n\n  it('convert to deployment and removed descriptive field', async () => {\n    const reader = await ReaderFactory.create(projectDir);\n    const manifest = parseProjectManifest(await reader.getProjectSchema());\n    const deployment = manifest.toDeployment();\n    expect(deployment).not.toContain('author');\n    expect(deployment).not.toContain('endpoint');\n    expect(deployment).not.toContain('dictionary');\n    expect(deployment).not.toContain('description');\n    expect(deployment).not.toContain('repository');\n\n    expect(deployment).toContain('chainId');\n    expect(deployment).toContain('specVersion');\n    expect(deployment).toContain('dataSources');\n  });\n\n  it('convert js object to JSON object', () => {\n    const mockMap = new Map<number | string, string>([\n      [1, 'aaa'],\n      ['2', 'bbb'],\n    ]);\n    expect(toJsonObject({map: mockMap, obj: {abc: 111}})).toStrictEqual({\n      map: {'1': 'aaa', '2': 'bbb'},\n      obj: {abc: 111},\n    });\n    expect(mapToObject(mockMap)).toStrictEqual({'1': 'aaa', '2': 'bbb'});\n  });\n\n  it('Get directory CID from multi-chain project', async () => {\n    const cidMap = await uploadToIpfs(fullPaths, testAuth, multiChainProjectDir);\n    const directoryCid = getDirectoryCid(cidMap);\n    expect(directoryCid).toBeDefined();\n  });\n});\n"]}