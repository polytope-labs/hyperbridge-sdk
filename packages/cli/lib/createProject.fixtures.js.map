{"version":3,"file":"createProject.fixtures.js","sourceRoot":"","sources":["../src/createProject.fixtures.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport assert from 'assert';\nimport childProcess from 'child_process';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport {getMultichainManifestPath, getProjectRootAndManifest} from '@subql/common';\nimport fetch from 'cross-fetch';\nimport Build from './commands/build';\nimport Codegen from './commands/codegen';\nimport {cloneProjectTemplate, ExampleProjectInterface, prepare} from './controller/init-controller';\nimport {ProjectSpecV1_0_0} from './types';\n\nconst projectSpecV1_0_0: ProjectSpecV1_0_0 = {\n  name: 'mocked_starter',\n  chainId: '0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3',\n  endpoint: 'wss://rpc.polkadot.io/public-ws',\n  author: 'jay',\n  description: 'this is test for init controller',\n  runner: {\n    node: {\n      name: '@subql/node',\n      version: '>=1.0.0',\n    },\n    query: {\n      name: '@subql/query',\n      version: '*',\n    },\n  },\n};\n\nconst multiProjectSpecV1_0_0: ProjectSpecV1_0_0 = {\n  name: 'multi_mocked_starter',\n  chainId: '0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3',\n  endpoint: 'https://arbitrum.llamarpc.com',\n  author: 'jay',\n  description: 'this is test for init controller',\n  runner: {\n    node: {\n      name: '@subql/node-ethereum',\n      version: '>=3.0.0',\n    },\n    query: {\n      name: '@subql/query',\n      version: '*',\n    },\n  },\n};\n\nasync function getExampleProject(networkFamily: string, network: string): Promise<ExampleProjectInterface> {\n  const res = await fetch('https://raw.githubusercontent.com/subquery/templates/main/dist/output.json');\n\n  if (!res.ok) {\n    throw new Error('Failed to get template');\n  }\n\n  const templates = (await res.json()) as {\n    code: string;\n    networks: {code: string; examples: ExampleProjectInterface[]}[];\n  }[];\n  const template = templates\n    .find((t) => t.code === networkFamily)\n    ?.networks.find((n) => n.code === network)\n    ?.examples.find((e) => e.remote === 'https://github.com/subquery/subql-starter');\n  assert(template, 'Failed to get template');\n  return template;\n}\n\nexport async function createTestProject(): Promise<string> {\n  const tmpdir = await fs.promises.mkdtemp(`${os.tmpdir()}${path.sep}`);\n  const projectDir = path.join(tmpdir, projectSpecV1_0_0.name);\n\n  const exampleProject = await getExampleProject('polkadot', 'polkadot');\n\n  const projectPath = await cloneProjectTemplate(tmpdir, projectSpecV1_0_0.name, exampleProject);\n  await prepare(projectPath, projectSpecV1_0_0);\n\n  // Install dependencies\n  childProcess.execSync(`npm i`, {cwd: projectDir});\n  // Set test env to be develop mode, only limit to test\n  process.env.NODE_ENV = 'develop';\n\n  await Codegen.run(['-f', projectDir]);\n  await Build.run(['-f', projectDir]);\n\n  return projectDir;\n}\n\nexport async function createMultiChainTestProject(): Promise<{multichainManifestPath: string; fullPaths: string[]}> {\n  const tmpdir = await fs.promises.mkdtemp(`${os.tmpdir()}${path.sep}`);\n  const projectDir = path.join(tmpdir, multiProjectSpecV1_0_0.name);\n\n  const exampleProject = await getExampleProject('multi', 'multi');\n\n  await cloneProjectTemplate(tmpdir, multiProjectSpecV1_0_0.name, exampleProject);\n\n  // Install dependencies\n  childProcess.execSync(`npm i`, {cwd: projectDir});\n  // Set test env to be develop mode, only limit to test\n  process.env.NODE_ENV = 'develop';\n\n  await Codegen.run(['-f', projectDir]);\n  await Build.run(['-f', projectDir]);\n\n  const project = getProjectRootAndManifest(projectDir);\n  const fullPaths = project.manifests.map((manifest) => path.join(project.root, manifest));\n  let multichainManifestPath = getMultichainManifestPath(projectDir);\n  if (!multichainManifestPath) {\n    throw new Error(\n      'Selected project is not multi-chain. Please set correct file.\\n\\n https://academy.subquery.network/build/multi-chain.html'\n    );\n  }\n\n  multichainManifestPath = path.join(project.root, multichainManifestPath);\n  return {multichainManifestPath, fullPaths};\n}\n"]}