{"version":3,"file":"moduleLoader.js","sourceRoot":"","sources":["../../src/modulars/moduleLoader.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,mCAAmC;;AAUnC,wCAsCC;;AA9CD,2BAA8B;AAC9B,wDAAwB;AAExB,qCAAyC;AAGzC,MAAM,WAAW,GAAyB,EAAE,CAAC;AAE7C,SAAgB,cAAc,CAA2B,OAAU;IACjE,MAAM,WAAW,GAAG,wBAAe,CAAC,OAAO,CAAC,CAAC;IAC7C,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,oBAAoB,OAAO,EAAE,CAAC,CAAC;IACjD,CAAC;IACD,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC;QAC1B,IAAI,CAAC;YACH,WAAW,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,WAAW,CAAmB,CAAC;QAChE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,oBAAoB,WAAW,aAAa,KAAK,oCAAoC,CAAC,CAAC;YACpG,IAAI,CAAC;gBACH,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;gBAC7C,IAAI,CAAC,cAAc,EAAE,CAAC;oBACpB,MAAM,IAAI,KAAK,CACb,yBAAyB,WAAW,qKAAqK,CAC1M,CAAC;gBACJ,CAAC;gBACD,MAAM,gBAAgB,GAAG,cAAI,CAAC,IAAI,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;gBAChE,IAAI,IAAA,eAAU,EAAC,gBAAgB,CAAC,EAAE,CAAC;oBACjC,WAAW,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,gBAAgB,CAAmB,CAAC;gBACrE,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,KAAK,CAAC,iBAAiB,WAAW,oCAAoC,WAAW,aAAa,CAAC,CAAC;gBAC5G,CAAC;YACH,CAAC;YAAC,OAAO,WAAW,EAAE,CAAC;gBACrB,MAAM,IAAI,KAAK,CAAC,yCAAyC,WAAW,EAAE,EAAE,EAAC,KAAK,EAAE,WAAW,EAAC,CAAC,CAAC;YAChG,CAAC;QACH,CAAC;IACH,CAAC;IACD,2DAA2D;IAC3D,MAAM,YAAY,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;IAC1C,IACE,YAAY,EAAE,oBAAoB,KAAK,SAAS;QAChD,YAAY,EAAE,UAAU,KAAK,SAAS;QACtC,YAAY,EAAE,WAAW,KAAK,SAAS,EACvC,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,GAAG,WAAW,uEAAuE,CAAC,CAAC;IACzG,CAAC;IACD,OAAO,YAAY,CAAC;AACtB,CAAC","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {existsSync} from 'fs';\nimport path from 'path';\nimport {NETWORK_FAMILY} from '@subql/common';\nimport {networkPackages} from './config';\nimport {ModuleCache} from './types';\n\nconst moduleCache: Partial<ModuleCache> = {};\n\nexport function loadDependency<N extends NETWORK_FAMILY>(network: N): ModuleCache[N] {\n  const packageName = networkPackages[network];\n  if (!packageName) {\n    throw new Error(`Unknown network: ${network}`);\n  }\n  if (!moduleCache[network]) {\n    try {\n      moduleCache[network] = require(packageName) as ModuleCache[N];\n    } catch (error) {\n      console.warn(`! Failed to load ${packageName} locally: ${error}. \\n ! Attempting to load globally`);\n      try {\n        const globalNodePath = process.env.NODE_PATH;\n        if (!globalNodePath) {\n          throw new Error(\n            `If you have installed ${packageName} globally please set the NODE_PATH environment variable. Follow this document for more details: https://nodejs.org/api/modules.html#loading-from-the-global-folders`\n          );\n        }\n        const globalModulePath = path.join(globalNodePath, packageName);\n        if (existsSync(globalModulePath)) {\n          moduleCache[network] = require(globalModulePath) as ModuleCache[N];\n        } else {\n          throw new Error(`Global module ${packageName} not found, please run \"npm i -g ${packageName}\" and retry`);\n        }\n      } catch (globalError) {\n        throw new Error(`! Failed to load dependency globally: ${packageName}`, {cause: globalError});\n      }\n    }\n  }\n  // Check dependencies actually satisfy INetworkCommonModule\n  const loadedModule = moduleCache[network];\n  if (\n    loadedModule?.parseProjectManifest === undefined ||\n    loadedModule?.isCustomDs === undefined ||\n    loadedModule?.isRuntimeDs === undefined\n  ) {\n    throw new Error(`${packageName} is not compatible, please make sure package update to latest version`);\n  }\n  return loadedModule;\n}\n"]}