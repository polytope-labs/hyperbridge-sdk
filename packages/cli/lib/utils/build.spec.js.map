{"version":3,"file":"build.spec.js","sourceRoot":"","sources":["../../src/utils/build.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport {existsSync, readFileSync, writeFileSync} from 'fs';\nimport path from 'path';\nimport {MultichainProjectManifest} from '@subql/types-core';\nimport * as yaml from 'js-yaml';\nimport {rimraf} from 'rimraf';\nimport {buildManifestFromLocation} from './build';\n\ndescribe('Manifest generation', () => {\n  afterEach(() => {\n    const projectPath = path.join(__dirname, '../../test/tsManifestTest');\n    rimraf.sync(path.join(projectPath, 'project1.yaml'));\n    rimraf.sync(path.join(projectPath, 'subquery-multichain2.yaml'));\n    rimraf.sync(path.join(projectPath, 'project2.yaml'));\n    rimraf.sync(path.join(projectPath, 'subquery-multichain.yaml'));\n    rimraf.sync(path.join(projectPath, 'subquery-multichain3.yaml'));\n  });\n\n  it('should build ts manifest from multichain file', async () => {\n    const projectPath = path.join(__dirname, '../../test/tsManifestTest/subquery-multichain.ts');\n    await expect(buildManifestFromLocation(projectPath, console.log.bind(console))).resolves.toBeDefined();\n    expect(existsSync(path.join(projectPath, '../project1.yaml'))).toBe(true);\n    expect(existsSync(path.join(projectPath, '../project2.yaml'))).toBe(true);\n    expect(existsSync(path.join(projectPath, '../subquery-multichain.yaml'))).toBe(true);\n\n    //ts files are replaced with yaml files\n    const multichainContent = yaml.load(\n      readFileSync(path.join(projectPath, '../subquery-multichain.yaml'), 'utf8')\n    ) as MultichainProjectManifest;\n    multichainContent.projects.forEach((project) => project.endsWith('.yaml'));\n  }, 50000);\n\n  it('throws error on unknown file in multichain manifest', async () => {\n    const projectPath = path.join(__dirname, '../../test/tsManifestTest/subquery-multichain2.ts');\n    await expect(buildManifestFromLocation(projectPath, console.log.bind(console))).rejects.toThrow();\n  }, 50000);\n\n  it('allows both ts and yaml file in multichain manifest', async () => {\n    const projectPath = path.join(__dirname, '../../test/tsManifestTest/subquery-multichain3.ts');\n    await expect(buildManifestFromLocation(projectPath, console.log.bind(console))).resolves.toBeDefined();\n    expect(existsSync(path.join(projectPath, '../project1.yaml'))).toBe(true);\n    expect(existsSync(path.join(projectPath, '../project3.yaml'))).toBe(true);\n    expect(existsSync(path.join(projectPath, '../subquery-multichain3.yaml'))).toBe(true);\n\n    //ts files are replaced with yaml files\n    const multichainContent = yaml.load(\n      readFileSync(path.join(projectPath, '../subquery-multichain3.yaml'), 'utf8')\n    ) as MultichainProjectManifest;\n    multichainContent.projects.forEach((project) => project.endsWith('.yaml'));\n  }, 50000);\n\n  it('should build ts manifest from yaml multichain file', async () => {\n    const projectPath = path.join(__dirname, '../../test/tsManifestTest/subquery-multichain4.yaml');\n    await expect(buildManifestFromLocation(projectPath, console.log.bind(console))).resolves.toBeDefined();\n    expect(existsSync(path.join(projectPath, '../project1.yaml'))).toBe(true);\n    expect(existsSync(path.join(projectPath, '../project2.yaml'))).toBe(true);\n\n    //ts files are replaced with yaml files\n    const multichainContent = yaml.load(\n      readFileSync(path.join(projectPath, '../subquery-multichain4.yaml'), 'utf8')\n    ) as MultichainProjectManifest;\n    multichainContent.projects.forEach((project) => expect(project.endsWith('.yaml')).toBe(true));\n\n    //revert yaml to ts\n    multichainContent.projects = multichainContent.projects.map((project) => project.replace('.yaml', '.ts'));\n\n    writeFileSync(path.join(projectPath, '../subquery-multichain4.yaml'), yaml.dump(multichainContent));\n  }, 50000);\n});\n"]}