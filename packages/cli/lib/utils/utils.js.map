{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2025 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: GPL-3.0\n\nimport assert from 'assert';\nimport fs, {existsSync, readFileSync} from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport {input} from '@inquirer/prompts';\nimport {\n  DEFAULT_ENV,\n  DEFAULT_ENV_DEVELOP,\n  DEFAULT_ENV_DEVELOP_LOCAL,\n  DEFAULT_ENV_LOCAL,\n  DEFAULT_GIT_IGNORE,\n  DEFAULT_MANIFEST,\n  DEFAULT_MULTICHAIN_MANIFEST,\n  DEFAULT_TS_MANIFEST,\n} from '@subql/common';\nimport {MultichainProjectManifest} from '@subql/types-core';\nimport axios from 'axios';\nimport ejs from 'ejs';\nimport * as yaml from 'js-yaml';\nimport JSON5 from 'json5';\nimport {rimraf} from 'rimraf';\nimport {ACCESS_TOKEN_PATH} from '../constants';\n\nexport async function delay(sec: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, sec * 1000);\n  });\n}\n\nexport async function valueOrPrompt(\n  value: string | undefined,\n  msg: string,\n  error: string\n): Promise<NonNullable<string>> {\n  if (value) return value;\n  try {\n    return await input({\n      message: msg,\n      required: true,\n    });\n  } catch (e) {\n    throw new Error(error);\n  }\n}\n\nexport function addV<T extends string | undefined>(str: T): T {\n  // replaced includes to first byte.\n  if (str && str[0] !== 'v') {\n    return `v${str}` as T;\n  }\n  return str;\n}\n\nexport async function checkToken(token_path: string = ACCESS_TOKEN_PATH): Promise<string> {\n  const reqInput = () => input({message: 'Token cannot be found, Enter token', required: true});\n\n  const envToken = process.env.SUBQL_ACCESS_TOKEN;\n  if (envToken) return envToken;\n  if (existsSync(token_path)) {\n    try {\n      const authToken = readFileSync(token_path, 'utf8');\n      if (!authToken) {\n        return await reqInput();\n      }\n      return authToken.trim();\n    } catch (e) {\n      return reqInput();\n    }\n  } else {\n    return reqInput();\n  }\n}\n\nexport function errorHandle(e: any, msg: string): Error {\n  if (axios.isAxiosError(e) && e?.response?.data) {\n    return new Error(`${msg} ${e.response.data.message ?? e.response.data}`);\n  }\n\n  return new Error(`${msg} ${e.message}`);\n}\n\nexport function buildProjectKey(org: string, projectName: string): string {\n  return encodeURIComponent(`${org}/${projectName.toLowerCase()}`);\n}\n\nexport async function renderTemplate(templatePath: string, outputPath: string, templateData: ejs.Data): Promise<void> {\n  const data = await ejs.renderFile(templatePath, templateData);\n  await fs.promises.writeFile(outputPath, data);\n}\n\nexport async function prepareDirPath(path: string, recreate: boolean): Promise<void> {\n  try {\n    await rimraf(path);\n    if (recreate) {\n      await fs.promises.mkdir(path, {recursive: true});\n    }\n  } catch (e: any) {\n    throw new Error(`Failed to prepare ${path}: ${e.message}`);\n  }\n}\n\n// oclif's default path resolver only applies when parsed as `--flag path`\n// else it would not resolve, hence we need to resolve it manually.\nexport function resolveToAbsolutePath(inputPath: string): string {\n  const regex = new RegExp(`^~(?=$|[/\\\\\\\\])`);\n  return path.resolve(inputPath.replace(regex, os.homedir()));\n}\n\nexport function isValidEnum<T extends Record<string, string>>(enumType: T, input: string): input is T[keyof T] {\n  return Object.values(enumType).includes(input);\n}\n\nexport function findReplace(manifest: string, replacer: RegExp, value: string): string {\n  return manifest.replace(replacer, value);\n}\n\nexport function findMatchingIndices(\n  content: string,\n  startChar: string,\n  endChar: string,\n  startFrom = 0\n): [number, number][] {\n  //  JavaScript's regex engine does not support recursive patterns like (?1).\n  //  This regex would work in engines that support recursion, such as PCRE (Perl-Compatible Regular Expressions).\n\n  let openCount = 0;\n  let startIndex: number | undefined;\n  const pairs: [number, number][] = [];\n\n  for (let i = startFrom; i < content.length; i++) {\n    if (content[i] === startChar) {\n      if (openCount === 0) startIndex = i;\n      openCount++;\n    } else if (content[i] === endChar) {\n      openCount--;\n      if (openCount === 0) {\n        assert(startIndex !== undefined, 'startIndex should be defined');\n        pairs.push([startIndex, i]);\n        break;\n      }\n    }\n  }\n  if (openCount !== 0) throw new Error(`Unbalanced ${startChar} and ${endChar}`);\n\n  return pairs;\n}\nexport function findArrayIndicesTsManifest(content: string, key: string): [number, number] {\n  const start = content.indexOf(`${key}:`);\n  if (start === -1) throw new Error(`${key} not found`);\n  const pairs = findMatchingIndices(content, '[', ']', start);\n\n  if (pairs.length === 0) throw new Error(`${key} contains unbalanced brackets`);\n\n  return pairs[0];\n}\nexport function replaceArrayValueInTsManifest(content: string, key: string, newValue: string): string {\n  const [startIndex, endIndex] = findArrayIndicesTsManifest(content, key);\n  return content.slice(0, startIndex) + newValue + content.slice(endIndex + 1);\n}\nexport function extractArrayValueFromTsManifest(content: string, key: string): string | null {\n  const [startIndex, endIndex] = findArrayIndicesTsManifest(content, key);\n  return content.slice(startIndex, endIndex + 1);\n}\n\nexport function extractFromTs(\n  manifest: string,\n  patterns: {[key: string]: RegExp | undefined}\n): {[key: string]: string | string[] | null} {\n  const result: {[key: string]: string | string[] | null} = {};\n  // TODO should extract then validate value type ?\n  // check what the following char is after key\n  const arrKeys = ['endpoint', 'topics'];\n  const nestArr = ['dataSources', 'handlers'];\n  for (const key in patterns) {\n    if (!nestArr.includes(key)) {\n      const regExp = patterns[key];\n      assert(regExp, `Pattern for ${key} is not defined`);\n      const match = manifest.match(regExp);\n\n      if (arrKeys.includes(key) && match) {\n        const inputStr = match[1].replace(/`/g, '\"');\n        const jsonOutput = JSON5.parse(inputStr);\n        result[key] = Array.isArray(jsonOutput) ? jsonOutput : [jsonOutput];\n      } else {\n        result[key] = match ? match[1] : null;\n      }\n    } else {\n      result[key] = extractArrayValueFromTsManifest(manifest, key);\n    }\n  }\n\n  return result;\n}\n\nexport function splitArrayString(arrayStr: string): string[] {\n  // Remove the starting and ending square brackets\n  const content = arrayStr.trim().slice(1, -1).trim();\n  const pairs: [number, number][] = [];\n  let lastEndIndex = 0;\n\n  while (lastEndIndex < content.length) {\n    const newPairs = findMatchingIndices(content, '{', '}', lastEndIndex);\n    if (newPairs.length === 0) break;\n    pairs.push(newPairs[0]);\n    lastEndIndex = newPairs[0][1] + 1;\n  }\n\n  return pairs.map(([start, end]) => {\n    // Extract the string and further process to remove excess whitespace\n    const extracted = content.slice(start, end + 1).trim();\n    return extracted.replace(/\\s+/g, ' ');\n  });\n}\n\n// Cold validate on ts manifest, for generate scaffold command\nexport function validateEthereumTsManifest(manifest: string): boolean {\n  const typePattern = /@subql\\/types-ethereum/;\n  const nodePattern = /@subql\\/node-ethereum/;\n  return !!typePattern.test(manifest) && !!nodePattern.test(manifest);\n}\n\nexport function defaultYamlManifestPath(projectPath: string): string {\n  return path.join(projectPath, DEFAULT_MANIFEST);\n}\n\nexport function defaultTSManifestPath(projectPath: string): string {\n  return path.join(projectPath, DEFAULT_TS_MANIFEST);\n}\n\nexport function defaultEnvPath(projectPath: string): string {\n  return path.join(projectPath, DEFAULT_ENV);\n}\n\nexport function defaultEnvDevelopPath(projectPath: string): string {\n  return path.join(projectPath, DEFAULT_ENV_DEVELOP);\n}\n\nexport function defaultEnvLocalPath(projectPath: string): string {\n  return path.join(projectPath, DEFAULT_ENV_LOCAL);\n}\n\nexport function defaultEnvDevelopLocalPath(projectPath: string): string {\n  return path.join(projectPath, DEFAULT_ENV_DEVELOP_LOCAL);\n}\n\nexport function defaultGitIgnorePath(projectPath: string): string {\n  return path.join(projectPath, DEFAULT_GIT_IGNORE);\n}\n\nexport function copyFolderSync(source: string, target: string): void {\n  if (!fs.existsSync(target)) {\n    fs.mkdirSync(target, {recursive: true});\n  }\n\n  fs.readdirSync(source).forEach((item) => {\n    const sourcePath = path.join(source, item);\n    const targetPath = path.join(target, item);\n\n    if (fs.lstatSync(sourcePath).isDirectory()) {\n      copyFolderSync(sourcePath, targetPath);\n    } else {\n      fs.copyFileSync(sourcePath, targetPath);\n    }\n  });\n}\n\nexport function defaultMultiChainYamlManifestPath(projectPath: string): string {\n  return path.join(projectPath, DEFAULT_MULTICHAIN_MANIFEST);\n}\n\nexport function isMultichain(location: string): boolean {\n  const multichainContent = yaml.load(readFileSync(location, 'utf8')) as MultichainProjectManifest;\n  return !!multichainContent && !!multichainContent.projects;\n}\n"]}