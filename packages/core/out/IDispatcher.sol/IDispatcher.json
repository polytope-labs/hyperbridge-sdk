{"abi":[{"type":"function","name":"dispatch","inputs":[{"name":"response","type":"tuple","internalType":"struct DispatchPostResponse","components":[{"name":"request","type":"tuple","internalType":"struct PostRequest","components":[{"name":"source","type":"bytes","internalType":"bytes"},{"name":"dest","type":"bytes","internalType":"bytes"},{"name":"nonce","type":"uint64","internalType":"uint64"},{"name":"from","type":"bytes","internalType":"bytes"},{"name":"to","type":"bytes","internalType":"bytes"},{"name":"timeoutTimestamp","type":"uint64","internalType":"uint64"},{"name":"body","type":"bytes","internalType":"bytes"}]},{"name":"response","type":"bytes","internalType":"bytes"},{"name":"timeout","type":"uint64","internalType":"uint64"},{"name":"fee","type":"uint256","internalType":"uint256"},{"name":"payer","type":"address","internalType":"address"}]}],"outputs":[{"name":"commitment","type":"bytes32","internalType":"bytes32"}],"stateMutability":"payable"},{"type":"function","name":"dispatch","inputs":[{"name":"request","type":"tuple","internalType":"struct DispatchPost","components":[{"name":"dest","type":"bytes","internalType":"bytes"},{"name":"to","type":"bytes","internalType":"bytes"},{"name":"body","type":"bytes","internalType":"bytes"},{"name":"timeout","type":"uint64","internalType":"uint64"},{"name":"fee","type":"uint256","internalType":"uint256"},{"name":"payer","type":"address","internalType":"address"}]}],"outputs":[{"name":"commitment","type":"bytes32","internalType":"bytes32"}],"stateMutability":"payable"},{"type":"function","name":"dispatch","inputs":[{"name":"request","type":"tuple","internalType":"struct DispatchGet","components":[{"name":"dest","type":"bytes","internalType":"bytes"},{"name":"height","type":"uint64","internalType":"uint64"},{"name":"keys","type":"bytes[]","internalType":"bytes[]"},{"name":"timeout","type":"uint64","internalType":"uint64"},{"name":"fee","type":"uint256","internalType":"uint256"},{"name":"context","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"commitment","type":"bytes32","internalType":"bytes32"}],"stateMutability":"payable"},{"type":"function","name":"feeToken","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"frozen","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"enum FrozenStatus"}],"stateMutability":"view"},{"type":"function","name":"fundRequest","inputs":[{"name":"commitment","type":"bytes32","internalType":"bytes32"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"fundResponse","inputs":[{"name":"commitment","type":"bytes32","internalType":"bytes32"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"host","inputs":[],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"hyperbridge","inputs":[],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"nonce","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"perByteFee","inputs":[{"name":"dest","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"uniswapV2Router","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))":"94480805","dispatch((bytes,bytes,bytes,uint64,uint256,address))":"b8f3e8f5","dispatch((bytes,uint64,bytes[],uint64,uint256,bytes))":"d22e3343","feeToken()":"647846a5","frozen()":"054f7d9c","fundRequest(bytes32,uint256)":"b9ea3289","fundResponse(bytes32,uint256)":"fadce3c7","host()":"f437bc59","hyperbridge()":"005e763e","nonce()":"affed0e0","perByteFee(bytes)":"4011ec0a","uniswapV2Router()":"1694505e"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"source\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dest\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"timeoutTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"body\",\"type\":\"bytes\"}],\"internalType\":\"struct PostRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"timeout\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"}],\"internalType\":\"struct DispatchPostResponse\",\"name\":\"response\",\"type\":\"tuple\"}],\"name\":\"dispatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"dest\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"body\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"timeout\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"}],\"internalType\":\"struct DispatchPost\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"dispatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"dest\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"},{\"internalType\":\"bytes[]\",\"name\":\"keys\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64\",\"name\":\"timeout\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"internalType\":\"struct DispatchGet\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"dispatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frozen\",\"outputs\":[{\"internalType\":\"enum FrozenStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundResponse\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"host\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hyperbridge\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"dest\",\"type\":\"bytes\"}],\"name\":\"perByteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))\":{\"details\":\"Dispatch a POST response to Hyperbridge\",\"params\":{\"response\":\"- post response\"},\"returns\":{\"commitment\":\"- the request commitment\"}},\"dispatch((bytes,bytes,bytes,uint64,uint256,address))\":{\"details\":\"Dispatch a POST request to Hyperbridge\",\"params\":{\"request\":\"- post request\"},\"returns\":{\"commitment\":\"- the request commitment\"}},\"dispatch((bytes,uint64,bytes[],uint64,uint256,bytes))\":{\"details\":\"Dispatch a GET request to Hyperbridge\",\"params\":{\"request\":\"- get request\"},\"returns\":{\"commitment\":\"- the request commitment\"}},\"feeToken()\":{\"details\":\"Returns the address of the ERC-20 fee token contract configured for this state machine.\",\"returns\":{\"_0\":\"feeToken - The ERC20 contract address for fees.\"}},\"frozen()\":{\"returns\":{\"_0\":\"the `frozen` status\"}},\"fundRequest(bytes32,uint256)\":{\"details\":\"Increase the relayer fee for a previously dispatched request. This is provided for use only on pending requests, such that when they timeout, the user can recover the entire relayer fee.\",\"params\":{\"amount\":\"- The amount provided in `IIsmpHost.feeToken()`\",\"commitment\":\"- The request commitment\"}},\"fundResponse(bytes32,uint256)\":{\"details\":\"Increase the relayer fee for a previously dispatched response. This is provided for use only on pending responses, such that when they timeout, the user can recover the entire relayer fee.\",\"params\":{\"amount\":\"- The amount to be provided in `IIsmpHost.feeToken()`\",\"commitment\":\"- The response commitment\"}},\"host()\":{\"returns\":{\"_0\":\"the host state machine id\"}},\"hyperbridge()\":{\"returns\":{\"_0\":\"the state machine identifier for the connected hyperbridge instance\"}},\"nonce()\":{\"details\":\"Returns the nonce immediately available for requests\",\"returns\":{\"_0\":\"the `nonce`\"}},\"perByteFee(bytes)\":{\"details\":\"Returns the address of the per byte fee configured for the destination state machine.\",\"params\":{\"dest\":\"- The destination chain for the per byte fee.\"},\"returns\":{\"_0\":\"perByteFee - The per byte fee for outgoing messages.\"}},\"uniswapV2Router()\":{\"details\":\"Returns the address for the Uniswap V2 Router implementation used for swaps\",\"returns\":{\"_0\":\"routerAddress - The address to the in-use RouterV02 implementation\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))\":{\"notice\":\"Payment for the request can be made with either the native token or the IIsmpHost.feeToken. If native tokens are supplied, it will perform a swap under the hood using the local uniswap router. Will revert if enough native tokens are not provided. If no native tokens are provided then it will try to collect payment from the calling contract in the IIsmpHost.feeToken.\"},\"dispatch((bytes,bytes,bytes,uint64,uint256,address))\":{\"notice\":\"Payment for the request can be made with either the native token or the IIsmpHost.feeToken. If native tokens are supplied, it will perform a swap under the hood using the local uniswap router. Will revert if enough native tokens are not provided. If no native tokens are provided then it will try to collect payment from the calling contract in the IIsmpHost.feeToken.\"},\"dispatch((bytes,uint64,bytes[],uint64,uint256,bytes))\":{\"notice\":\"Payment for the request can be made with either the native token or the IIsmpHost.feeToken. If native tokens are supplied, it will perform a swap under the hood using the local uniswap router. Will revert if enough native tokens are not provided. If no native tokens are provided then it will try to collect payment from the calling contract in the IIsmpHost.feeToken.\"},\"feeToken()\":{\"notice\":\"Hyperbridge collects it's dispatch fees in the provided token denomination. This will typically be in stablecoins.\"},\"fundRequest(bytes32,uint256)\":{\"notice\":\"Payment can be made with either the native token or the IIsmpHost.feeToken. If native tokens are supplied, it will perform a swap under the hood using the local uniswap router. Will revert if enough native tokens are not provided. If no native tokens are provided then it will try to collect payment from the calling contract in the IIsmpHost.feeToken. If called on an already delivered request, these funds will be seen as a donation to the hyperbridge protocol.\"},\"fundResponse(bytes32,uint256)\":{\"notice\":\"Payment can be made with either the native token or the IIsmpHost.feeToken. If native tokens are supplied, it will perform a swap under the hood using the local uniswap router. Will revert if enough native tokens are not provided. If no native tokens are provided then it will try to collect payment from the calling contract in the IIsmpHost.feeToken. If called on an already delivered response, these funds will be seen as a donation to the hyperbridge protocol.\"},\"perByteFee(bytes)\":{\"notice\":\"Hyperbridge collects it's dispatch fees per every byte of the outgoing message.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IDispatcher.sol\":\"IDispatcher\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/openzeppelin-solidity/\",\":@polytope-labs/solidity-merkle-trees/=node_modules/@polytope-labs/solidity-merkle-trees/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"interfaces/IDispatcher.sol\":{\"keccak256\":\"0x220d9365250827d30fb727ad11444f5a8a25892ac153885781d4be517441c8fd\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3c6e2ad430f0eb2cff6a0db61143a99a7f890c71a1ae3bb6bb022b35b515167b\",\"dweb:/ipfs/QmYhMmQ3f3f484VDjYNd6d4UqmyQbDD3X6ZwVcHjgaZ3u3\"]},\"interfaces/Message.sol\":{\"keccak256\":\"0xca108a8f8c3c58610997c4e5bf37ca664cf2626e39f6f61d2b11f832cfa9747a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c783d92821ecb178e519d175302b4d5519eeacba461918ad974afd8b82e17dcb\",\"dweb:/ipfs/QmfKCvXkZW1fP5E6TUMmn85krvdER3QqLv9S51v3yNy6Xq\"]},\"node_modules/@polytope-labs/solidity-merkle-trees/src/Types.sol\":{\"keccak256\":\"0x02d8395b46f33e9ad4a85275e31519035129fa01905a26cdf8d88512f1ae4ec5\",\"license\":\"Apache2\",\"urls\":[\"bzz-raw://9d3d151eaf7c0944530e3fb6dced088b39212fa9d5090711af2dc3d67f87d359\",\"dweb:/ipfs/QmQovNTb2cQaEpeNHm64EGoLRqZJjisrSMkebNvh4bZPXh\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"struct DispatchPostResponse","name":"response","type":"tuple","components":[{"internalType":"struct PostRequest","name":"request","type":"tuple","components":[{"internalType":"bytes","name":"source","type":"bytes"},{"internalType":"bytes","name":"dest","type":"bytes"},{"internalType":"uint64","name":"nonce","type":"uint64"},{"internalType":"bytes","name":"from","type":"bytes"},{"internalType":"bytes","name":"to","type":"bytes"},{"internalType":"uint64","name":"timeoutTimestamp","type":"uint64"},{"internalType":"bytes","name":"body","type":"bytes"}]},{"internalType":"bytes","name":"response","type":"bytes"},{"internalType":"uint64","name":"timeout","type":"uint64"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"address","name":"payer","type":"address"}]}],"stateMutability":"payable","type":"function","name":"dispatch","outputs":[{"internalType":"bytes32","name":"commitment","type":"bytes32"}]},{"inputs":[{"internalType":"struct DispatchPost","name":"request","type":"tuple","components":[{"internalType":"bytes","name":"dest","type":"bytes"},{"internalType":"bytes","name":"to","type":"bytes"},{"internalType":"bytes","name":"body","type":"bytes"},{"internalType":"uint64","name":"timeout","type":"uint64"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"address","name":"payer","type":"address"}]}],"stateMutability":"payable","type":"function","name":"dispatch","outputs":[{"internalType":"bytes32","name":"commitment","type":"bytes32"}]},{"inputs":[{"internalType":"struct DispatchGet","name":"request","type":"tuple","components":[{"internalType":"bytes","name":"dest","type":"bytes"},{"internalType":"uint64","name":"height","type":"uint64"},{"internalType":"bytes[]","name":"keys","type":"bytes[]"},{"internalType":"uint64","name":"timeout","type":"uint64"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"bytes","name":"context","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"dispatch","outputs":[{"internalType":"bytes32","name":"commitment","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"feeToken","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"frozen","outputs":[{"internalType":"enum FrozenStatus","name":"","type":"uint8"}]},{"inputs":[{"internalType":"bytes32","name":"commitment","type":"bytes32"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"payable","type":"function","name":"fundRequest"},{"inputs":[{"internalType":"bytes32","name":"commitment","type":"bytes32"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"payable","type":"function","name":"fundResponse"},{"inputs":[],"stateMutability":"view","type":"function","name":"host","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"hyperbridge","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"nonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes","name":"dest","type":"bytes"}],"stateMutability":"view","type":"function","name":"perByteFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"uniswapV2Router","outputs":[{"internalType":"address","name":"","type":"address"}]}],"devdoc":{"kind":"dev","methods":{"dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))":{"details":"Dispatch a POST response to Hyperbridge","params":{"response":"- post response"},"returns":{"commitment":"- the request commitment"}},"dispatch((bytes,bytes,bytes,uint64,uint256,address))":{"details":"Dispatch a POST request to Hyperbridge","params":{"request":"- post request"},"returns":{"commitment":"- the request commitment"}},"dispatch((bytes,uint64,bytes[],uint64,uint256,bytes))":{"details":"Dispatch a GET request to Hyperbridge","params":{"request":"- get request"},"returns":{"commitment":"- the request commitment"}},"feeToken()":{"details":"Returns the address of the ERC-20 fee token contract configured for this state machine.","returns":{"_0":"feeToken - The ERC20 contract address for fees."}},"frozen()":{"returns":{"_0":"the `frozen` status"}},"fundRequest(bytes32,uint256)":{"details":"Increase the relayer fee for a previously dispatched request. This is provided for use only on pending requests, such that when they timeout, the user can recover the entire relayer fee.","params":{"amount":"- The amount provided in `IIsmpHost.feeToken()`","commitment":"- The request commitment"}},"fundResponse(bytes32,uint256)":{"details":"Increase the relayer fee for a previously dispatched response. This is provided for use only on pending responses, such that when they timeout, the user can recover the entire relayer fee.","params":{"amount":"- The amount to be provided in `IIsmpHost.feeToken()`","commitment":"- The response commitment"}},"host()":{"returns":{"_0":"the host state machine id"}},"hyperbridge()":{"returns":{"_0":"the state machine identifier for the connected hyperbridge instance"}},"nonce()":{"details":"Returns the nonce immediately available for requests","returns":{"_0":"the `nonce`"}},"perByteFee(bytes)":{"details":"Returns the address of the per byte fee configured for the destination state machine.","params":{"dest":"- The destination chain for the per byte fee."},"returns":{"_0":"perByteFee - The per byte fee for outgoing messages."}},"uniswapV2Router()":{"details":"Returns the address for the Uniswap V2 Router implementation used for swaps","returns":{"_0":"routerAddress - The address to the in-use RouterV02 implementation"}}},"version":1},"userdoc":{"kind":"user","methods":{"dispatch(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64,uint256,address))":{"notice":"Payment for the request can be made with either the native token or the IIsmpHost.feeToken. If native tokens are supplied, it will perform a swap under the hood using the local uniswap router. Will revert if enough native tokens are not provided. If no native tokens are provided then it will try to collect payment from the calling contract in the IIsmpHost.feeToken."},"dispatch((bytes,bytes,bytes,uint64,uint256,address))":{"notice":"Payment for the request can be made with either the native token or the IIsmpHost.feeToken. If native tokens are supplied, it will perform a swap under the hood using the local uniswap router. Will revert if enough native tokens are not provided. If no native tokens are provided then it will try to collect payment from the calling contract in the IIsmpHost.feeToken."},"dispatch((bytes,uint64,bytes[],uint64,uint256,bytes))":{"notice":"Payment for the request can be made with either the native token or the IIsmpHost.feeToken. If native tokens are supplied, it will perform a swap under the hood using the local uniswap router. Will revert if enough native tokens are not provided. If no native tokens are provided then it will try to collect payment from the calling contract in the IIsmpHost.feeToken."},"feeToken()":{"notice":"Hyperbridge collects it's dispatch fees in the provided token denomination. This will typically be in stablecoins."},"fundRequest(bytes32,uint256)":{"notice":"Payment can be made with either the native token or the IIsmpHost.feeToken. If native tokens are supplied, it will perform a swap under the hood using the local uniswap router. Will revert if enough native tokens are not provided. If no native tokens are provided then it will try to collect payment from the calling contract in the IIsmpHost.feeToken. If called on an already delivered request, these funds will be seen as a donation to the hyperbridge protocol."},"fundResponse(bytes32,uint256)":{"notice":"Payment can be made with either the native token or the IIsmpHost.feeToken. If native tokens are supplied, it will perform a swap under the hood using the local uniswap router. Will revert if enough native tokens are not provided. If no native tokens are provided then it will try to collect payment from the calling contract in the IIsmpHost.feeToken. If called on an already delivered response, these funds will be seen as a donation to the hyperbridge protocol."},"perByteFee(bytes)":{"notice":"Hyperbridge collects it's dispatch fees per every byte of the outgoing message."}},"version":1}},"settings":{"remappings":["@openzeppelin/=node_modules/openzeppelin-solidity/","@polytope-labs/solidity-merkle-trees/=node_modules/@polytope-labs/solidity-merkle-trees/","forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"interfaces/IDispatcher.sol":"IDispatcher"},"evmVersion":"shanghai","libraries":{}},"sources":{"interfaces/IDispatcher.sol":{"keccak256":"0x220d9365250827d30fb727ad11444f5a8a25892ac153885781d4be517441c8fd","urls":["bzz-raw://3c6e2ad430f0eb2cff6a0db61143a99a7f890c71a1ae3bb6bb022b35b515167b","dweb:/ipfs/QmYhMmQ3f3f484VDjYNd6d4UqmyQbDD3X6ZwVcHjgaZ3u3"],"license":"Apache-2.0"},"interfaces/Message.sol":{"keccak256":"0xca108a8f8c3c58610997c4e5bf37ca664cf2626e39f6f61d2b11f832cfa9747a","urls":["bzz-raw://c783d92821ecb178e519d175302b4d5519eeacba461918ad974afd8b82e17dcb","dweb:/ipfs/QmfKCvXkZW1fP5E6TUMmn85krvdER3QqLv9S51v3yNy6Xq"],"license":"Apache-2.0"},"node_modules/@polytope-labs/solidity-merkle-trees/src/Types.sol":{"keccak256":"0x02d8395b46f33e9ad4a85275e31519035129fa01905a26cdf8d88512f1ae4ec5","urls":["bzz-raw://9d3d151eaf7c0944530e3fb6dced088b39212fa9d5090711af2dc3d67f87d359","dweb:/ipfs/QmQovNTb2cQaEpeNHm64EGoLRqZJjisrSMkebNvh4bZPXh"],"license":"Apache2"}},"version":1},"id":1}