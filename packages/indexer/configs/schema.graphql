# To improve query performance, we strongly suggest adding indexes to any field that you plan to filter or sort by
# Add the `@index` or `@index(unique: true)` annotation after any non-key field
# https://academy.subquery.network/build/graphql.html#indexing-by-non-primary-key-field

"""
The status of a request
"""
enum Status {
	"""
	The request has been dispatched
	"""
	SOURCE
	"""
	The request has been verified and aggregated by Hyperbridge
	"""
	HYPERBRIDGE_DELIVERED
	"""
	The request has reached the destination chain
	"""
	DESTINATION
	"""
	The request has been timed out on Hyperbridge
	"""
	HYPERBRIDGE_TIMED_OUT
	"""
	The request has been timed out on the source chain
	"""
	TIMED_OUT
}

"""
Types of participants in the Hyperbridge Protocol
"""
enum ProtocolParticipant {
	RELAYER
	FILLER
	USER
}

"""
System activity types related to reward points
"""
enum RewardPointsActivityType {
	REWARD_POINTS_EARNED
}

"""
Important Hyperbridge Stats for a specific chain
"""
type HyperBridgeChainStats @entity {
	"""
	The chain the metrics are for
	"""
	id: ID!

	"""
	Total number of messages sent on Hyperbridge on this chain
	"""
	numberOfMessagesSent: BigInt! @index

	"""
	Total number of messages delivered by Hyperbridge on this chain
	"""
	numberOfDeliveredMessages: BigInt! @index

	"""
	Total number of failed messages sent by Hyperbridge on this chain
	"""
	numberOfFailedDeliveries: BigInt! @index

	"""
	Total number of timed out messages on this chain
	"""
	numberOfTimedOutMessages: BigInt! @index

	"""
	The total amount of transfers sent into the Hyperbridge Host Contracts (transfers in = protocol fee + relayer fee)
	"""
	totalTransfersIn: BigInt! @index

	"""
	Total amount of fees earned by Hyperbridge on the chain (protocol fees)
	"""
	protocolFeesEarned: BigInt! @index

	"""
	Total amount of fees payed out by Hyperbridge to relayers on the chain (relayer fees)
	"""
	feesPayedOutToRelayers: BigInt! @index
}

"""
Hyperbridge Stats for a specific Relayer on a specific chain
"""
type RelayerStatsPerChain @entity @compositeIndexes(fields: [["relayer", "chain"], ["feesEarned", "chain"]]) {
	"""
	Unique identifier of the RelayerChainMetrics entry.
	"""
	id: ID!

	"""
	The relayer the metrics are for
	"""
	relayer: Relayer!

	"""
	The chain the metrics are for
	"""
	chain: String! @index

	"""
	Total number of successful post requests or post responses handled by the Relayer
	"""
	numberOfSuccessfulMessagesDelivered: BigInt!

	"""
	Total number of failed post requests handled by the Relayer
	"""
	numberOfFailedMessagesDelivered: BigInt!

	"""
	Amount of gas spent on successful messages (Gas Cost)
	"""
	gasUsedForSuccessfulMessages: BigInt!

	"""
	Amount of gas spent on failed messages (Gas Cost)
	"""
	gasUsedForFailedMessages: BigInt!

	"""
	Gas fee spent on successful post requests (Gas Cost * Gas Price)
	"""
	gasFeeForSuccessfulMessages: BigInt!

	"""
	Gas fee spent on failed post requests (Gas Cost * Gas Price)
	"""
	gasFeeForFailedMessages: BigInt!

	"""
	The USD value of the gas fee spent on successful post requests
	"""
	usdGasFeeForSuccessfulMessages: BigInt!

	"""
	The USD value of the gas fee spent on failed post requests
	"""
	usdGasFeeForFailedMessages: BigInt!

	"""
	Total fees earned by the relayer
	"""
	feesEarned: BigInt! @index
}

"""
A Hyperbridge Relayer
"""
type Relayer @entity {
	"""
	Unique identifier of the Relayer (also the relayer's address)
	"""
	id: ID!

	"""
	A list of important stats for the Relayer on every network that they support
	"""
	perChainStats: [RelayerStatsPerChain]! @derivedFrom(field: "relayer")
}

"""
Transfers made from/to the Hyperbridge Host
- The host transfers fees to Relayers
- The host receives fees from protocol users
"""
type Transfer @entity @compositeIndexes(fields: [["from", "to"], ["from", "chain"], ["to", "chain"]]) {
	"""
	Unique identifier of the Transfer
	"""
	id: ID!

	"""
	The chain on which the transfer was made
	"""
	chain: String! @index

	"""
	The amount transferred
	"""
	amount: BigInt! @index

	"""
	The address that made the transfer (the hyperbridge host address)
	"""
	from: String! @index

	"""
	The address that received the transfer (the relayer address)
	"""
	to: String! @index
}

"""
A StateMachine Update Event
"""
type StateMachineUpdateEvent
	@entity
	@compositeIndexes(fields: [["stateMachineId", "chain"], ["blockNumber", "chain"], ["height", "chain"]]) {
	"""
	The ID of the StateMachineUpdate (hash of concatenation of stateMachineId and height)
	"""
	id: ID!

	"""
	The ID of the StateMachine
	"""
	stateMachineId: String! @index

	"""
	The height of the block in which the event occured
	"""
	height: Int! @index

	"""
	The chain on which the event occured
	"""
	chain: String! @index

	"""
	The hash of the block in which the event occured
	"""
	blockHash: String!

	"""
	The number of the block in which the event occured
	"""
	blockNumber: Int! @index

	"""
	The hash of the transaction in which the event occured
	"""
	transactionHash: String!

	"""
	The index of the transaction in the block
	"""
	transactionIndex: Int!

	"""
	The state machine commitment timestamp
	"""
	commitmentTimestamp: BigInt!

	"""
	The timestamp of the event
	"""
	createdAt: Date! @index
}

"""
A Hyperbridge Request
"""
type Request
	@entity
	@compositeIndexes(
		fields: [
			["commitment", "chain"]
			["sourceTransactionHash", "chain"]
		]
	) {
	"""
	Unique identifier of the Request (This is the request commitment)
	"""
	id: ID!

	"""
	The commitment of the request
	"""
	commitment: String! @index

	"""
	The transaction hash of the source transaction
	"""
	sourceTransactionHash: String! @index

	"""
	The chain on which the request was made
	"""
	chain: String! @index

	"""
	This is the statemachine id where this request originated from
	"""
	source: String

	"""
	This is the statemachine where this request is been dispatched to
	"""
	dest: String

	"""
	This is the timestamp when the request would timeout
	"""
	timeoutTimestamp: BigInt

	"""
	The address that dispatched this request
	"""
	from: String!

	"""
	The address receiving this request
	"""
	to: String!

	"""
	Nonce of the request
	"""
	nonce: BigInt!

	"""
	Body of the request
	"""
	body: String!

	"""
	This is the fee set for this request
	"""
	fee: BigInt!

	"""
	Status of the request
	"""
	status: Status!

	"""
	Metatdata about the request's progression through different statuses
	"""
	statusMetadata: [RequestStatusMetadata]! @derivedFrom(field: "request")
}

"""
Metadata about the status of a Request
"""
type RequestStatusMetadata @entity {
	"""
	The ID of the RequestStatusMetadata
	"""
	id: ID!

	"""
	The status of the request
	"""
	status: Status!

	"""
	The chain on which the request occured
	"""
	chain: String!

	"""
	The timestamp of the event
	"""
	timestamp: BigInt!

	"""
	The number of the block in which the event occured
	"""
	blockNumber: String!

	"""
	The hash of the block in which the event occured
	"""
	blockHash: String!

	"""
	The hash of the transaction in which the event occured
	"""
	transactionHash: String!

	"""
	The request that owns this status change
	"""
	request: Request!
}

"""
A Hyperbridge Response
"""
type Response
	@entity
	@compositeIndexes(
		fields: [
			["commitment", "chain"]
			["sourceTransactionHash", "chain"]
			["hyperbridgeTransactionHash", "chain"]
			["destinationTransactionHash", "chain"]
		]
	) {
	"""
	Unique identifier of the Response (This is the response commitment)
	"""
	id: ID!

	"""
	The chain on which the response was made
	"""
	chain: String! @index

	"""
	The commitment of the response
	"""
	commitment: String! @index

	"""
	The transaction hash of the source transaction
	"""
	sourceTransactionHash: String! @index

	"""
	The transaction hash of the hyperbridge transaction
	"""
	hyperbridgeTransactionHash: String! @index

	"""
	The transaction hash of the destination transaction
	"""
	destinationTransactionHash: String! @index

	"""
	The timeout transaction hash of the hyperbridge transaction
	"""
	hyperbridgeTimeoutTransactionHash: String

	"""
	The timeout transaction hash of the destination transaction
	"""
	destinationTimeoutTransactionHash: String
	"""
	The response message
	"""
	response_message: String

	"""
	The Timestamp at which this response expires in seconds
	"""
	responseTimeoutTimestamp: BigInt

	"""
	Status of the response
	"""
	status: Status!

	"""
	The request that triggered this response
	"""
	request: Request

	"""
	Metatdata about the response's progression through different statuses
	"""
	statusMetadata: [ResponseStatusMetadata]! @derivedFrom(field: "response")
}

"""
Metadata about the status of a Response
"""
type ResponseStatusMetadata @entity {
	"""
	The ID of the ResponseStatusMetadata
	"""
	id: ID!

	"""
	The status of the response
	"""
	status: Status!

	"""
	The chain on which the response occured
	"""
	chain: String!

	"""
	The timestamp of the event
	"""
	timestamp: BigInt!

	"""
	The number of the block in which the event occured
	"""
	blockNumber: String!

	"""
	The hash of the block in which the event occured
	"""
	blockHash: String!

	"""
	The hash of the transaction in which the event occured
	"""
	transactionHash: String!

	"""
	The response that owns this status change
	"""
	response: Response!
}

"""
Reward points earned by participants in the hyperbridge protocol
"""
type RewardPoints @entity @compositeIndexes(fields: [["address", "chain"], ["earnerType", "chain"]]) {
	id: ID!
	address: String! @index
	chain: String! @index
	points: BigInt! @index
	earnerType: ProtocolParticipant!
}

type RewardPointsActivityLog
	@entity
	@compositeIndexes(fields: [["earnerAddress", "chain"], ["earnerType", "chain"], ["activityType", "chain"]]) {
	id: ID!
	chain: String! @index
	points: BigInt! @index
	transactionHash: String! @index
	earnerAddress: String! @index
	earnerType: ProtocolParticipant!
	activityType: RewardPointsActivityType!
	description: String!
	createdAt: Date! @index
}
