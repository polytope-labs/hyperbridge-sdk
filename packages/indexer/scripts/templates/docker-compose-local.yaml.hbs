services:
{{#each chains}}
    subquery-node-{{@key}}-local:
        image: {{image}}
        restart: unless-stopped
        {{#if networkMode}}
        network_mode: {{networkMode}}
        {{/if}}
        environment:
            DB_USER: ${DB_USER}
            DB_PASS: ${DB_PASS}
            DB_DATABASE: ${DB_DATABASE}
            DB_HOST: {{#if networkMode}}0.0.0.0{{else}}postgres{{/if}}
            DB_PORT: ${DB_PORT}

{{#unless ../hasProvisionDatabase}}
        depends_on:
            postgres:
                condition: service_healthy

{{/unless}}
        volumes:
        {{#unless hasCid}}
            - ../{{@key}}.yaml:/app/{{@key}}.yaml
        {{/unless}}
            - ../chaintypes:/app/chaintypes
            - ../src/configs:/app/src/configs
            - ../dist:/app/dist
        command:
            - ${SUB_COMMAND:-}
        {{#if hasCid}}
            - -f=ipfs://{{cid}}
            {{#each endpoints}}
            - --network-endpoint='{{this}}'
            {{/each}}
        {{else}}
            - -f=/app/{{@key}}.yaml
        {{/if}}
            - --db-schema=app
            - --workers=${SUBQL_WORKERS:-6}
            - --batch-size=${SUBQL_BATCH_SIZE:-10}
            - --multi-chain
            - --unsafe
            - --log-level=info
            - --historical=timestamp
            - --block-confirmations=0
            - --store-cache-async=false
            - --store-cache-threshold=1
        {{#if migrating}}
            - --allow-schema-migration
        {{else}}
            {{#unless isSubstrate}}
            - --unfinalizedBlocks
            {{/unless}}
        {{/if}}
        healthcheck:
            test: ["CMD", "curl", "-f", "http://subquery-node-hyperbridge-gargantua-local:3000/ready"]
            interval: 3s
            timeout: 5s
            retries: 10

{{/each}}
    graphql-engine:
        image: subquerynetwork/subql-query:v2.21.0
        restart: always
        ports:
            - 3100:3000
        environment:
            DB_USER: ${DB_USER}
            DB_PASS: ${DB_PASS}
            DB_DATABASE: ${DB_DATABASE}
            DB_HOST: ${DB_HOST}
            DB_PORT: ${DB_PORT}
        command:
            - --name=app
            - --playground
            - --query-timeout=0
{{#unless hasProvisionDatabase}}

    postgres:
        image: postgres:14-alpine
        ports:
            - 5432:5432
        volumes:
            - ${DB_PATH}:/var/lib/postgresql/data
        environment:
            POSTGRES_PASSWORD: ${DB_PASS}
            POSTGRES_USER: ${DB_USER}
            POSTGRES_DB: ${DB_DATABASE}
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_DATABASE}"]
            interval: 10s
            timeout: 5s
            retries: 5
        command: |
            bash -c '
               # Start PostgreSQL in the background
              docker-entrypoint.sh postgres &

              sleep 5

              # Wait for PostgreSQL to become available
              until pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB; do
                echo "Waiting for PostgreSQL to start..."
                sleep 1
              done

              # Run our extension creation command - note we use localhost here
              echo "Creating btree_gist extension..."
              psql -v ON_ERROR_STOP=1 -U $$POSTGRES_USER -d $$POSTGRES_DB -c "CREATE EXTENSION IF NOT EXISTS btree_gist;"

              # Keep container running by waiting for the PostgreSQL process
              wait
            '
{{/unless}}
