# To improve query performance, we strongly suggest adding indexes to any field that you plan to filter or sort by
# Add the `@index` or `@index(unique: true)` annotation after any non-key field
# https://academy.subquery.network/build/graphql.html#indexing-by-non-primary-key-field

"""
The status of a request
"""
enum Status {
	"""
	The request has been dispatched
	"""
	SOURCE
	"""
	The request has been verified and aggregated by Hyperbridge
	"""
	HYPERBRIDGE_DELIVERED
	"""
	The request has reached the destination chain
	"""
	DESTINATION
	"""
	The request has been timed out on Hyperbridge
	"""
	HYPERBRIDGE_TIMED_OUT
	"""
	The request has been timed out on the source chain
	"""
	TIMED_OUT
}

"""
Types of participants in the Hyperbridge Protocol
"""
enum ProtocolParticipant {
	RELAYER
	FILLER
	USER
}

"""
System activity types related to reward points
"""
enum RewardPointsActivityType {
	REWARD_POINTS_EARNED
	ORDER_PLACED_POINTS
	ORDER_FILLED_POINTS
	TOKEN_TELEPORTED_POINTS
}

"""
The status of an order
"""
enum OrderStatus {
	"""
	The order has been placed
	"""
	PLACED
	"""
	The order has been filled
	"""
	FILLED
	"""
	The order has been redeemed on the source chain
	"""
	REDEEMED
	"""
	The order has been cancelled and refunded on the source chain
	"""
	REFUNDED
}

"""
The status of an asset teleported via the Token Gateway
"""
enum TeleportStatus {
	"""
	The asset has been teleported to another chain
	"""
	TELEPORTED
	"""
	The asset has been received on the destination chain
	"""
	RECEIVED
	"""
	The asset has been refunded due to failed teleport
	"""
	REFUNDED
}

"""
Important Hyperbridge Stats for a specific chain
"""
type HyperBridgeChainStats @entity {
	"""
	The chain the metrics are for
	"""
	id: ID!

	"""
	Total number of messages sent on Hyperbridge on this chain
	"""
	numberOfMessagesSent: BigInt! @index

	"""
	Total number of messages delivered by Hyperbridge on this chain
	"""
	numberOfDeliveredMessages: BigInt! @index

	"""
	Total number of failed messages sent by Hyperbridge on this chain
	"""
	numberOfFailedDeliveries: BigInt! @index

	"""
	Total number of timed out messages on this chain
	"""
	numberOfTimedOutMessages: BigInt! @index

	"""
	The total amount of transfers sent into the Hyperbridge Host Contracts (transfers in = protocol fee + relayer fee)
	"""
	totalTransfersIn: BigInt! @index

	"""
	Total amount of fees earned by Hyperbridge on the chain (protocol fees)
	"""
	protocolFeesEarned: BigInt! @index

	"""
	Total amount of fees payed out by Hyperbridge to relayers on the chain (relayer fees)
	"""
	feesPayedOutToRelayers: BigInt! @index
}

"""
Hyperbridge Stats for a specific Relayer on a specific chain
"""
type RelayerStatsPerChain @entity @compositeIndexes(fields: [["relayer", "chain"], ["feesEarned", "chain"]]) {
	"""
	Unique identifier of the RelayerChainMetrics entry.
	"""
	id: ID!

	"""
	The relayer the metrics are for
	"""
	relayer: Relayer!

	"""
	The chain the metrics are for
	"""
	chain: String! @index

	"""
	Total number of successful post requests or post responses handled by the Relayer
	"""
	numberOfSuccessfulMessagesDelivered: BigInt!

	"""
	Total number of failed post requests handled by the Relayer
	"""
	numberOfFailedMessagesDelivered: BigInt!

	"""
	Amount of gas spent on successful messages (Gas Cost)
	"""
	gasUsedForSuccessfulMessages: BigInt!

	"""
	Amount of gas spent on failed messages (Gas Cost)
	"""
	gasUsedForFailedMessages: BigInt!

	"""
	Gas fee spent on successful post requests (Gas Cost * Gas Price)
	"""
	gasFeeForSuccessfulMessages: BigInt!

	"""
	Gas fee spent on failed post requests (Gas Cost * Gas Price)
	"""
	gasFeeForFailedMessages: BigInt!

	"""
	The USD value of the gas fee spent on successful post requests
	"""
	usdGasFeeForSuccessfulMessages: BigInt!

	"""
	The USD value of the gas fee spent on failed post requests
	"""
	usdGasFeeForFailedMessages: BigInt!

	"""
	Total fees earned by the relayer
	"""
	feesEarned: BigInt! @index
}

"""
A Hyperbridge Relayer
"""
type Relayer @entity {
	"""
	Unique identifier of the Relayer (also the relayer's address)
	"""
	id: ID!

	"""
	A list of important stats for the Relayer on every network that they support
	"""
	perChainStats: [RelayerStatsPerChain]! @derivedFrom(field: "relayer")
}

"""
Transfers made from/to the Hyperbridge Host
- The host transfers fees to Relayers
- The host receives fees from protocol users
"""
type Transfer @entity @compositeIndexes(fields: [["from", "to"], ["from", "chain"], ["to", "chain"]]) {
	"""
	Unique identifier of the Transfer
	"""
	id: ID!

	"""
	The chain on which the transfer was made
	"""
	chain: String! @index

	"""
	The amount transferred
	"""
	amount: BigInt! @index

	"""
	The address that made the transfer (the hyperbridge host address)
	"""
	from: String! @index

	"""
	The address that received the transfer (the relayer address)
	"""
	to: String! @index
}

"""
A StateMachine Update Event
"""
type StateMachineUpdateEvent
	@entity
	@compositeIndexes(fields: [["stateMachineId", "chain"], ["blockNumber", "chain"], ["height", "chain"]]) {
	"""
	The ID of the StateMachineUpdate (hash of concatenation of stateMachineId and height)
	"""
	id: ID!

	"""
	The ID of the StateMachine
	"""
	stateMachineId: String! @index

	"""
	The height of the block in which the event occured
	"""
	height: Int! @index

	"""
	The chain on which the event occured
	"""
	chain: String! @index

	"""
	The hash of the block in which the event occured
	"""
	blockHash: String!

	"""
	The number of the block in which the event occured
	"""
	blockNumber: Int! @index

	"""
	The hash of the transaction in which the event occured
	"""
	transactionHash: String!

	"""
	The index of the transaction in the block
	"""
	transactionIndex: Int!

	"""
	The state machine commitment timestamp
	"""
	commitmentTimestamp: BigInt!

	"""
	The timestamp of the event
	"""
	createdAt: Date! @index
}

"""
A Hyperbridge Request
"""
type Request @entity @compositeIndexes(fields: [["commitment", "chain"]]) {
	"""
	Unique identifier of the Request (This is the request commitment)
	"""
	id: ID!

	"""
	The commitment of the request
	"""
	commitment: String! @index

	"""
	The chain on which the request was made
	"""
	chain: String! @index

	"""
	This is the statemachine id where this request originated from
	"""
	source: String

	"""
	This is the statemachine where this request is been dispatched to
	"""
	dest: String

	"""
	This is the timestamp when the request would timeout
	"""
	timeoutTimestamp: BigInt

	"""
	The address that dispatched this request
	"""
	from: String!

	"""
	The address receiving this request
	"""
	to: String!

	"""
	Nonce of the request
	"""
	nonce: BigInt!

	"""
	Body of the request
	"""
	body: String!

	"""
	This is the fee set for this request
	"""
	fee: BigInt!

	"""
	Status of the request
	"""
	status: Status!

	"""
	Metatdata about the request's progression through different statuses
	"""
	statusMetadata: [RequestStatusMetadata]! @derivedFrom(field: "request")

	"""
	The timestamp when this record was created
	"""
	createdAt: Date! @index
}

"""
Metadata about the status of a Request
"""
type RequestStatusMetadata @entity {
	"""
	The ID of the RequestStatusMetadata
	"""
	id: ID!

	"""
	The status of the request
	"""
	status: Status!

	"""
	The chain on which the request occured
	"""
	chain: String!

	"""
	The timestamp of the event
	"""
	timestamp: BigInt!

	"""
	The number of the block in which the event occured
	"""
	blockNumber: String!

	"""
	The hash of the block in which the event occured
	"""
	blockHash: String!

	"""
	The hash of the transaction in which the event occured
	"""
	transactionHash: String!

	"""
	The request that owns this status change
	"""
	request: Request!

	"""
	The timestamp when this record was created
	"""
	createdAt: Date! @index
}

"""
A Hyperbridge Response
"""
type Response @entity @compositeIndexes(fields: [["commitment", "chain"]]) {
	"""
	Unique identifier of the Response (This is the response commitment)
	"""
	id: ID!

	"""
	The chain on which the response was made
	"""
	chain: String! @index

	"""
	The commitment of the response
	"""
	commitment: String! @index

	"""
	The response message
	"""
	response_message: String

	"""
	The Timestamp at which this response expires in seconds
	"""
	responseTimeoutTimestamp: BigInt

	"""
	Status of the response
	"""
	status: Status!

	"""
	The request that triggered this response
	"""
	request: Request

	"""
	Metatdata about the response's progression through different statuses
	"""
	statusMetadata: [ResponseStatusMetadata]! @derivedFrom(field: "response")

	"""
	The timestamp when this record was created
	"""
	createdAt: Date! @index
}

"""
Metadata about the status of a Response
"""
type ResponseStatusMetadata @entity {
	"""
	The ID of the ResponseStatusMetadata
	"""
	id: ID!

	"""
	The status of the response
	"""
	status: Status!

	"""
	The chain on which the response occured
	"""
	chain: String!

	"""
	The timestamp of the event
	"""
	timestamp: BigInt!

	"""
	The number of the block in which the event occured
	"""
	blockNumber: String!

	"""
	The hash of the block in which the event occured
	"""
	blockHash: String!

	"""
	The hash of the transaction in which the event occured
	"""
	transactionHash: String!

	"""
	The response that owns this status change
	"""
	response: Response!

	"""
	The timestamp when this record was created
	"""
	createdAt: Date! @index
}

"""
Reward points earned by participants in the hyperbridge protocol
"""
type RewardPoints @entity @compositeIndexes(fields: [["address", "chain"], ["earnerType", "chain"]]) {
	id: ID!
	address: String! @index
	chain: String! @index
	points: BigInt! @index
	earnerType: ProtocolParticipant!
}

type RewardPointsActivityLog
	@entity
	@compositeIndexes(fields: [["earnerAddress", "chain"], ["earnerType", "chain"], ["activityType", "chain"]]) {
	id: ID!
	chain: String! @index
	points: BigInt! @index
	transactionHash: String! @index
	earnerAddress: String! @index
	earnerType: ProtocolParticipant!
	activityType: RewardPointsActivityType!
	description: String!
	createdAt: Date! @index
}

"""
Record of assets teleported via the XCM Gateway
"""
type AssetTeleported @entity {
	"""
	Unique identifier of the teleported asset
	"""
	id: ID!

	"""
	The chain on which the teleport event occurred
	"""
	chain: String!

	"""
	Source account on the relaychain
	"""
	from: String! @index

	"""
	Beneficiary account on destination
	"""
	to: String! @index

	"""
	Amount transferred
	"""
	amount: BigInt! @index

	"""
	Destination chain
	"""
	dest: String! @index

	"""
	Request commitment
	"""
	commitment: String! @index

	"""
	The timestamp of the event
	"""
	createdAt: Date! @index

	"""
	The block in which the event occurred
	"""
	blockNumber: Int!
}

"""
Represents a cross-chain get request event
This entity stores information about requests to fetch data from a source chain to a destination chain
"""
type GetRequest @entity {
	"""
	Unique identifier for the get request, computed as keccak256 hash of the encoded request parameters
	"""
	id: ID!
	"""
	Source chain identifier where the data is being requested from
	"""
	source: String!
	"""
	Destination chain identifier where the data will be sent to
	"""
	dest: String!
	"""
	Address of the account that initiated the get request
	"""
	from: String!
	"""
	Array of keys that need to be fetched from the source chain
	"""
	keys: [String!]!
	"""
	Sequential number to ensure uniqueness of the request
	"""
	nonce: BigInt!
	"""
	Block height at which the request was made
	"""
	height: BigInt!
	"""
	Additional context or metadata for the request
	"""
	context: String!
	"""
	Timestamp after which the request expires
	"""
	timeoutTimestamp: BigInt!
	"""
	Fee paid for processing the request
	"""
	fee: BigInt!
	"""
	Block number where the request was made
	"""
	blockNumber: String!
	"""
	Hash of the block containing the request
	"""
	blockHash: String!
	"""
	Hash of the transaction that created the request
	"""
	transactionHash: String!
	"""
	Timestamp of the block containing the request
	"""
	blockTimestamp: BigInt!
	"""
	Status of the request
	"""
	status: Status!
	"""
	Metatdata about the request's progression through different statuses
	"""
	statusMetadata: [GetRequestStatusMetadata]! @derivedFrom(field: "request")
	"""
	Chain on which the request was made
	"""
	chain: String!
	"""
	commitment of the request
	"""
	commitment: String!
}

"""
Metadata about the status of a Request
"""
type GetRequestStatusMetadata @entity {
	"""
	The ID of the GetRequestStatusMetadata
	"""
	id: ID!

	"""
	The status of the request
	"""
	status: Status!

	"""
	The chain on which the request occured
	"""
	chain: String!

	"""
	The timestamp of the event
	"""
	timestamp: BigInt!

	"""
	The number of the block in which the event occured
	"""
	blockNumber: String!

	"""
	The hash of the block in which the event occured
	"""
	blockHash: String!

	"""
	The hash of the transaction in which the event occured
	"""
	transactionHash: String!

	"""
	The request that owns this status change
	"""
	request: GetRequest!

	"""
	The timestamp when this record was created
	"""
	createdAt: Date! @index
}

"""
A Hyperbridge Response for a Get Request
"""
type GetResponse @entity @compositeIndexes(fields: [["commitment", "chain"]]) {
	"""
	Unique identifier of the GetResponse (This is the response commitment)
	"""
	id: ID!

	"""
	The commitment of the response
	"""
	commitment: String! @index

	"""
	The chain on which the response was made
	"""
	chain: String! @index

	"""
	The key-values fetch from hyperbridge host
	"""
	response_message: [String!]!

	"""
	The Timestamp at which this response expires in seconds
	"""
	responseTimeoutTimestamp: BigInt

	"""
	The request that triggered this response
	"""
	request: GetRequest

	"""
	The timestamp when this record was created
	"""
	createdAt: Date! @index
	"""
	Block number where the response was made
	"""
	blockNumber: String!
	"""
	Hash of the block containing the response
	"""
	blockHash: String!
	"""
	Hash of the transaction that created the response
	"""
	transactionHash: String!
}

"""
Represents an order placed through the IntentGateway contract.
This entity tracks cross-chain orders.
"""
type OrderPlaced @entity {
	"""
	Unique identifier for the order (commitment)
	"""
	id: ID!

	"""
	Address of the user who placed the order
	"""
	user: String!

	"""
	Source chain identifier where the order originates from
	"""
	sourceChain: String!

	"""
	Destination chain identifier where the order will be executed
	"""
	destChain: String!

	"""
	Unique commitment hash of the order used for verification
	"""
	commitment: String!

	"""
	Timestamp after which the order expires
	"""
	deadline: BigInt!

	"""
	Sequential number to ensure uniqueness of the order
	"""
	nonce: BigInt!

	"""
	Total fees supplied by the user for executing the order
	"""
	fees: BigInt!

	"""
	Array of input token addresses
	"""
	inputTokens: [String!]!

	"""
	Array of input token amounts corresponding to inputTokens
	"""
	inputAmounts: [BigInt!]!

	"""
	Array of input token values in USD
	"""
	inputValuesUSD: [String!]!

	"""
	Total input value in USD
	"""
	inputUSD: String!

	"""
	Array of output token addresses
	"""
	outputTokens: [String!]!

	"""
	Array of output token amounts corresponding to outputTokens
	"""
	outputAmounts: [BigInt!]!

	"""
	Array of beneficiary addresses that will receive the output tokens
	"""
	outputBeneficiaries: [String!]!

	"""
	Encoded function call data to be executed on the destination chain
	"""
	calldata: String!

	"""
	Status of the order
	"""
	status: OrderStatus!

	"""
	Metatdata about the order's progression through different statuses
	"""
	statusMetadata: [OrderStatusMetadata]! @derivedFrom(field: "order")

	"""
	Timestamp when the order was created
	"""
	createdAt: Date! @index

	"""
	Block number where the order was placed
	"""
	blockNumber: BigInt! @index

	"""
	Timestamp of the block where the order was placed
	"""
	blockTimestamp: BigInt! @index

	"""
	Hash of the transaction that placed the order
	"""
	transactionHash: String! @index
}

"""
Metadata about the status of an Order
"""
type OrderStatusMetadata @entity {
	"""
	The ID of the OrderStatusMetadata
	"""
	id: ID!

	"""
	The status of the order
	"""
	status: OrderStatus!

	"""
	The chain on which the status change occurred
	"""
	chain: String!

	"""
	The timestamp of the event
	"""
	timestamp: BigInt!

	"""
	The number of the block in which the event occurred
	"""
	blockNumber: String!

	"""
	The hash of the transaction in which the event occurred
	"""
	transactionHash: String!

	"""
	The order that owns this status change
	"""
	order: OrderPlaced!

	"""
	The filler of the order if the order has been filled
	"""
	filler: String

	"""
	The timestamp when this record was created
	"""
	createdAt: Date! @index
}

"""
Represents a teleport of assets through the TokenGateway contract.
This entity tracks cross-chain asset teleports.
"""
type TokenGatewayAssetTeleported @entity {
	"""
	Unique identifier for the teleport (commitment)
	"""
	id: ID!

	"""
	Address of the user who initiated the teleport
	"""
	from: String!

	"""
	Beneficiary address that will receive the teleported assets
	"""
	to: String!

	"""
	Source chain identifier where the teleport originates from
	"""
	sourceChain: String!

	"""
	Destination chain identifier where the teleport will be executed
	"""
	destChain: String!

	"""
	Unique commitment hash of the teleport used for verification
	"""
	commitment: String!

	"""
	Amount of assets being teleported
	"""
	amount: BigInt!

	"""
	Amount of value in USD being teleported
	"""
	usdValue: String!

	"""
	Asset ID being teleported
	"""
	assetId: String!

	"""
	Whether the assets should be redeemed on the destination chain
	"""
	redeem: Boolean!

	"""
	Status of the teleport
	"""
	status: TeleportStatus!

	"""
	Metadata about the teleport's progression through different statuses
	"""
	statusMetadata: [TeleportStatusMetadata]! @derivedFrom(field: "teleport")

	"""
	Timestamp when the teleport was created
	"""
	createdAt: Date!

	"""
	Block number where the teleport was initiated
	"""
	blockNumber: BigInt!

	"""
	Timestamp of the block where the teleport was initiated
	"""
	blockTimestamp: BigInt!

	"""
	Hash of the transaction that initiated the teleport
	"""
	transactionHash: String!
}

"""
Metadata about the status of a Teleport
"""
type TeleportStatusMetadata @entity {
	"""
	The ID of the TeleportStatusMetadata
	"""
	id: ID!

	"""
	The status of the teleport
	"""
	status: TeleportStatus!

	"""
	The chain on which the status change occurred
	"""
	chain: String!

	"""
	The timestamp of the event
	"""
	timestamp: BigInt!

	"""
	The number of the block in which the event occurred
	"""
	blockNumber: String!

	"""
	The hash of the transaction in which the event occurred
	"""
	transactionHash: String!

	"""
	The teleport that owns this status change
	"""
	teleport: TokenGatewayAssetTeleported!

	"""
	The timestamp when this record was created
	"""
	createdAt: Date!
}

type CumulativeVolumeUSD @entity {
	"""
	Unique identifier for the cumulative stats
	"""
	id: ID!

	"""
	Last updated at
	"""
	lastUpdatedAt: BigInt!

	"""
	Volume in USD
	"""
	volumeUSD: String!
}

type DailyVolumeUSD @entity {
	"""
	Unique identifier for the daily volume stats
	"""
	id: ID!

	"""
	Last updated at
	"""
	lastUpdatedAt: BigInt!

	"""
	The timestamp when this record was created
	"""
	createdAt: Date!

	"""
	Last 24hrs Volume in USD
	"""
	last24HoursVolumeUSD: String!
}

"""
Daily Hyperbridge Protocol Fees Stats
"""
type DailyProtocolFeesStats @entity {
    """
    Unique identifier of the daily protocol fees
    """
    id: ID!

   	"""
	The chain on which the protocol fees are charged
	"""
	chain: String! @index

	"""
	The ID of the StateMachine
	"""
	stateMachineId: String! @index

	"""
	Last updated at
	"""
	lastUpdatedAt: BigInt!

	"""
	The timestamp when this record was created
	"""
	createdAt: Date!

	"""
	Last 24Hrs Protocol Fees Earned
	"""
	last24HoursProtocolFeesEarned: BigInt! @index
}
