/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type PerByteFeeStruct = {
  stateIdHash: BytesLike;
  perByteFee: BigNumberish;
};

export type PerByteFeeStructOutput = [string, BigNumber] & {
  stateIdHash: string;
  perByteFee: BigNumber;
};

export type HostParamsStruct = {
  defaultTimeout: BigNumberish;
  defaultPerByteFee: BigNumberish;
  stateCommitmentFee: BigNumberish;
  feeToken: string;
  admin: string;
  handler: string;
  hostManager: string;
  uniswapV2: string;
  unStakingPeriod: BigNumberish;
  challengePeriod: BigNumberish;
  consensusClient: string;
  stateMachines: BigNumberish[];
  perByteFees: PerByteFeeStruct[];
  hyperbridge: BytesLike;
};

export type HostParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  BigNumber[],
  PerByteFeeStructOutput[],
  string
] & {
  defaultTimeout: BigNumber;
  defaultPerByteFee: BigNumber;
  stateCommitmentFee: BigNumber;
  feeToken: string;
  admin: string;
  handler: string;
  hostManager: string;
  uniswapV2: string;
  unStakingPeriod: BigNumber;
  challengePeriod: BigNumber;
  consensusClient: string;
  stateMachines: BigNumber[];
  perByteFees: PerByteFeeStructOutput[];
  hyperbridge: string;
};

export type StateCommitmentStruct = {
  timestamp: BigNumberish;
  overlayRoot: BytesLike;
  stateRoot: BytesLike;
};

export type StateCommitmentStructOutput = [BigNumber, string, string] & {
  timestamp: BigNumber;
  overlayRoot: string;
  stateRoot: string;
};

export type StateMachineHeightStruct = {
  stateMachineId: BigNumberish;
  height: BigNumberish;
};

export type StateMachineHeightStructOutput = [BigNumber, BigNumber] & {
  stateMachineId: BigNumber;
  height: BigNumber;
};

export type FeeMetadataStruct = { fee: BigNumberish; sender: string };

export type FeeMetadataStructOutput = [BigNumber, string] & {
  fee: BigNumber;
  sender: string;
};

export type ResponseReceiptStruct = {
  responseCommitment: BytesLike;
  relayer: string;
};

export type ResponseReceiptStructOutput = [string, string] & {
  responseCommitment: string;
  relayer: string;
};

export type WithdrawParamsStruct = {
  beneficiary: string;
  amount: BigNumberish;
  native: boolean;
};

export type WithdrawParamsStructOutput = [string, BigNumber, boolean] & {
  beneficiary: string;
  amount: BigNumber;
  native: boolean;
};

export interface EthereumHostAbiInterface extends utils.Interface {
  functions: {
    "CHAIN_ID()": FunctionFragment;
    "admin()": FunctionFragment;
    "chainId()": FunctionFragment;
    "challengePeriod()": FunctionFragment;
    "consensusClient()": FunctionFragment;
    "consensusState()": FunctionFragment;
    "consensusUpdateTime()": FunctionFragment;
    "deleteStateMachineCommitment((uint256,uint256),address)": FunctionFragment;
    "feeToken()": FunctionFragment;
    "frozen()": FunctionFragment;
    "fundRequest(bytes32,uint256)": FunctionFragment;
    "fundResponse(bytes32,uint256)": FunctionFragment;
    "host()": FunctionFragment;
    "hostParams()": FunctionFragment;
    "hyperbridge()": FunctionFragment;
    "latestStateMachineHeight(uint256)": FunctionFragment;
    "nonce()": FunctionFragment;
    "perByteFee(bytes)": FunctionFragment;
    "requestCommitments(bytes32)": FunctionFragment;
    "requestReceipts(bytes32)": FunctionFragment;
    "responded(bytes32)": FunctionFragment;
    "responseCommitments(bytes32)": FunctionFragment;
    "responseReceipts(bytes32)": FunctionFragment;
    "setConsensusState(bytes,(uint256,uint256),(uint256,bytes32,bytes32))": FunctionFragment;
    "setFrozenState(uint8)": FunctionFragment;
    "stateCommitmentFee()": FunctionFragment;
    "stateMachineCommitment((uint256,uint256))": FunctionFragment;
    "stateMachineCommitmentUpdateTime((uint256,uint256))": FunctionFragment;
    "stateMachineId(bytes,uint256)": FunctionFragment;
    "storeConsensusState(bytes)": FunctionFragment;
    "storeStateMachineCommitment((uint256,uint256),(uint256,bytes32,bytes32))": FunctionFragment;
    "timestamp()": FunctionFragment;
    "unStakingPeriod()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "updateHostParams((uint256,uint256,uint256,address,address,address,address,address,uint256,uint256,address,uint256[],(bytes32,uint256)[],bytes))": FunctionFragment;
    "vetoes(uint256,uint256)": FunctionFragment;
    "withdraw((address,uint256,bool))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CHAIN_ID"
      | "admin"
      | "chainId"
      | "challengePeriod"
      | "consensusClient"
      | "consensusState"
      | "consensusUpdateTime"
      | "deleteStateMachineCommitment"
      | "feeToken"
      | "frozen"
      | "fundRequest"
      | "fundResponse"
      | "host"
      | "hostParams"
      | "hyperbridge"
      | "latestStateMachineHeight"
      | "nonce"
      | "perByteFee"
      | "requestCommitments"
      | "requestReceipts"
      | "responded"
      | "responseCommitments"
      | "responseReceipts"
      | "setConsensusState"
      | "setFrozenState"
      | "stateCommitmentFee"
      | "stateMachineCommitment"
      | "stateMachineCommitmentUpdateTime"
      | "stateMachineId"
      | "storeConsensusState"
      | "storeStateMachineCommitment"
      | "timestamp"
      | "unStakingPeriod"
      | "uniswapV2Router"
      | "updateHostParams"
      | "vetoes"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "CHAIN_ID", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "challengePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consensusClient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consensusState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consensusUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteStateMachineCommitment",
    values: [StateMachineHeightStruct, string]
  ): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "frozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundRequest",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundResponse",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "host", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hostParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hyperbridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestStateMachineHeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "perByteFee",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestCommitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestReceipts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "responded",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "responseCommitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "responseReceipts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setConsensusState",
    values: [BytesLike, StateMachineHeightStruct, StateCommitmentStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setFrozenState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateCommitmentFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stateMachineCommitment",
    values: [StateMachineHeightStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "stateMachineCommitmentUpdateTime",
    values: [StateMachineHeightStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "stateMachineId",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storeConsensusState",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "storeStateMachineCommitment",
    values: [StateMachineHeightStruct, StateCommitmentStruct]
  ): string;
  encodeFunctionData(functionFragment: "timestamp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unStakingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateHostParams",
    values: [HostParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "vetoes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [WithdrawParamsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "CHAIN_ID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "challengePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consensusClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consensusState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consensusUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteStateMachineCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frozen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "host", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hostParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hyperbridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestStateMachineHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "perByteFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "responded", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "responseCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "responseReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConsensusState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFrozenState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateCommitmentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateMachineCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateMachineCommitmentUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateMachineId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeConsensusState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeStateMachineCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unStakingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateHostParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vetoes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "GetRequestEvent(string,string,address,bytes[],uint256,uint256,uint256,bytes,uint256)": EventFragment;
    "GetRequestHandled(bytes32,address)": EventFragment;
    "GetRequestTimeoutHandled(bytes32,string)": EventFragment;
    "HostFrozen(uint8)": EventFragment;
    "HostParamsUpdated((uint256,uint256,uint256,address,address,address,address,address,uint256,uint256,address,uint256[],(bytes32,uint256)[],bytes),(uint256,uint256,uint256,address,address,address,address,address,uint256,uint256,address,uint256[],(bytes32,uint256)[],bytes))": EventFragment;
    "HostWithdrawal(uint256,address,bool)": EventFragment;
    "PostRequestEvent(string,string,address,bytes,uint256,uint256,bytes,uint256)": EventFragment;
    "PostRequestHandled(bytes32,address)": EventFragment;
    "PostRequestTimeoutHandled(bytes32,string)": EventFragment;
    "PostResponseEvent(string,string,address,bytes,uint256,uint256,bytes,bytes,uint256,uint256)": EventFragment;
    "PostResponseFunded(bytes32,uint256)": EventFragment;
    "PostResponseHandled(bytes32,address)": EventFragment;
    "PostResponseTimeoutHandled(bytes32,string)": EventFragment;
    "RequestFunded(bytes32,uint256)": EventFragment;
    "StateCommitmentRead(address,uint256)": EventFragment;
    "StateCommitmentVetoed(string,uint256,(uint256,bytes32,bytes32),address)": EventFragment;
    "StateMachineUpdated(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GetRequestEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetRequestHandled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetRequestTimeoutHandled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HostFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HostParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HostWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostRequestEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostRequestHandled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostRequestTimeoutHandled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostResponseEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostResponseFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostResponseHandled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostResponseTimeoutHandled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StateCommitmentRead"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StateCommitmentVetoed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StateMachineUpdated"): EventFragment;
}

export interface GetRequestEventEventObject {
  source: string;
  dest: string;
  from: string;
  keys: string[];
  height: BigNumber;
  nonce: BigNumber;
  timeoutTimestamp: BigNumber;
  context: string;
  fee: BigNumber;
}
export type GetRequestEventEvent = TypedEvent<
  [
    string,
    string,
    string,
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ],
  GetRequestEventEventObject
>;

export type GetRequestEventEventFilter = TypedEventFilter<GetRequestEventEvent>;

export interface GetRequestHandledEventObject {
  commitment: string;
  relayer: string;
}
export type GetRequestHandledEvent = TypedEvent<
  [string, string],
  GetRequestHandledEventObject
>;

export type GetRequestHandledEventFilter =
  TypedEventFilter<GetRequestHandledEvent>;

export interface GetRequestTimeoutHandledEventObject {
  commitment: string;
  dest: string;
}
export type GetRequestTimeoutHandledEvent = TypedEvent<
  [string, string],
  GetRequestTimeoutHandledEventObject
>;

export type GetRequestTimeoutHandledEventFilter =
  TypedEventFilter<GetRequestTimeoutHandledEvent>;

export interface HostFrozenEventObject {
  status: number;
}
export type HostFrozenEvent = TypedEvent<[number], HostFrozenEventObject>;

export type HostFrozenEventFilter = TypedEventFilter<HostFrozenEvent>;

export interface HostParamsUpdatedEventObject {
  oldParams: HostParamsStructOutput;
  newParams: HostParamsStructOutput;
}
export type HostParamsUpdatedEvent = TypedEvent<
  [HostParamsStructOutput, HostParamsStructOutput],
  HostParamsUpdatedEventObject
>;

export type HostParamsUpdatedEventFilter =
  TypedEventFilter<HostParamsUpdatedEvent>;

export interface HostWithdrawalEventObject {
  amount: BigNumber;
  beneficiary: string;
  native: boolean;
}
export type HostWithdrawalEvent = TypedEvent<
  [BigNumber, string, boolean],
  HostWithdrawalEventObject
>;

export type HostWithdrawalEventFilter = TypedEventFilter<HostWithdrawalEvent>;

export interface PostRequestEventEventObject {
  source: string;
  dest: string;
  from: string;
  to: string;
  nonce: BigNumber;
  timeoutTimestamp: BigNumber;
  body: string;
  fee: BigNumber;
}
export type PostRequestEventEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, string, BigNumber],
  PostRequestEventEventObject
>;

export type PostRequestEventEventFilter =
  TypedEventFilter<PostRequestEventEvent>;

export interface PostRequestHandledEventObject {
  commitment: string;
  relayer: string;
}
export type PostRequestHandledEvent = TypedEvent<
  [string, string],
  PostRequestHandledEventObject
>;

export type PostRequestHandledEventFilter =
  TypedEventFilter<PostRequestHandledEvent>;

export interface PostRequestTimeoutHandledEventObject {
  commitment: string;
  dest: string;
}
export type PostRequestTimeoutHandledEvent = TypedEvent<
  [string, string],
  PostRequestTimeoutHandledEventObject
>;

export type PostRequestTimeoutHandledEventFilter =
  TypedEventFilter<PostRequestTimeoutHandledEvent>;

export interface PostResponseEventEventObject {
  source: string;
  dest: string;
  from: string;
  to: string;
  nonce: BigNumber;
  timeoutTimestamp: BigNumber;
  body: string;
  response: string;
  responseTimeoutTimestamp: BigNumber;
  fee: BigNumber;
}
export type PostResponseEventEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ],
  PostResponseEventEventObject
>;

export type PostResponseEventEventFilter =
  TypedEventFilter<PostResponseEventEvent>;

export interface PostResponseFundedEventObject {
  commitment: string;
  newFee: BigNumber;
}
export type PostResponseFundedEvent = TypedEvent<
  [string, BigNumber],
  PostResponseFundedEventObject
>;

export type PostResponseFundedEventFilter =
  TypedEventFilter<PostResponseFundedEvent>;

export interface PostResponseHandledEventObject {
  commitment: string;
  relayer: string;
}
export type PostResponseHandledEvent = TypedEvent<
  [string, string],
  PostResponseHandledEventObject
>;

export type PostResponseHandledEventFilter =
  TypedEventFilter<PostResponseHandledEvent>;

export interface PostResponseTimeoutHandledEventObject {
  commitment: string;
  dest: string;
}
export type PostResponseTimeoutHandledEvent = TypedEvent<
  [string, string],
  PostResponseTimeoutHandledEventObject
>;

export type PostResponseTimeoutHandledEventFilter =
  TypedEventFilter<PostResponseTimeoutHandledEvent>;

export interface RequestFundedEventObject {
  commitment: string;
  newFee: BigNumber;
}
export type RequestFundedEvent = TypedEvent<
  [string, BigNumber],
  RequestFundedEventObject
>;

export type RequestFundedEventFilter = TypedEventFilter<RequestFundedEvent>;

export interface StateCommitmentReadEventObject {
  caller: string;
  fee: BigNumber;
}
export type StateCommitmentReadEvent = TypedEvent<
  [string, BigNumber],
  StateCommitmentReadEventObject
>;

export type StateCommitmentReadEventFilter =
  TypedEventFilter<StateCommitmentReadEvent>;

export interface StateCommitmentVetoedEventObject {
  stateMachineId: string;
  height: BigNumber;
  stateCommitment: StateCommitmentStructOutput;
  fisherman: string;
}
export type StateCommitmentVetoedEvent = TypedEvent<
  [string, BigNumber, StateCommitmentStructOutput, string],
  StateCommitmentVetoedEventObject
>;

export type StateCommitmentVetoedEventFilter =
  TypedEventFilter<StateCommitmentVetoedEvent>;

export interface StateMachineUpdatedEventObject {
  stateMachineId: string;
  height: BigNumber;
}
export type StateMachineUpdatedEvent = TypedEvent<
  [string, BigNumber],
  StateMachineUpdatedEventObject
>;

export type StateMachineUpdatedEventFilter =
  TypedEventFilter<StateMachineUpdatedEvent>;

export interface EthereumHostAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EthereumHostAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CHAIN_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    chainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    challengePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    consensusClient(overrides?: CallOverrides): Promise<[string]>;

    consensusState(overrides?: CallOverrides): Promise<[string]>;

    consensusUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    deleteStateMachineCommitment(
      height: StateMachineHeightStruct,
      fisherman: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    feeToken(overrides?: CallOverrides): Promise<[string]>;

    frozen(overrides?: CallOverrides): Promise<[number]>;

    fundRequest(
      commitment: BytesLike,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    fundResponse(
      commitment: BytesLike,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    host(overrides?: CallOverrides): Promise<[string]>;

    hostParams(overrides?: CallOverrides): Promise<[HostParamsStructOutput]>;

    hyperbridge(overrides?: CallOverrides): Promise<[string]>;

    latestStateMachineHeight(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    perByteFee(
      stateId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    requestCommitments(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<[FeeMetadataStructOutput]>;

    requestReceipts(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    responded(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    responseCommitments(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<[FeeMetadataStructOutput]>;

    responseReceipts(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<[ResponseReceiptStructOutput]>;

    setConsensusState(
      state: BytesLike,
      height: StateMachineHeightStruct,
      commitment: StateCommitmentStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFrozenState(
      newState: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stateCommitmentFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    stateMachineCommitment(
      height: StateMachineHeightStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    stateMachineCommitmentUpdateTime(
      height: StateMachineHeightStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stateMachineId(
      parachainId: BytesLike,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    storeConsensusState(
      state: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    storeStateMachineCommitment(
      height: StateMachineHeightStruct,
      commitment: StateCommitmentStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    timestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    unStakingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    uniswapV2Router(overrides?: CallOverrides): Promise<[string]>;

    updateHostParams(
      params: HostParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vetoes(
      paraId: BigNumberish,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

  admin(overrides?: CallOverrides): Promise<string>;

  chainId(overrides?: CallOverrides): Promise<BigNumber>;

  challengePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  consensusClient(overrides?: CallOverrides): Promise<string>;

  consensusState(overrides?: CallOverrides): Promise<string>;

  consensusUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  deleteStateMachineCommitment(
    height: StateMachineHeightStruct,
    fisherman: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  feeToken(overrides?: CallOverrides): Promise<string>;

  frozen(overrides?: CallOverrides): Promise<number>;

  fundRequest(
    commitment: BytesLike,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  fundResponse(
    commitment: BytesLike,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  host(overrides?: CallOverrides): Promise<string>;

  hostParams(overrides?: CallOverrides): Promise<HostParamsStructOutput>;

  hyperbridge(overrides?: CallOverrides): Promise<string>;

  latestStateMachineHeight(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  perByteFee(stateId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  requestCommitments(
    commitment: BytesLike,
    overrides?: CallOverrides
  ): Promise<FeeMetadataStructOutput>;

  requestReceipts(
    commitment: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  responded(commitment: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  responseCommitments(
    commitment: BytesLike,
    overrides?: CallOverrides
  ): Promise<FeeMetadataStructOutput>;

  responseReceipts(
    commitment: BytesLike,
    overrides?: CallOverrides
  ): Promise<ResponseReceiptStructOutput>;

  setConsensusState(
    state: BytesLike,
    height: StateMachineHeightStruct,
    commitment: StateCommitmentStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFrozenState(
    newState: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stateCommitmentFee(overrides?: CallOverrides): Promise<BigNumber>;

  stateMachineCommitment(
    height: StateMachineHeightStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  stateMachineCommitmentUpdateTime(
    height: StateMachineHeightStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stateMachineId(
    parachainId: BytesLike,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  storeConsensusState(
    state: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  storeStateMachineCommitment(
    height: StateMachineHeightStruct,
    commitment: StateCommitmentStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  timestamp(overrides?: CallOverrides): Promise<BigNumber>;

  unStakingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  updateHostParams(
    params: HostParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vetoes(
    paraId: BigNumberish,
    height: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  withdraw(
    params: WithdrawParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<string>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    challengePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    consensusClient(overrides?: CallOverrides): Promise<string>;

    consensusState(overrides?: CallOverrides): Promise<string>;

    consensusUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    deleteStateMachineCommitment(
      height: StateMachineHeightStruct,
      fisherman: string,
      overrides?: CallOverrides
    ): Promise<void>;

    feeToken(overrides?: CallOverrides): Promise<string>;

    frozen(overrides?: CallOverrides): Promise<number>;

    fundRequest(
      commitment: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fundResponse(
      commitment: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    host(overrides?: CallOverrides): Promise<string>;

    hostParams(overrides?: CallOverrides): Promise<HostParamsStructOutput>;

    hyperbridge(overrides?: CallOverrides): Promise<string>;

    latestStateMachineHeight(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    perByteFee(
      stateId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestCommitments(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<FeeMetadataStructOutput>;

    requestReceipts(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    responded(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    responseCommitments(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<FeeMetadataStructOutput>;

    responseReceipts(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<ResponseReceiptStructOutput>;

    setConsensusState(
      state: BytesLike,
      height: StateMachineHeightStruct,
      commitment: StateCommitmentStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setFrozenState(
      newState: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stateCommitmentFee(overrides?: CallOverrides): Promise<BigNumber>;

    stateMachineCommitment(
      height: StateMachineHeightStruct,
      overrides?: CallOverrides
    ): Promise<StateCommitmentStructOutput>;

    stateMachineCommitmentUpdateTime(
      height: StateMachineHeightStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateMachineId(
      parachainId: BytesLike,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    storeConsensusState(
      state: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    storeStateMachineCommitment(
      height: StateMachineHeightStruct,
      commitment: StateCommitmentStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    unStakingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    updateHostParams(
      params: HostParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    vetoes(
      paraId: BigNumberish,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GetRequestEvent(string,string,address,bytes[],uint256,uint256,uint256,bytes,uint256)"(
      source?: null,
      dest?: null,
      from?: string | null,
      keys?: null,
      height?: null,
      nonce?: null,
      timeoutTimestamp?: null,
      context?: null,
      fee?: null
    ): GetRequestEventEventFilter;
    GetRequestEvent(
      source?: null,
      dest?: null,
      from?: string | null,
      keys?: null,
      height?: null,
      nonce?: null,
      timeoutTimestamp?: null,
      context?: null,
      fee?: null
    ): GetRequestEventEventFilter;

    "GetRequestHandled(bytes32,address)"(
      commitment?: BytesLike | null,
      relayer?: null
    ): GetRequestHandledEventFilter;
    GetRequestHandled(
      commitment?: BytesLike | null,
      relayer?: null
    ): GetRequestHandledEventFilter;

    "GetRequestTimeoutHandled(bytes32,string)"(
      commitment?: BytesLike | null,
      dest?: null
    ): GetRequestTimeoutHandledEventFilter;
    GetRequestTimeoutHandled(
      commitment?: BytesLike | null,
      dest?: null
    ): GetRequestTimeoutHandledEventFilter;

    "HostFrozen(uint8)"(status?: null): HostFrozenEventFilter;
    HostFrozen(status?: null): HostFrozenEventFilter;

    "HostParamsUpdated((uint256,uint256,uint256,address,address,address,address,address,uint256,uint256,address,uint256[],(bytes32,uint256)[],bytes),(uint256,uint256,uint256,address,address,address,address,address,uint256,uint256,address,uint256[],(bytes32,uint256)[],bytes))"(
      oldParams?: null,
      newParams?: null
    ): HostParamsUpdatedEventFilter;
    HostParamsUpdated(
      oldParams?: null,
      newParams?: null
    ): HostParamsUpdatedEventFilter;

    "HostWithdrawal(uint256,address,bool)"(
      amount?: null,
      beneficiary?: null,
      native?: null
    ): HostWithdrawalEventFilter;
    HostWithdrawal(
      amount?: null,
      beneficiary?: null,
      native?: null
    ): HostWithdrawalEventFilter;

    "PostRequestEvent(string,string,address,bytes,uint256,uint256,bytes,uint256)"(
      source?: null,
      dest?: null,
      from?: string | null,
      to?: null,
      nonce?: null,
      timeoutTimestamp?: null,
      body?: null,
      fee?: null
    ): PostRequestEventEventFilter;
    PostRequestEvent(
      source?: null,
      dest?: null,
      from?: string | null,
      to?: null,
      nonce?: null,
      timeoutTimestamp?: null,
      body?: null,
      fee?: null
    ): PostRequestEventEventFilter;

    "PostRequestHandled(bytes32,address)"(
      commitment?: BytesLike | null,
      relayer?: null
    ): PostRequestHandledEventFilter;
    PostRequestHandled(
      commitment?: BytesLike | null,
      relayer?: null
    ): PostRequestHandledEventFilter;

    "PostRequestTimeoutHandled(bytes32,string)"(
      commitment?: BytesLike | null,
      dest?: null
    ): PostRequestTimeoutHandledEventFilter;
    PostRequestTimeoutHandled(
      commitment?: BytesLike | null,
      dest?: null
    ): PostRequestTimeoutHandledEventFilter;

    "PostResponseEvent(string,string,address,bytes,uint256,uint256,bytes,bytes,uint256,uint256)"(
      source?: null,
      dest?: null,
      from?: string | null,
      to?: null,
      nonce?: null,
      timeoutTimestamp?: null,
      body?: null,
      response?: null,
      responseTimeoutTimestamp?: null,
      fee?: null
    ): PostResponseEventEventFilter;
    PostResponseEvent(
      source?: null,
      dest?: null,
      from?: string | null,
      to?: null,
      nonce?: null,
      timeoutTimestamp?: null,
      body?: null,
      response?: null,
      responseTimeoutTimestamp?: null,
      fee?: null
    ): PostResponseEventEventFilter;

    "PostResponseFunded(bytes32,uint256)"(
      commitment?: BytesLike | null,
      newFee?: null
    ): PostResponseFundedEventFilter;
    PostResponseFunded(
      commitment?: BytesLike | null,
      newFee?: null
    ): PostResponseFundedEventFilter;

    "PostResponseHandled(bytes32,address)"(
      commitment?: BytesLike | null,
      relayer?: null
    ): PostResponseHandledEventFilter;
    PostResponseHandled(
      commitment?: BytesLike | null,
      relayer?: null
    ): PostResponseHandledEventFilter;

    "PostResponseTimeoutHandled(bytes32,string)"(
      commitment?: BytesLike | null,
      dest?: null
    ): PostResponseTimeoutHandledEventFilter;
    PostResponseTimeoutHandled(
      commitment?: BytesLike | null,
      dest?: null
    ): PostResponseTimeoutHandledEventFilter;

    "RequestFunded(bytes32,uint256)"(
      commitment?: BytesLike | null,
      newFee?: null
    ): RequestFundedEventFilter;
    RequestFunded(
      commitment?: BytesLike | null,
      newFee?: null
    ): RequestFundedEventFilter;

    "StateCommitmentRead(address,uint256)"(
      caller?: string | null,
      fee?: null
    ): StateCommitmentReadEventFilter;
    StateCommitmentRead(
      caller?: string | null,
      fee?: null
    ): StateCommitmentReadEventFilter;

    "StateCommitmentVetoed(string,uint256,(uint256,bytes32,bytes32),address)"(
      stateMachineId?: null,
      height?: null,
      stateCommitment?: null,
      fisherman?: string | null
    ): StateCommitmentVetoedEventFilter;
    StateCommitmentVetoed(
      stateMachineId?: null,
      height?: null,
      stateCommitment?: null,
      fisherman?: string | null
    ): StateCommitmentVetoedEventFilter;

    "StateMachineUpdated(string,uint256)"(
      stateMachineId?: null,
      height?: null
    ): StateMachineUpdatedEventFilter;
    StateMachineUpdated(
      stateMachineId?: null,
      height?: null
    ): StateMachineUpdatedEventFilter;
  };

  estimateGas: {
    CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    challengePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    consensusClient(overrides?: CallOverrides): Promise<BigNumber>;

    consensusState(overrides?: CallOverrides): Promise<BigNumber>;

    consensusUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    deleteStateMachineCommitment(
      height: StateMachineHeightStruct,
      fisherman: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<BigNumber>;

    frozen(overrides?: CallOverrides): Promise<BigNumber>;

    fundRequest(
      commitment: BytesLike,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    fundResponse(
      commitment: BytesLike,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    host(overrides?: CallOverrides): Promise<BigNumber>;

    hostParams(overrides?: CallOverrides): Promise<BigNumber>;

    hyperbridge(overrides?: CallOverrides): Promise<BigNumber>;

    latestStateMachineHeight(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    perByteFee(
      stateId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestCommitments(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestReceipts(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    responded(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    responseCommitments(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    responseReceipts(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setConsensusState(
      state: BytesLike,
      height: StateMachineHeightStruct,
      commitment: StateCommitmentStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFrozenState(
      newState: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stateCommitmentFee(overrides?: CallOverrides): Promise<BigNumber>;

    stateMachineCommitment(
      height: StateMachineHeightStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    stateMachineCommitmentUpdateTime(
      height: StateMachineHeightStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateMachineId(
      parachainId: BytesLike,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storeConsensusState(
      state: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    storeStateMachineCommitment(
      height: StateMachineHeightStruct,
      commitment: StateCommitmentStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    unStakingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    updateHostParams(
      params: HostParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    vetoes(
      paraId: BigNumberish,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CHAIN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    challengePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    consensusClient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    consensusState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    consensusUpdateTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteStateMachineCommitment(
      height: StateMachineHeightStruct,
      fisherman: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    feeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    frozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundRequest(
      commitment: BytesLike,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fundResponse(
      commitment: BytesLike,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    host(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hostParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hyperbridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestStateMachineHeight(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perByteFee(
      stateId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestCommitments(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestReceipts(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    responded(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    responseCommitments(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    responseReceipts(
      commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setConsensusState(
      state: BytesLike,
      height: StateMachineHeightStruct,
      commitment: StateCommitmentStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFrozenState(
      newState: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stateCommitmentFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateMachineCommitment(
      height: StateMachineHeightStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stateMachineCommitmentUpdateTime(
      height: StateMachineHeightStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateMachineId(
      parachainId: BytesLike,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storeConsensusState(
      state: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    storeStateMachineCommitment(
      height: StateMachineHeightStruct,
      commitment: StateCommitmentStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unStakingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateHostParams(
      params: HostParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vetoes(
      paraId: BigNumberish,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      params: WithdrawParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
